# `.lit` Settings

This file is special in that it is parsed and any `!plugins` it contains are pre-populated for all other `.lit` documents.

Move or copy any document specific `!plugin`s here to have them apply to all documents.

## Table of Contents


## Settings 

Not yet Implemented the below are mocks while we decide on the interface. Just another kind of `!plugin`? data exports could work the same...

```js !setting ns=lit
export const setting = {
  base: '/'
}
```



```js !setting ns=github
export const setting = {
  username: 'dotlitdev',
  repo: 'dotlit',
  branch: 'main',
  base: 'src/',
}
```

## ðŸ”Œ Plug-ins

Not yet Implemented, to replace existing implementation of `!viewer` and `!transformer`, with `!plugin type=xxx`

### `type`s

- [ ] `parser`: 
- [ ] `renderer`: 
- [x] `viewer`: 
- [ ] `transformer`:
- [x] `repl`:

```js
const all = lit.file.data.plugins
return Object.keys(all).map(t=>t+ Object.keys(all[t]).length)
```
```>txt attached=true updated=1620207627680
[ 'unknown0', 'parser1', 'renderer1', 'viewer2', 'data1', 'repl1' ]
```

### Examples

```js !plugin id=example-parser
export const parser = (...args) => {
  return (tree) => {
    tree.data = file.data || {}
    tree.data__examplePluginActive = true
  }
}
```
```js !plugin id=example-renderer
export const renderer = (...args) => {
  return (tree,file) => {
    file.data = file.data || {}
    file.data.__examplePluginActive = true
  }
}
```
```js !plugin of=example-viewer
export const viewer = ({node, React}) => {
  return "Example viewer plugin used."
}
```
```js !plugin type=data id=example-data
export const data = {
  foo: "bar"
}
```

### My plugins

#### Plant`uml` viewer & repl
Uses [plantuml.com](https://plantuml.com) to create `svg` images from `uml` source. Not included as a default viewer due to the external dependency, but it's great! See [[renderer/viewers/plantuml]] for more.

*Implementation:*

```js !plugin of=uml !collapse #viewer type=repl

async function encodePlantUML(src) {
      console.log("encoding", src)
      const module = await import("https://cdn.skypack.dev/plantuml-encoder");
      const encoded = module.encode(src) //.replace(/\n/g, '\\n'))
      console.log(encoded)
      return encoded
}

const getEndpoint = (format, encoded) => `https://plantuml.com/plantuml/${format}/` + encoded

export const repl = async (src, meta, node) => {
  const format = (meta && meta.format) || 'svg'
  const encoded = await encodePlantUML(src)
  const url = getEndpoint(format, encoded)
  return url
}

export const viewer = ({node, React}) => {
  const rc = React.createElement
  const {useState, useEffect} = React
  const meta = node.properties 
               && node.properties.meta

  const format = (meta && meta.format) || 'svg'
  const [url, setUrl] = useState(null)

  const src = node.value
  useEffect(async ()=> {
    const encoded = await encodePlantUML(node.data.value)
    const url = getEndpoint(format, encoded)
    setUrl(url)
  },[src])

  return rc('div', {
    className: 'lit-viewer-plantuml2',
  }, url ? rc('img', {
    src: url,
  }) : "Loading...")
}
```





*Example usage:*

```uml !below repl=uml > img
@startmindmap
* root node
	* some first level node
		* second level node
		* another second level node
	* another first level node
@endmindmap
```
```>img attached=true updated=1620213179672
https://plantuml.com/plantuml/png/SoWkIImgoStCIybDBE3IKYZApozHoCjFIUNYr58epizDLKZBB2ekKSX9BKlDWKg0P5AJy_DIq4KJy_9BCbABiCaY937CSqW5MWvr0000
```