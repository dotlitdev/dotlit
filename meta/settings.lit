# `.lit` Settings

This file is special in that it is parsed and any `!plugins` it contains are pre-populated for all other `.lit` documents.

Move or copy any document specific `!plugin`s here to have them apply to all documents.

## Table of Contents


## Settings 

Not yet Implemented the below are mocks while we decide on the interface. Just another kind of `!plugin`? data exports could work the same...

```js !setting ns=lit
export const setting = {
  base: '/'
}
```



```js !setting ns=github
export const setting = {
  username: 'dotlitdev',
  repo: 'dotlit',
  branch: 'main',
  base: 'src/',
}
```

## ðŸ”Œ Plug-ins

Not yet Implemented, to replace existing implementation of `!viewer` and `!transformer`, with `!plugin type=xxx`

### `type`s

- [ ] `parser`: 
- [ ] `renderer`: 
- [x] `viewer`: 
- [ ] `transformer`:

```js
return lit.file.data.plugins
```
```>txt attached=true updated=1620128116169
{ unknown: {},
  parser: { 'example-parser': [Function: parser] },
  renderer: { 'example-renderer': [Function: renderer] },
  viewer: { 'example-viewer': [Function: viewer] },
  data: { 'example-data': { foo: 'bar' } } }
```

### Examples

```js !plugin id=example-parser
export const parser = (...args) => {
  return (tree) => {
    tree.data = file.data || {}
    tree.data__examplePluginActive = true
  }
}
```
```js !plugin id=example-renderer
export const renderer = (...args) => {
  return (tree,file) => {
    file.data = file.data || {}
    file.data.__examplePluginActive = true
  }
}
```
```js !plugin of=example-viewer
export const viewer = ({node, React}) => {
  return "Example viewer plugin used."
}
```
```js !plugin type=data id=example-data
export const data = {
  foo: "bar"
}
```

### My plugins

```js !plugin of=uml
export const viewer = ({node, React}) => {
   const c = React.createElement
   const ref = React.createRef();
   const [height, setHeight] = React.useState(null)
   let [id] = React.useState(Math.round(Math.random() * 10000000).toString())

  React.useEffect(() => {
    const handler = event => {
      if (ref && ref.current && event && event.data && typeof event.data === 'string') {
          const data = JSON.parse(event.data)
          if (id === data.source) {
             console.log("Message: ", data)
             setHeight(data.height)
          }

      }
    }

    window.addEventListener("message", handler)

    // clean up
    return () => window.removeEventListener("message", handler)
  }, []) // empty array => run only once

   const el = c('iframe', {ref: ref, style: {height: ( height ? (height + 'px') : 'auto') },srcDoc: `<!DOCTYPE html>
    <html>
      <head>
        <title>PlantUML Viewer</title>
        <style>html, body {margin: 0; padding: 0; } #plantuml { display: block; max-width: 100%; }</style>
      </head>
      <body>
        <img id="plantuml" />
        <script type="module">

        function resize() {
          const msg = JSON.stringify({
            source: "${id}",
            height: document.body.clientHeight
          })
          console.log("Resize Message", msg)
          window.parent.postMessage(msg, '*');
        }
        async function encodePlantUML(src) {
          console.log("encoding", src)
          const module = await import("https://cdn.skypack.dev/plantuml-encoder");
          const encoded = module.encode(src)
          console.log(encoded)
          return encoded
        }

        encodePlantUML("${node.value.replace(/\n/g, '\\n')}")
        .then(encoded => {
            const url = "https://plantuml.com/plantuml/svg/" + encoded
            const img = document.getElementById('plantuml')
            img.setAttribute('src', url)
            img.onload = resize
        })

        console.log("PlantUML Viewer.")
      </script>
      </body>
    </html>`})
   console.log("PlantViewer iframe ref:", el.ref.current)
   return el
}
```