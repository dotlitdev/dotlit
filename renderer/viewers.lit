# Custom Viewers

## Table of Contents

## To Do

- [ ] Error handling
- [ ] Sharing across documents 

## Examples

### Example: Basic `foo` viewer

```js !viewer of=foo
export const viewer = ({value}, {React}) => {
  return `${value} Foooooo! React: ${!!React}`
}
```


Not used in the default case:

```foo
Bar
```

Only when using the `!inline` directive:

```foo !inline
Baz
```

or `viewer=xxx` attribute is present:

```foo viewer=foo
Quz
```

or it is an output cell:

```>foo
Qux
```

### Example: `meta` viewer

```js !viewer of=meta
export const viewer = (node,{React}) => {
  const view = React.createElement('pre', null, JSON.stringify(node,null,2))
  return view
}
```

```txt file.txt !inline #example custom=xxxx viewer=meta > out
show meta content instead
```

### Example: `graph` viewer

ToDo: convert to a generalised viewer.

```js !viewer of=graph
export const viewer = (node, {React}) => {
   const c = React.createElement
   const el = c('iframe', srcDoc={'TODO!'})
   return el
}
```

```graph !inline ../manifest.json
```

```>html viewer=iframe
<head>
  <style> body { margin: 0; } </style>
  <script src="https://unpkg.com/force-graph"></script>
  <!-- from: https://github.com/vasturiano/force-graph -->
</head>
<body>
  <div id="graph"></div>
  <script>
    fetch('/manifest.json').then(res => res.json()).then(data => {
      const thisfile = window.parent.lit.location.src
      // alert(thisfile)
      const elem = document.getElementById('graph')
      const Graph = ForceGraph()(elem)
        .graphData(data)
        .nodeId('id')
        .nodeVal((n) => n.backlinks.length)
        .nodeLabel('id')
        .nodeAutoColorBy('type')
        
        // .linkColor(d => data.nodes[d.source].exists ? 'red' : 'lightblue')
        .linkDirectionalArrowLength(6)
        .onNodeHover(node => elem.style.cursor = node ? 'pointer' : null)
        .onNodeClick(node => {
          // Center/zoom on node
          Graph.centerAt(node.x, node.y, 1000);
          Graph.zoom(2, 2000);
        });

        setTimeout( () => {
        const { nodes, links } = Graph.graphData()
        const node = nodes.filter( n => n.id === thisfile)[0]
        Graph.centerAt(node.x, node.y, 1000);
        Graph.zoom(2, 1000);
        // Graph.zoomToFit(1000, 2, (node) => node.id === thisfile)
        }, 2000)

    });
  </script>
</body>
```

## Errors

### Runtime

```js !viewer of=testerror
export const viewer = (node) => {
  throw new Error("Test Error: Broken Viewer")
}
```
The above viewer breaks the document render, destroying the page, but therefore use of it is not persisted. Consider adding `ErrorBoundry`.

### Import

```js !viewer of=testerror2
throw new Error("Test Error: Broken Viewer")
export const viewer = (node) => {
  return "never"
}
```

## Initial prototype

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Test page</title>
  </head>
  <body>
  <script type="module">

    async function getViewer(src) {
      const module = await import(`data:text/javascript;base64,${ btoa(src)}`);
      return module.viewer;
    }

    getViewer(`export const viewer = () => "foo!"`).then(viewer => {
       alert("Got viewer " + !!viewer)
    })

  </script>
  </body>
</html>
```
