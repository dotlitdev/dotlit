# Executing `code` cells

 ## Bugs 🐜 and To do ✅

- [x] executed cell gets replaced with its output
- [x] more robust outputs
  - [x] replace "connected" output on exec
- [ ] Extract transpilation as [[Transfomers]]

### Test runs

```js
return document.referrer

```
```>txt attached=true updated=1619020246162
https://dotlit.org/
```





```js test.ts babel=true
type Options = {[key: number]: string}
const fn = (opts : Options) => {
  const str:string = 12 
  // need linting to make this useful
  return str
}

return fn()

```
```>txt attached=true updated=1619018769927
12
```







```js test.js babel=true
const wait = (ms) => {
  return new Promise(resolve => {
    setTimeout( () => resolve("done"), ms)
  })
}
return wait(1000)


```
```>txt attached=true updated=1619010220532
done
```









```js test.jsx babel=true
import React from 'react'

export const Component = props => {
  return <div></div>
}

return <Component/>

```
```>txt attached=true updated=1619010174197 !error
undefined
```










```js > md
console.log("A *result*: **" +  42/13 + "**")
return 42
```
```>md attached=true updated=1619010152435
A *result*: **3.230769230769231**
42
```







```js babel=true > json
return { foo: 'bar'}
```
```>json attached=true updated=1619020417262
{ foo: 'bar' }
```








## Other

























```js > text ast_info.txt !collapse
return this

```
```>text ast_info.txt !collapse attached=true updated=1619026276734
{ type: 'root',
  children: 
   [ { type: 'section',
       data: [Object],
       depth: 1,
       children: [Object],
       position: [Object] },
     { type: 'section',
       data: [Object],
       depth: 2,
       children: [Object],
       position: [Object] } ],
  position: 
   { start: { line: 1, column: 1, offset: 0 },
     end: { line: 228, column: 1, offset: 2721 } } }
```






```js > text !collapse
return lit.location

```
```>text !collapse attached=true updated=1619026278923
{ src: 'execute_code_cells.lit',
  root: '/',
  base: 'https://dotlit.org/',
  query: { file: 'execute_code_cells.lit' } }
```


```js > text lit_utils.txt !collapse
return lit.utils

```
```>text lit_utils.txt !collapse attached=true updated=1619026648936
{ select: 
   { matches: [Function: matches],
     selectAll: [Function: selectAll],
     select: [Function: select] },
  path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: null,
     posix: [Circular] },
  vfile: [Function: VFile],
  delete: [Function: _delete],
  read: [Function: read] }
```


```js > text filter.txt !collapse
return lit.utils
          .select
          .selectAll('heading', ast)
          .map( h => h.data.id )

```
```>text filter.txt !collapse attached=true updated=1619026898173
[ 'executing-code-cells',
  'bugs--and-to-do-',
  'test-runs',
  'other' ]
```


```css !inline
cell.collapsed.dir-collapse li span.dir-collapse {
  display: none;
}
```












