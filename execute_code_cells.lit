# Executing `code` cells

 ## Bugs 🐜 and To do ✅

- [x] executed cell gets replaced with its output
- [x] more robust outputs
  - [ ] replace "connected" output on exec
- [ ] Extract transpilation as [[Transfomers]]

### Test runs

return document.referrer

```>txt updated=1619009370104 !error
undefined
```
```>txt updated=1619009183614 !error
undefined
```
```>txt updated=1619006481697
https://dotlit.org/
```

```js test.ts babel=true
type Options = {[key: number]: string}
const fn = (opts : Options) => {
  const str:string = 12 
  // need linting to make this useful
  return str
}

return fn()
```
```>txt updated=1618956272889
12
```
```>txt updated=1618956262014 !error
function toString() {
    [native code]
}
test.ts:7:10
test.ts:8:63
module code@test.ts:8:139
evaluate@[native code]
moduleEvaluation@[native code]
```


```>txt updated=1618954313560 !error
SyntaxError: /test.td: Unexpected token, expected "," (1:16)

> 1 | const fn = (opts:{[key: number]: string}) => {
    |                 ^
  2 |   const str:string = 12
  3 |   return str
  4 | }
```
```>txt updated=1618954214809 !error
SyntaxError: /untitled.js: Unexpected token, expected "," (1:16)

> 1 | const fn = (opts:{[key: number]: string}) => {
    |                 ^
  2 |   const str:string = 12
  3 |   return str
  4 | }
```

```js test.js babel=true
const wait = (ms) => {
  return new Promise(resolve => {
    setTimeout( () => resolve("done"), ms)
  })
}
return wait(1000)


```
```>txt attached=true updated=1619010220532
done
```
```>txt updated=1618954777167
done
```
```>txt updated=1618954743463
done
```
```>txt updated=1618953953817
done
```
```>txt updated=1618953368012
undefined
```
```>txt updated=1618953254731
undefined
```
```>txt updated=1618953250856
[Function: fn]
```
```>txt updated=1618953237234
[Function: fn]
```
```>txt updated=1618953175980 !error
undefined
```

```js test.jsx babel=true
import React from 'react'

export const Component = props => {
  return <div></div>
}

return <Component/>

```
```>txt attached=true updated=1619010174197 !error
undefined
```
```>txt updated=1618956947532 !error
undefined
```
```>txt updated=1618954506126 !error
undefined
```
```>txt updated=1618954469123 !error
undefined
```
```>txt updated=1618952727758 !error
undefined
```
```>txt updated=1618952487030 !error
undefined
```
```>txt updated=1618952454121 !error
undefined
```
```>txt updated=1618936508923 !error
SyntaxError: /untitled.js: Unexpected reserved word 'await' (2:7)

  1 | const url = "manifest.json"
> 2 | return await fetch(url)
    |        ^
```
```>txt updated=1618935177697 !error
SyntaxError: /untitled.js: Unexpected reserved word 'await' (2:7)

  1 | const url = "manifest.json"
> 2 | return await fetch(url)
    |        ^
```
```>txt updated=1618924242458
{}
```

```js > md
console.log("A *result*: **" +  42/13 + "**")
return 42



```
```>md attached=true updated=1619010152435
A *result*: **3.230769230769231**
42
```







```js babel=true > json
return { foo: 'bar'}
```
```>json updated=1618952348582
{ foo: 'bar' }
```
```>json updated=1618936929902 !error
undefined
```
```>json updated=1618936871528 !error
undefined
```
```>json updated=1618936554909 !error
undefined
```
```>json updated=1618936524441
{ foo: 'bar' }
```
```>json updated=1618936089300 !error
undefined
```
```>json updated=1618921343692
{ foo: 'bar' }
```

## Other

























```js > text ast_info.txt !collapse
return this
```
```>json ast_info.txt !collapse updated=1618924417319
{ type: 'root',
  children: 
   [ { type: 'section',
       data: [Object],
       depth: 1,
       children: [Object],
       position: [Object] },
     { type: 'section',
       data: [Object],
       depth: 2,
       children: [Object],
       position: [Object] } ],
  position: 
   { start: { line: 1, column: 1, offset: 0 },
     end: { line: 128, column: 1, offset: 2067 } } }
```





```js > text !collapse
return lit.location
```
```>text lit_location.txt !collapse updated=1618921609909
{ src: 'execute_code_cells.lit',
  root: '/',
  base: 'https://dotlit.org/',
  query: { file: 'execute_code_cells.lit' } }
```

```js > text lit_utils.txt !collapse
return lit.utils
```
```>text lit_utils.txt !collapse updated=1618926096953
{ select: 
   { matches: [Function: matches],
     selectAll: [Function: selectAll],
     select: [Function: select] },
  path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: null,
     posix: [Circular] },
  vfile: [Function: VFile],
  delete: [Function: _delete],
  read: [Function: read] }
```

```js > text filter.txt !collapse
return lit.utils
          .select
          .selectAll('heading', ast)
          .map( h => h.data.id )
```
```>text filter.txt !collapse updated=1618926413415
[ 'execute_code_cells', 'bugs--and-to-do-', 'test-runs', 'other' ]
```
```>text filter.txt !collapse updated=1618926327261
[ { type: 'heading',
    depth: 1,
    children: [ [Object] ],
    position: { start: [Object], end: [Object] },
    data: { hProperties: [Object], id: 'execute_code_cells' },
    processed: true },
  { type: 'heading',
    depth: 2,
    children: [ [Object] ],
    position: { start: [Object], end: [Object] },
    data: { hProperties: [Object], id: 'bugs--and-to-do-' },
    processed: true },
  { type: 'heading',
    depth: 3,
    children: [ [Object] ],
    position: { start: [Object], end: [Object] },
    data: { hProperties: [Object], id: 'test-runs' },
    processed: true },
  { type: 'heading',
    depth: 2,
    children: [ [Object] ],
    position: { start: [Object], end: [Object] },
    data: { hProperties: [Object], id: 'other' },
    processed: true } ]
```
```>text filter.txt !collapse updated=1618926264512
function selectAll(selector, node) {
  return any(parse(selector), node, {any: any})
}
```
```>text filter.txt !collapse updated=1618926244843
[Function: selectAll]
```
```>text filter.txt !collapse updated=1618926221457
undefined
```







