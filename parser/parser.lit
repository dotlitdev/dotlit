# Parser

Built atop the [[unified]] ecosystem, specifically [[remark]], which takes `.lit` [[Markdown]] source and outputs `mdast` (Markdown Abstract Syntax Tree)

## Table of Contents
#### Implementation

```js !collapse < ./index.js
console.log(lit.ast)
console.log(lit.select.selectAll('code', lit.ast)
```

## Implementation 

```js !collapse remote=true < index.js
```

## Extensions
### Frontmatter
*Implementation*

```js !collapse < frontmatter.js
```

### Sections

Sections are automatically created from the nested structure of Headings.

```md
# Headline (root section)
## Subtitle (child section)
```

They can be collapse/folded (tbd)

```md
# >Headline (collapsed)
```
*Implementation*
```js !collapse < sections.js
```

### Cells

*Currently implemented as part of **Sections**, see above.*

### Codeblocks

*Implementation*

```js !collapse < codeblocks.js
```
### Markdown blocks

*Implementation*

```js !collapse < mdblocks.js
```
 
### Links

*Implementation*

```js !collapse < links.js
```

## AST to String

```js
return lit.parser.stringify(lit.file)
```
```>txt attached=true updated=1621238195563
{ data: 
   { plugins: { sectionmenu: [Object], viewer: [Object], repl: [Object] },
     times: { local: '4m ago', remote: '4m ago', ageMessage: '4s newer' },
     frontmatter: { title: 'Parser' },
     __mdcodeblocks: 2,
     ast: { type: 'root', children: [Object], position: [Object] },
     files: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ] },
  messages: [],
  history: [ '/parser/parser.lit' ],
  cwd: '/',
  contents: '# Parser\n\nBuilt atop the [unified](unified.html?file=unified.lit "unified") ecosystem, specifically [remark](remark.html?file=remark.lit "remark"), which takes `.lit` [Markdown](markdown.html?file=markdown.lit "Markdown") source and outputs `mdast` (Markdown Abstract Syntax Tree)\n\n## Table of Contents\n\n-   [Implementation](#implementation-1)\n\n-   [Extensions](#extensions)\n\n    -   [Frontmatter](#frontmatter)\n    -   [Sections](#sections)\n    -   [Cells](#cells)\n    -   [Codeblocks](#codeblocks)\n    -   [Markdown blocks](#markdown-blocks)\n    -   [Links](#links)\n\n-   [AST to String](#ast-to-string)\n\n## Implementation\n\n```js !collapse < index.js\n```\n\n## Extensions\n\n### Frontmatter\n\n*Implementation*\n\n```js !collapse < frontmatter.js\n```\n\n### Sections\n\nSections are automatically created from the nested structure of Headings.\n\n```md\n# Headline (root section)\n## Subtitle (child section)\n```\n\nThey can be collapse/folded (tbd)\n\n```md\n# >Headline (collapsed)\n```\n\n*Implementation*\n\n```js !collapse < sections.js\n```\n\n### Cells\n\n*Currently implemented as part of **Sections**, see above.*\n\n### Codeblocks\n\n*Implementation*\n\n```js !collapse < codeblocks.js\n```\n\n### Markdown blocks\n\n*Implementation*\n\n```js !collapse < mdblocks.js\n```\n\n### Links\n\n*Implementation*\n\n```js !collapse < links.js\n```\n\n## AST to String\n\n```js\nreturn lit.parser.stringify(lit.file)\n```\n\n```>txt attached=true updated=1621238177601 !error\nfunction toString() {\n    [native code]\n}\nuntitled.js:2:59\nuntitled.js:4:63\nmodule code@untitled.js:4:139\nevaluate@[native code]\nmoduleEvaluation@[native code]\n```\n',
  result: 
   { '$$typeof': {},
     type: {},
     key: null,
     ref: null,
     props: { children: [Object] },
     _owner: null,
     _store: {} } }
```






