# Parser

Built atop the [[unified]] ecosystem, specifically [[remark]], which takes `.lit` [[Markdown]] source and outputs `mdast` (Markdown Abstract Syntax Tree)

## Table of Contents
#### Implementation

```js !collapse < ./index.js
console.log(lit.ast)
console.log(lit.select.selectAll('code', lit.ast)
```

## Implementation 

```js !collapse remote=true < index.js
```

## Extensions
### Frontmatter
*Implementation*

```js !collapse < frontmatter.js
```

### Sections

Sections are automatically created from the nested structure of Headings.

```md
# Headline (root section)
## Subtitle (child section)
```

They can be collapse/folded (tbd)

```md
# >Headline (collapsed)
```
*Implementation*
```js !collapse < sections.js
```

### Cells

*Currently implemented as part of **Sections**, see above.*

### Codeblocks

*Implementation*

```js !collapse < codeblocks.js
```
```js #meta #tostring
undefined```
```>txt attached=true updated=1625350723764
js index.jsx !foo #bar baz=qux\ zig < source.jsx > json output.json #faz !raz
{ attrs: { baz: 'qux\\ zig' },
  lang: 'js',
  filename: 'index.jsx',
  directives: [ 'foo' ],
  tags: [ 'bar' ],
  baz: 'qux\\ zig',
  isOutput: false,
  output: 
   { attrs: {},
     lang: 'json',
     filename: 'output.json',
     tags: [ 'faz' ],
     directives: [ 'raz' ],
     isOutput: false,
     output: undefined,
     hasOutput: false,
     hasSource: false,
     source: undefined,
     raw: 'json output.json #faz !raz' },
  hasOutput: true,
  hasSource: true,
  source: 
   { attrs: {},
     lang: 'txt',
     filename: 'source.jsx',
     isOutput: false,
     output: undefined,
     hasOutput: false,
     hasSource: false,
     source: undefined,
     raw: 'txt source.jsx' },
  raw: 'js index.jsx !foo #bar baz=qux\\ zig < source.jsx > json output.json #faz !raz',
  fromSource: 'source.jsx' }
{ mdblocks: [Function: mdblocks],
  sections: [Function: sections],
  ungroupSections: [Function: ungroupSections],
  links: 
   { resolveLinks: [Function: resolveLinks],
     wikiLinkOptions: [Function: wikiLinkOptions],
     resolver: [Function: resolver],
     linkToUrl: [Function: linkToUrl],
     decorateLinkNode: [Function: decorateLinkNode] },
  codeblocks: [Function: __WEBPACK_DEFAULT_EXPORT__],
  parseMeta: [Function: parseMeta],
  remarkStringify: [Function: stringify],
  to_string: [Function: to_string],
  toMarkdown: [Function: toMarkdown],
  frontmatter: [Function: __WEBPACK_DEFAULT_EXPORT__] }
```


### Markdown blocks

*Implementation*

```js !collapse < mdblocks.js
```
 
### Links

*Implementation*

```js !collapse < links.js
```

## AST to String

- [ ] #TODO refactor save (update src) to operate on AST directly and stringify as below, instead of the cureent [[../utils/unist-patch-source]] implementaction.

  This is complicated by the fact that new cell source can in effect result in previous and next cell semantic/structure changes, hence the patch source implementation
```js
const {toMarkdown, ungroupSections}
      = lit.parser.utils
const unGroup = ungroupSections()()
const tree = unGroup(lit.ast)
const md = toMarkdown(tree)
return md
```









