{
    "type": "root",
    "children": [
        {
            "type": "section",
            "data": {
                "name": "repl",
                "hName": "section",
                "hProperties": {
                    "depth": 1
                }
            },
            "depth": 1,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 5,
                            "column": 93,
                            "offset": 208
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 1,
                                    "column": 1,
                                    "offset": 0
                                },
                                "end": {
                                    "line": 8,
                                    "column": 4,
                                    "offset": 257
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 1,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "REPL",
                                    "position": {
                                        "start": {
                                            "line": 1,
                                            "column": 3,
                                            "offset": 2
                                        },
                                        "end": {
                                            "line": 1,
                                            "column": 7,
                                            "offset": 6
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 1,
                                    "column": 1,
                                    "offset": 0
                                },
                                "end": {
                                    "line": 5,
                                    "column": 93,
                                    "offset": 208
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "repl"
                                },
                                "id": "repl"
                            },
                            "processed": true
                        },
                        {
                            "type": "paragraph",
                            "children": [
                                {
                                    "type": "text",
                                    "value": "The initial implementation is copied over from the [prototype], see ",
                                    "position": {
                                        "start": {
                                            "line": 3,
                                            "column": 1,
                                            "offset": 8
                                        },
                                        "end": {
                                            "line": 3,
                                            "column": 69,
                                            "offset": 76
                                        }
                                    }
                                },
                                {
                                    "type": "link",
                                    "data": {
                                        "isAbsolute": false,
                                        "isFragment": false,
                                        "isRelative": true,
                                        "canonical": "execute_code_cells.lit",
                                        "wikilink": true,
                                        "hProperties": {
                                            "wikilink": true,
                                            "data": {
                                                "base": "execute_code_cells.html",
                                                "isAbsolute": false,
                                                "isFragment": false,
                                                "isRelative": true,
                                                "canonical": "execute_code_cells.lit",
                                                "wikilink": true
                                            }
                                        }
                                    },
                                    "position": {
                                        "start": {
                                            "line": 3,
                                            "column": 69,
                                            "offset": 76
                                        },
                                        "end": {
                                            "line": 3,
                                            "column": 95,
                                            "offset": 102
                                        }
                                    },
                                    "url": "execute_code_cells.html?file=execute_code_cells.lit",
                                    "title": "Execute `code` *cells*",
                                    "children": [
                                        {
                                            "position": {
                                                "start": {
                                                    "line": 3,
                                                    "column": 69,
                                                    "offset": 76
                                                },
                                                "end": {
                                                    "line": 3,
                                                    "column": 95,
                                                    "offset": 102
                                                }
                                            },
                                            "type": "text",
                                            "value": "Execute `code` *cells*"
                                        }
                                    ]
                                },
                                {
                                    "type": "text",
                                    "value": " for usage.",
                                    "position": {
                                        "start": {
                                            "line": 3,
                                            "column": 95,
                                            "offset": 102
                                        },
                                        "end": {
                                            "line": 3,
                                            "column": 106,
                                            "offset": 113
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 3,
                                    "column": 1,
                                    "offset": 8
                                },
                                "end": {
                                    "line": 3,
                                    "column": 107,
                                    "offset": 114
                                }
                            }
                        },
                        {
                            "type": "paragraph",
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Additionally through use of the ",
                                    "position": {
                                        "start": {
                                            "line": 5,
                                            "column": 1,
                                            "offset": 116
                                        },
                                        "end": {
                                            "line": 5,
                                            "column": 33,
                                            "offset": 148
                                        }
                                    }
                                },
                                {
                                    "type": "link",
                                    "data": {
                                        "isAbsolute": false,
                                        "isFragment": false,
                                        "isRelative": true,
                                        "canonical": "plugin_system.lit",
                                        "wikilink": true,
                                        "hProperties": {
                                            "wikilink": true,
                                            "data": {
                                                "base": "plugin_system.html",
                                                "isAbsolute": false,
                                                "isFragment": false,
                                                "isRelative": true,
                                                "canonical": "plugin_system.lit",
                                                "wikilink": true
                                            }
                                        }
                                    },
                                    "position": {
                                        "start": {
                                            "line": 5,
                                            "column": 33,
                                            "offset": 148
                                        },
                                        "end": {
                                            "line": 5,
                                            "column": 50,
                                            "offset": 165
                                        }
                                    },
                                    "url": "plugin_system.html?file=plugin_system.lit",
                                    "title": "Plugin system",
                                    "children": [
                                        {
                                            "position": {
                                                "start": {
                                                    "line": 5,
                                                    "column": 33,
                                                    "offset": 148
                                                },
                                                "end": {
                                                    "line": 5,
                                                    "column": 50,
                                                    "offset": 165
                                                }
                                            },
                                            "type": "text",
                                            "value": "Plugin system"
                                        }
                                    ]
                                },
                                {
                                    "type": "text",
                                    "value": " it is possible to create custom ",
                                    "position": {
                                        "start": {
                                            "line": 5,
                                            "column": 50,
                                            "offset": 165
                                        },
                                        "end": {
                                            "line": 5,
                                            "column": 83,
                                            "offset": 198
                                        }
                                    }
                                },
                                {
                                    "type": "link",
                                    "data": {
                                        "isAbsolute": false,
                                        "isFragment": false,
                                        "isRelative": true,
                                        "canonical": "repls.lit",
                                        "wikilink": true,
                                        "hProperties": {
                                            "wikilink": true,
                                            "data": {
                                                "base": "repls.html",
                                                "isAbsolute": false,
                                                "isFragment": false,
                                                "isRelative": true,
                                                "canonical": "repls.lit",
                                                "wikilink": true
                                            }
                                        }
                                    },
                                    "position": {
                                        "start": {
                                            "line": 5,
                                            "column": 83,
                                            "offset": 198
                                        },
                                        "end": {
                                            "line": 5,
                                            "column": 92,
                                            "offset": 207
                                        }
                                    },
                                    "url": "repls.html?file=repls.lit",
                                    "title": "REPLs",
                                    "children": [
                                        {
                                            "position": {
                                                "start": {
                                                    "line": 5,
                                                    "column": 83,
                                                    "offset": 198
                                                },
                                                "end": {
                                                    "line": 5,
                                                    "column": 92,
                                                    "offset": 207
                                                }
                                            },
                                            "type": "text",
                                            "value": "REPLs"
                                        }
                                    ]
                                },
                                {
                                    "type": "text",
                                    "value": ".",
                                    "position": {
                                        "start": {
                                            "line": 5,
                                            "column": 92,
                                            "offset": 207
                                        },
                                        "end": {
                                            "line": 5,
                                            "column": 93,
                                            "offset": 208
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 5,
                                    "column": 1,
                                    "offset": 116
                                },
                                "end": {
                                    "line": 5,
                                    "column": 93,
                                    "offset": 208
                                }
                            }
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 7,
                            "column": 1,
                            "offset": 210
                        },
                        "end": {
                            "line": 8,
                            "column": 4,
                            "offset": 257
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "js",
                            "meta": "!collapse #implementation < index.js ",
                            "value": "import util from 'util'\nimport {transformSync} from '@babel/core'\n\nimport presetReact from \"@babel/preset-react\"\nimport presetTypescript from \"@babel/preset-typescript\"\n\nconst NoOp = () => {}\n\nfunction wrapConsole(console, stdoutUpdate) {\n    const originalConsole = console\n    let buffer = []\n    const wrapConsoleMethod = (method) => {\n        return (...args) => {\n            const pretty = args.map( a => typeof a === 'string' ? a : util.inspect(a,{depth: 2} ) )\n            // pretty.unshift(`[${method}] `)\n            buffer.push(pretty);\n            stdoutUpdate(buffer.join('\\n'))\n            originalConsole.log('vvv Wrapped console vvv', method, pretty)\n            return originalConsole[method](...args)\n        }\n    }\n\n    const fakeConsole = {};\n\n    ['log', 'debug', 'error', 'warn', 'info'].forEach( m => {\n        fakeConsole[m] = wrapConsoleMethod(m)\n    })\n    return { console: fakeConsole, buffer }\n}\n\n\nfunction isPromise(obj) {\n    return obj && typeof obj.then === 'function'\n}\n\nexport class Repl {\n    constructor(){\n        this.executions = {}\n\n        window.onerror = (msg, url, lineNo, columnNo, err) => {\n            // const [, filename, line, column ] = err.stack.match(/\\/([\\/\\w-_\\.]+\\.js):(\\d*):(\\d*)/)\n            \n            if (this.executions[url] ) {\n                console.error('Uncaught Global error', {err, stack: msg + `\\n    ${this.executions[url].filename}[${lineNo}:${columnNo}]` })\n                this.executions[url].err = err\n                console.log('stopping propagation of repl execution', this.executions[url])\n                this.executions[url].cb(err)\n                return true\n            } else {\n                console.error('Uncaught Global error', {err, stack: msg + `\\n    ${url}[${lineNo}:${columnNo}]` })\n            }\n        }\n\n        window.addEventListener(\"unhandledrejection\", event => {\n            console.warn(`UNHANDLED PROMISE REJECTION: ${event.reason}`);\n        });\n    }\n\n    formatStack(err, src) {\n        if (!err.stack) return err.toString()\n\n        const filename = this.executions[src].filename\n        const source = this.executions[src].source\n        const sourceLen = source.length\n    \n        const srcRegex = new RegExp(src, 'g')\n        let stack = err.stack\n            .replace(srcRegex, filename)\n            .split('\\n')\n        \n        if (stack[0] !== err.toString()) {\n            // Add missing error message to stack (safari)\n            stack.unshift(err.toString)\n        }\n        \n        return stack.map( line => {\n            const lineNoRegex = new RegExp(`(.*${filename}:)(\\d+)(.*)`)\n            const match = line && line.match && line.match(lineNoRegex)\n            if (match) {\n                const num = parseInt(match[2])\n                // skip first and last lines (wrapper code)\n                if (num === 1 || num >= sourceLen) return '' \n                else return `${match[1], num - 1, match[3]}`\n            } else {\n                console.log(\"formatStack line match fallback\", typeof line, line)\n                return `${line}`\n            }\n        }).filter(x => x).join('\\n')\n    }\n\n    injectScript(source, {config, filename, ast, stdoutUpdate}) {\n        const self = this\n        return new Promise((resolve, reject) => {\n    \n            const script = document.createElement('script');\n            const execId = `litExec_${Date.now()}`\n\n            const esm = ({raw}, ...vals) => URL.createObjectURL(new Blob([String.raw({raw}, ...vals)], {type: 'text/javascript'}));\n            const wrappedConsole = wrapConsole(window.console, stdoutUpdate)\n\n            try {\n                if(config && config.babel) {\n                const babel = transformSync(source, { \n                    filename: filename,\n                    sourceMaps: false,\n                    parserOpts: { allowReturnOutsideFunction: true },\n                    presets: [\n                        presetReact,\n                        presetTypescript\n                    ],\n                    plugins: [\n                        // pluginClassProps\n                    ]\n                })\n                console.log(\"[babel] transformed\", babel)\n                source = babel.code\n                }\n            } catch (err) {\n                console.error(\"[babel] Transpile failed\", err)\n                reject({\n                    err: err, \n                    resp:  null, \n                    stdout: err.toString()\n                })\n            }\n\n            const wrappedSrc = `(function(ast,console){/*${execId}*/let error; const cb = window['${execId}'].cb; const resp = (function(){ try {\n                ${source}\n                } catch(err) { error = true; cb(err) } }).call(window['${execId}'].context.ast); if (!error) cb(null, resp);})(window['${execId}'].context.ast, window['${execId}'].context.console)`\n            const src = esm`${wrappedSrc}`\n\n            this.executions[src] = window[execId] = {\n                execId, \n                source, \n                filename, \n                stdout: wrappedConsole.buffer, \n                err: undefined, \n                resp: undefined, \n                cb: (err, resp) => {\n                    console.log(\"pJaxCallback: \", err, resp)\n\n                    let error = err || (this.executions[src] && this.executions[src].err)\n                    if (error) {\n                        const formattedError = this.formatStack(err, src)\n                        this.executions[src].stdout.push(formattedError)\n                        console.error('REPL ERR: ', this.executions[src])\n                        reject({\n                            err: error, \n                            resp:  resp, \n                            stdout: this.executions[src].stdout.join('\\n')\n                        })\n                    } else {\n\n                        if (isPromise(resp)) {\n                            resp.then( (result) => {\n                                this.executions[src].result = result\n                                const pretty = (typeof result === 'string' ? result : util.inspect(result, {depth: 2}))\n                                this.executions[src].stdout.push(pretty)\n                                console.log('REPL DONE: ', filename, this.executions[src])\n                                resolve({\n                                    err: error, \n                                    resp:  result, \n                                    stdout: this.executions[src].stdout.join('\\n')\n                                })\n                            })\n                        } else {\n                            this.executions[src].resp = resp\n                            const pretty = (typeof resp === 'string' ? resp : util.inspect(resp, {depth: 2}))\n                            this.executions[src].stdout.push(pretty)\n                            console.log('REPL DONE: ', filename, this.executions[src])\n                            resolve({\n                                err: error, \n                                resp:  resp, \n                                stdout: this.executions[src].stdout.join('\\n')\n                            })\n                        }\n                    }\n                },\n                context: { console: wrappedConsole.console, ast }\n            }            \n    \n            script.type = 'module'\n            script.async = true;\n            script.crossorigin = \"use-credentials\"\n            script.src = src\n            \n            // script.addEventListener('load', resolve);\n            script.addEventListener('error', (ev) => { console.error('script.onerror: ' + ev.message + \" (\" + ev.filename + \":\" + ev.lineno + \")\", ev); reject('Error loading script.') } );\n            script.addEventListener('abort', (ev) => { console.log('script.onabort: ' + ev.message + \" (\" + ev.filename + \":\" + ev.lineno + \")\", ev); reject('Script loading aborted.') } );\n            document.head.appendChild(script);\n           \n            \n        });\n    }\n\n\n\n    exec(source, config, ast, stdoutUpdate = NoOp) {\n        console.log('REPL: ', config.repl)\n\n        const filename = config.filename || ('untitled.' + config.lang)\n        return this.injectScript(source, {config, filename, ast, stdoutUpdate})\n    }\n}\n",
                            "position": {
                                "start": {
                                    "line": 7,
                                    "column": 1,
                                    "offset": 210
                                },
                                "end": {
                                    "line": 8,
                                    "column": 4,
                                    "offset": 257
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "js",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "tags": [
                                        "implementation"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "index.js",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt index.js"
                                    },
                                    "raw": "js !collapse #implementation < index.js",
                                    "fromSource": "index.js"
                                },
                                "hProperties": {
                                    "className": "tag-implementation",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "js",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "tags": [
                                            "implementation"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "index.js",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt index.js"
                                        },
                                        "raw": "js !collapse #implementation < index.js",
                                        "fromSource": "index.js"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                },
                "end": {
                    "line": 8,
                    "column": 4,
                    "offset": 257
                }
            }
        }
    ],
    "position": {
        "start": {
            "line": 1,
            "column": 1,
            "offset": 0
        },
        "end": {
            "line": 8,
            "column": 4,
            "offset": 257
        }
    }
}