# Custom Viewers

## Table of Contents

## Examples

### Example: Basic `foo` viewer

```js !viewer of=foo
export const viewer = ({value}, {React}) => {
  return `${value} Foooooo! React: ${!!React}`
}
```


Not used in the default case:

```foo
Bar
```

Only when using the `!inline` directive:

```foo !inline
Baz
```

or `viewer=xxx` attribute is present:

```foo viewer=foo
Quz
```

or it is an output cell:

```>foo
Qux
```

## Example: `meta` viewer

```js !viewer of=meta
export const viewer = (node,{React}) => {
  const view = React.createElement('pre', null, JSON.stringify(node,null,2))
  return view
}
```

```txt file.txt !inline #example custom=xxxx viewer=meta > out
show meta content instead
```

## Errors

```js !viewer of=testerror
export const viewer = (node) => {
  throw new Error("Test Error: Broken Viewer")
}
```
The above viewer breaks the document render, destroying the page, but therefore use of it is not persisted. Consider adding `ErrorBoundry`.

```js !viewer of=testerror2
throw new Error("Test Error: Broken Viewer")
export const viewer = (node) => {
  return "never"
}
```

## Initial prototype

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Test page</title>
  </head>
  <body>
  <script type="module">

    async function getViewer(src) {
      const module = await import(`data:text/javascript;base64,${ btoa(src)}`);
      return module.viewer;
    }

    getViewer(`export const viewer = () => "foo!"`).then(viewer => {
       alert("Got viewer " + !!viewer)
    })

  </script>
  </body>
</html>
```
