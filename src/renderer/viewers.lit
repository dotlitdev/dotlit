# Custom Viewers

## Table of Contents

## To Do

- [ ] Error handling
- [ ] Sharing across documents 

## Examples

### Example: Basic `foo` viewer

```js !viewer of=foo
export const viewer = ({value}, {React}) => {
  return `${value} Foooooo! React: ${!!React}`
}
```


Not used in the default case:

```foo
Bar
```

Only when using the `!inline` directive:

```foo !inline
Baz
```

or `viewer=xxx` attribute is present:

```foo viewer=foo
Quz
```

or it is an output cell:

```>foo
Qux
```

### Example: `meta` viewer

```js !viewer of=meta
export const viewer = (node,{React}) => {
  const view = React.createElement('pre', null, JSON.stringify(node,null,2))
  return view
}
```

```txt file.txt !inline #example custom=xxxx viewer=meta > out
show meta content instead
```

### Example: `graph` viewer

âœ… This viewer has been folded into `.lit` as one of the default viewers.

```js !viewer of=custom-graph
export const viewer = (node, {React}) => {
   const c = React.createElement
   const data = node.value

   const el = c('iframe', {srcDoc: `<head>
  <style> body { margin: 0; } </style>
  <script src="https://unpkg.com/force-graph"></script>
  <!-- from: https://github.com/vasturiano/force-graph -->
</head>
<body>
  <div id="graph"></div>
  <script>
    const data = ${data};
      const thisfile = window.parent.lit.location.src
      // alert(thisfile)
      const elem = document.getElementById('graph')
      const Graph = ForceGraph()(elem)
        .graphData(data)
        .nodeId('id')
        .nodeVal((n) => 2 * (n.backlinks && n.backlinks.length ? n.backlinks.length : 1))
        .nodeLabel('id')
        .nodeAutoColorBy('type')
        
        // .linkColor(d => data.nodes[d.source].exists ? 'red' : 'lightblue')
        .linkDirectionalArrowLength(6)
        .onNodeHover(node => elem.style.cursor = node ? 'pointer' : null)
        .onNodeClick(node => {
          // Center/zoom on node
          Graph.centerAt(node.x, node.y, 1000);
          Graph.zoom(2, 2000);
        });

        setTimeout( () => {
            const { nodes, links } = Graph.graphData()
            const node = nodes.filter( n => n.id === thisfile)[0]
            Graph.centerAt(node.x, node.y, 1000);
            Graph.zoom(2, 2000);

        }, 2000)

  </script>
</body>`})
   return el
}
```

```custom-graph !inline
{
  "nodes":[
    {"id": "foo"},
    {"id": "bar"}
  ],
  "links": [
    {"source": "foo", "target": "bar"}
  ]
}
```

```custom-graph !inline < ../manifest.json
```

The above automatically transcludes the `.lit` manifest and focuses on the current document

### Example: Vega 

Still a *Work in progress*
Docs: [vega-lite](https://vega.github.io/vega-lite/usage/compile.html)

```>iframe
<!DOCTYPE html>
<html>
  <head>
    <title>Embedding Vega-Lite</title>
    <script src="https://cdn.jsdelivr.net/npm/vega@5.19.1"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega-lite@5.0.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega-embed@6.15.1"></script>
  </head>
  <body>
    <div id="vis"></div>

    <script type="text/javascript">
      var yourVlSpec = {
        $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
        description: 'A simple bar chart with embedded data.',
        data: {
          values: [
            {a: 'A', b: 28},
            {a: 'B', b: 55},
            {a: 'C', b: 43},
            {a: 'D', b: 91},
            {a: 'E', b: 81},
            {a: 'F', b: 53},
            {a: 'G', b: 19},
            {a: 'H', b: 87},
            {a: 'I', b: 52}
          ]
        },
        mark: 'bar',
        encoding: {
          x: {field: 'a', type: 'ordinal'},
          y: {field: 'b', type: 'quantitative'}
        }
      };
      vegaEmbed('#vis', yourVlSpec);
    </script>
  </body>
</html>
```

### Example: D3 Graphviz `dot` viewer

Docs: https://github.com/magjac/d3-graphviz#examples

```js !viewer of=dot
export const viewer = (node, {React}) => {
   const c = React.createElement
   const el = c('iframe', {srcDoc: `<!DOCTYPE html>
<meta charset="utf-8">
<body>
<script src="//d3js.org/d3.v5.min.js"></script>
<script src="https://unpkg.com/@hpcc-js/wasm@0.3.11/dist/index.min.js"></script>
<script src="https://unpkg.com/d3-graphviz@3.0.5/build/d3-graphviz.js"></script>
<div id="graph" style="text-align: center;"></div>
<script>

d3.select("#graph").graphviz()
    .renderDot('${node.value.trim()}');

</script>`})
   return el
}
```

```>dot
digraph  { a -> b }
```

```>dot
digraph Q {

  node [shape=record];


  nd_1   [label = "Node 1"];
  nd_2   [label = "Node 2"];
  nd_3_a [label = "Above Right Node 3"];
  nd_3_l [label = "Left of Node 3"];
  nd_3   [label = "Node 3"];
  nd_3_r [label = "Right of Node 3"];
  nd_4   [label = "Node 4"];


  nd_3_a -> nd_3_r;
  nd_1 -> nd_2 -> nd_3 -> nd_4;

  subgraph cluster_R {

    {rank=same nd_3_l nd_3 nd_3_r}

    nd_3_l -> nd_3 -> nd_3_r [color=grey arrowhead=none];

  }

}
```

## Errors

### Runtime

```js !viewer of=testerror
export const viewer = (node) => {
  throw new Error("Test Error: Broken Viewer")
}
```
The above viewer breaks the document render, destroying the page, but therefore use of it is not persisted. Consider adding `ErrorBoundry`.

### Import

```js !viewer of=testerror2
throw new Error("Test Error: Broken Viewer")
export const viewer = (node) => {
  return "never"
}
```

## Initial prototype

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Test page</title>
  </head>
  <body>
  <script type="module">

    async function getViewer(src) {
      const module = await import(`data:text/javascript;base64,${ btoa(src)}`);
      return module.viewer;
    }

    getViewer(`export const viewer = () => "foo!"`).then(viewer => {
       alert("Got viewer " + !!viewer)
    })

  </script>
  </body>
</html>
```
