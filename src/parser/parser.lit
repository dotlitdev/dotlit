# Parser

Built atop the [[unified]] ecosystem, specifically [[remark]], which takes `.lit` [[Markdown]] source and outputs `mdast` (Markdown Abstract Syntax Tree)

## Table of Contents
#### Implementation

```js !collapse < ./index.js
console.log(lit.ast)
console.log(lit.select.selectAll('code', lit.ast)
```

## Implementation 

```js !collapse remote=true < index.js
```

## Extensions
### Frontmatter
*Implementation*

```js !collapse < frontmatter.js
```

### Sections

Sections are automatically created from the nested structure of Headings.

```md
# Headline (root section)
## Subtitle (child section)
```

They can be collapse/folded (tbd)

```md
# >Headline (collapsed)
```
*Implementation*
```js !collapse < sections.js
```

### Cells

*Currently implemented as part of **Sections**, see above.*

### Codeblocks

*Implementation*

```js !collapse < codeblocks.js
```

```js #meta #tostring !test test=foo
const meta = this.children[0].children[0].properties.meta

const prefix = p => str => p + str
const tag = prefix("#")
const dir = prefix("!")
const attr = ([key,value]) => `${key}=${value}`

const metaToString = (meta) => {
  const parts = [];
  const dirs = meta.directives || []
  const tags = meta.tags || []
  const attrs = meta.attrs || {}

  parts.push(meta.isOutput && ">");
  parts.push(meta.lang);
  parts.push(meta.filename || meta.uri);
  
  dirs.forEach( d => parts.push(dir(d)))
  Object.entries(attrs).forEach( (e) => parts.push(attr(e)))
  tags.forEach( t => parts.push(tag(t)))
  return parts.filter((x) => x).join(" ");
};
console.log(meta)
return metaToString(meta)

```
```>txt attached=true updated=1622672772800
{ attrs: { test: 'foo' },
  lang: 'js',
  tags: [ 'meta', 'tostring' ],
  directives: [ 'test' ],
  test: 'foo',
  isOutput: false,
  output: undefined,
  hasOutput: false,
  hasSource: false,
  source: undefined,
  raw: 'js #meta #tostring !test test=foo' }
js #meta #tostring !test test=foo
```
### Markdown blocks

*Implementation*

```js !collapse < mdblocks.js
```
 
### Links

*Implementation*

```js !collapse < links.js
```

## AST to String

- [ ] #TODO refactor save (update src) to operate on AST directly and stringify as below, instead of the cureent [[../utils/unist-patch-source]] implementaction.
```js
const {toMarkdown, ungroupSections}
      = lit.parser.utils
const unGroup = ungroupSections()()
const tree = unGroup(lit.ast)
const md = toMarkdown(tree)
return md
```









