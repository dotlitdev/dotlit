# Parser

Built atop the [[unified]] ecosystem, specifically [[remark]], which takes `.lit` [[Markdown]] source and outputs `mdast` (Markdown Abstract Syntax Tree)

## Table of Contents
#### Implementation

```js !collapse < ./index.js
console.log(lit.ast)
console.log(lit.select.selectAll('code', lit.ast)
```

## Implementation 

```js !collapse remote=true < index.js
```

## Extensions
### Frontmatter
*Implementation*

```js !collapse < frontmatter.js
```

### Sections

Sections are automatically created from the nested structure of Headings.

```md
# Headline (root section)
## Subtitle (child section)
```

They can be collapse/folded (tbd)

```md
# >Headline (collapsed)
```
*Implementation*
```js !collapse < sections.js
```

### Cells

*Currently implemented as part of **Sections**, see above.*

### Codeblocks

*Implementation*

```js !collapse < codeblocks.js
```

```js #meta #tostring
const metaToString = (meta) => {
  const parts = [];
  parts.push(meta.isOutput && ">");
  parts.push(meta.lang);
  parts.push(meta.filename || meta.uri);
  return parts.filter((x) => x).join(" ");
};
return this.children[0].children[0].properties.meta;

```
```>txt attached=true updated=1622670995764
{ type: 'element',
  tagName: 'cell',
  properties: { class: 'cell' },
  children: 
   [ { type: 'element',
       tagName: 'pre',
       properties: {},
       children: [Object],
       position: [Object] } ],
  position: 
   { start: { line: 54, column: 1, offset: 880 },
     end: { line: 64, column: 4, offset: 1120 } } }
```
### Markdown blocks

*Implementation*

```js !collapse < mdblocks.js
```
 
### Links

*Implementation*

```js !collapse < links.js
```

## AST to String

- [ ] #TODO refactor save (update src) to operate on AST directly and stringify as below, instead of the cureent [[../utils/unist-patch-source]] implementaction.
```js
const {toMarkdown, ungroupSections}
      = lit.parser.utils
const unGroup = ungroupSections()()
const tree = unGroup(lit.ast)
const md = toMarkdown(tree)
return md
```









