# Executing `code` cells

## Table of Contents

 ## Bugs 🐜 and To do ✅

- [x] executed cell gets replaced with its output
- [x] more robust outputs
  - [x] replace "connected" output on exec
- [ ] Extract transpilation as [[Transfomers]]

## Examples





```js #example
console.log(document.referrer)
```
```>txt attached=true updated=1619273509485
https://dotlit.org/
undefined
```
```js #example
return new Object({foo: "bar"})
```
```>txt attached=true updated=1619953821560
{ foo: 'bar' }
```

















### Async and Promises

```js test.js babel=true
const wait = (ms) => {
  return new Promise(resolve => {
    setTimeout( () => {
      resolve(new Date())
    }, ms)
     
  })
}
return wait(1000)
```
```>txt attached=true updated=1619649877870
Wed Apr 28 2021 23:44:37 GMT+0100 (BST)
```

```js
return fetch('https://example.com')
       .then( res => res.status )
```
```>txt attached=true updated=1619906569894
200
```

```js
return (async fn => {
    const size = await lit.fs.du('/')
    console.log("Local filesystem size:")
    return size
})()
```
```>txt attached=true updated=1619956208583
Local filesystem size:
249410
```

### Transpiling

The meta syntax for transformers/transpiling is not yet stable, for now use the experimental `babel` attribute, combined with specifying the source lang in the filename extention. (Currently requires explicitly setting `repl` to `js` to execute)

```ts test.ts babel=true repl=js
type Options = {[key: number]: string}
const fn = (opts : Options) => {
  const str:string = 12 
  // need linting to make this useful
  return str
}

return fn()
```
```>txt attached=true updated=1619093312586
12
```









### React `jsx`

Using the experimental `react` attribute, a *Cell* can define its own content as a component, warning due to needing to use the same React instance as the parent application, the below with dynamic import won't work.

```jsx test.jsx babel=true repl=js
import React from 'https://cdn.skypack.dev/react'

const Component = props => {
  return <div></div>
}

return <Component/>
```
```>txt attached=true updated=1619956480529 !error
undefined
```

Instead, get `React` from the utils in the `lit` global.

```jsx test.jsx babel=true repl=js react=true
const React = lit.utils.React
const { useState } = React
  
const Clicker = props => {
    const [c,setC] = useState(0)
    //console.log(React, useState, c)
    const click = e => setC(c+1)

    return <button onClick={click}>{ "Click me: " + c}</button>
}

return <Clicker/>
```



















### Outputs

See [[renderer/Viewers]] for information on built in viewers and how to create custom ones.

#### Raw `svg` string
```js #current_viewport !collapse > svg
const b = document.body
const ch = b.clientHeight
const cw = b.clientWidth
const sh = b.scrollHeight
const st = b.scrollTop

const a = cw / ch 
const sa = cw / sh
const c = (ch/2)+st
const cp = c / sh

const h = cw
const w = h * sa
const vt = h * (st/sh)
const vw = w
const vh = h * (ch/sh)
const x = (h/2) - w


const svg = `<svg style="max-width: 100%;" width="${h}" height="${h}">
  <rect x="${x}" width="${w}" height="${h}" style="fill:rgb(255,255,255);stroke-width:1;stroke:rgb(0,0,0)" />
  <rect x="${x}" y="${vt}" width="${vw}" height="${vh}" style="fill:rgb(255,255,255);stroke-width:3;stroke:rgb(255,0,0)" />
</svg>`

return svg

return {
   ch,cw,sh,st,c,cp,a 
}
```
```>svg attached=true updated=1619135325236
<svg style="max-width: 100%;" width="390" height="390">
  <rect x="151.05316382548398" width="43.94683617451604" height="390" style="fill:rgb(255,255,255);stroke-width:1;stroke:rgb(0,0,0)" />
  <rect x="151.05316382548398" y="159.67350476740828" width="43.94683617451604" height="74.82230569199653" style="fill:rgb(255,255,255);stroke-width:3;stroke:rgb(255,0,0)" />
</svg>
```

#### Markdown

```js > md
console.log("A __*result*__: **`" +  42/13 + "`**")
return 42
```
```>md attached=true updated=1619049088835
A __*result*__: **`3.230769230769231`**
42
```







```js > json
return { foo: 'bar'}
```
```>json attached=true updated=1619020417262
{ foo: 'bar' }
```








### Meta: `lit` global and AST

When executing a *Cell* `this` refers to the `hast` node for that cell.

























```js > json #this !collapse
return this
```
```>json #this !collapse attached=true updated=1619948067682
{ type: 'element',
  tagName: 'cell',
  properties: { class: 'cell' },
  children: 
   [ { type: 'element',
       tagName: 'pre',
       properties: {},
       children: [Object],
       position: [Object] },
     { type: 'element',
       tagName: 'pre',
       properties: {},
       children: [Object],
       position: [Object] } ],
  position: 
   { start: { line: 270, column: 1, offset: 3945 },
     end: { line: 291, column: 4, offset: 4505 } } }
```
To get the `mdast` for the document, you need to refer to the global `lit` object.

```js > json #ast #position !collapse
return lit.ast.position
```
```>json #ast #position !collapse attached=true updated=1619948101576
{ start: { line: 1, column: 1, offset: 0 },
  end: { line: 588, column: 4, offset: 11517 } }
```






To get info about the location of the current document, see `lit.location`.

```js > json #location !collapse
return lit.location
```
```>json #location !collapse attached=true updated=1619948176649
{ src: 'execute_code_cells.lit',
  root: '/',
  base: 'https://dotlit.org/',
  query: { file: 'execute_code_cells.lit' } }
```


```js > json #utils !collapse
return lit.utils
```
```>json #utils !collapse attached=true updated=1619948206406
{ React: 
   { Fragment: {},
     StrictMode: {},
     Profiler: {},
     Suspense: {},
     Children: 
      { map: [Function: mapChildren],
        forEach: [Function: forEachChildren],
        count: [Function: countChildren],
        toArray: [Function: toArray],
        only: [Function: onlyChild] },
     Component: [Function: Component],
     PureComponent: [Function: PureComponent],
     __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: 
      { ReactCurrentDispatcher: [Object],
        ReactCurrentBatchConfig: [Object],
        ReactCurrentOwner: [Object],
        IsSomeRendererActing: [Object],
        assign: [Function: assign],
        ReactDebugCurrentFrame: [Object] },
     cloneElement: [Function: cloneElementWithValidation],
     createContext: [Function: createContext],
     createElement: [Function: createElementWithValidation],
     createFactory: [Function: createFactoryWithValidation],
     createRef: [Function: createRef],
     forwardRef: [Function: forwardRef],
     isValidElement: [Function: isValidElement],
     lazy: [Function: lazy],
     memo: [Function: memo],
     useCallback: [Function: useCallback],
     useContext: [Function: useContext],
     useDebugValue: [Function: useDebugValue],
     useEffect: [Function: useEffect],
     useImperativeHandle: [Function: useImperativeHandle],
     useLayoutEffect: [Function: useLayoutEffect],
     useMemo: [Function: useMemo],
     useReducer: [Function: useReducer],
     useRef: [Function: useRef],
     useState: [Function: useState],
     version: '17.0.1' },
  unist: 
   { select: 
      { matches: [Function: matches],
        selectAll: [Function: selectAll],
        select: [Function: select] },
     source: [Function: source],
     filter: [Function: filter],
     visit: { [Function: visit] CONTINUE: true, SKIP: 'skip', EXIT: false },
     patchSource: { default: [Getter] } },
  path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: null,
     posix: [Circular] },
  vfile: [Function: VFile],
  delete: [Function: _delete],
  read: [Function: read] }
```


Finding nodes in the ast can be done either manually or using some of the `unist` utils available

```js > json #heading #title
const select = lit.utils.unist.select.select
return select('heading', lit.ast)   
```


#### Mutating Self

Code cell execution which modifies the content of a `.lit` document outwith of its own (attached) output cell, initially itself, but then try an external doc.

```js #mutateme
// Mutated at Sun May 02 2021 12:59:07 GMT+0100 (BST)
```



```js selfmutate=experimental
const src = lit.file.contents
const unist = lit.utils.unist

const select = unist.select.select
const source = unist.source
const patchSource = unist.patchSource.default

const selector = 'code[meta=#mutateme]'
const node = select(selector, lit.ast)
const pos = node.position

const original = source(pos, src)
const newSrc = "```js #mutateme\n// Mutated at " + new Date() + "\n```"

return patchSource(src, pos, newSrc)
```
```>md !warn attached=true updated=1619948888002
⚠️ This uses the *still* experimental `selfmutate` attribute, and affects content outside of it's own attached output cell.
```

### Dynamic imports
```js
return (async args => {

  const confetti = await 
  import('https://cdn.skypack.dev/canvas-confetti')

  confetti.default({
     origin: {y: 0},
     spread: 55,
     particleCount: 100,
     ticks: 1000,
  })
  return "Wait for it... 🥳"
})()
```
```>txt attached=true updated=1620128517208
Wait for it... 🥳
```

#### Trying out git 

See more at [[testing/Isomorphic Git]]

```js
return (async args => {

  const git = (await 
  import('https://cdn.skypack.dev/isomorphic-git')).default

  return git 
})()
```


## What if...

**REPLs** were just custom viewers [[renderer/viewers]]?

Implementing clientside execution via custom `!viewer`.









### Version 2

useEffect for execution on load otherwise require button press to exec.

```js !plugin of=esm
export const viewer = ({node, React}) => {
  const rce = React.createElement
  const {useState, useEffect} = React
  const [resp, setResp] = useState(null)
  const [run, setRun] = useState(0)
  
  const exec = ev => {
    ev && ev.stopPropagation()
    setRun(run+1)
    load(node.data.value)
    return false
  }

  useEffect( args => {
    if(run===0 && node.properties.meta.exec==="onload")
       exec()
  },[])

  async function load(src) {
    const val = `//run: ${run}\n${src}`
    const module = await import(`data:text/javascript;base64,${ btoa(src)}`);
    if (typeof module.returns === 'function') setResp(await module.returns(run))
    else if (module.returns) setResp(module.returns)
  }

  const btn = rce('button', {onClick: exec}, "Run " + run)
  const t = rce('div', null, [btn, resp])
  return t
}
if(typeof module !== "undefined") module.exports.viewer = viewer
```
```esm !below
function foo(baz) {
  alert("foo II")
  return "bar:" + baz
}
export const returns = foo
```
```js !below viewer=esm
import confetti from 'https://cdn.skypack.dev/canvas-confetti'

export const returns = run => confetti({
  origin: {y: 0},
  spread: 55,
  particleCount: 100,
  ticks: 1000,
})
```

Setting `exec` attribute to `onload`

```esm !below exec=onload
function output(num) {
  alert("execd onload!")
  return "done: " + new Date()
}
export const returns = output()
```


Cannot *yet* output raw DOM nodes, due to react setup of viewers.

```esm !below
function output(num) {
  const dom = document.createElement("pre")
  dom.innerHTML = `Run number ${num}`
  return dom
}
export const returns = output
```

So far so good, the only issue is that output is entirely ephemeral, how would we enable document modification, ie persist the output as an attached cell.

```esm !below
import git from 'https://cdn.skypack.dev/isomorphic-git'

export const returns = git 
```


### Module from string 🥲

Instead of importing datauri for viewers and transformers try use module constructor, *nope* only [node|common]js.
```js
return module
```
```>txt attached=true updated=1619567486067 !error
function toString() {
    [native code]
}
untitled.js:2:30
untitled.js:4:63
module code@untitled.js:4:139
evaluate@[native code]
moduleEvaluation@[native code]
```

```js
function requireFromString(src, filename) {
  var Module = module.constructor;
  var m = new Module();
  m._compile(src, filename);
  return m.exports;
}

console.log(requireFromString('module.exports = { test: 1}', ''));
```
```>txt attached=true updated=1619567422743 !error
function toString() {
    [native code]
}
requireFromString@untitled.js:3:22
untitled.js:9:30
untitled.js:11:63
module code@untitled.js:11:139
evaluate@[native code]
moduleEvaluation@[native code]
```