# Executing `code` cells

## Table of Contents

 ## Bugs 🐜 and To do ✅

- [x] executed cell gets replaced with its output
- [x] more robust outputs
  - [x] replace "connected" output on exec
- [ ] Extract transpilation as [[Transfomers]]

## Examples





```js
console.log(document.referrer)
```
```>txt attached=true updated=1619127005604
https://dotlit.org/
undefined
```






### TypeScript

```ts test.ts babel=true repl=js
type Options = {[key: number]: string}
const fn = (opts : Options) => {
  const str:string = 12 
  // need linting to make this useful
  return str
}

return fn()
```
```>txt attached=true updated=1619093312586
12
```







### Async and Promises

```js test.js babel=true
const wait = (ms) => {
  return new Promise(resolve => {
    setTimeout( () => {
      resolve(new Date())
    }, ms)
     
  })
}
return wait(1000)
```
```>txt attached=true updated=1619048641063
Thu Apr 22 2021 00:44:01 GMT+0100 (BST)
```









### React `jsx`

```jsx test.jsx babel=true repl=js
import React from 'https://cdn.skypack.dev/react'

const Component = props => {
  return <div></div>
}

return <Component/>
```
```>txt attached=true updated=1619094156920 !error
undefined
```

```jsx test.jsx babel=true repl=js
return (async args => {

  const React = await import('https://cdn.skypack.dev/react')

  const Component = props => {
    return <div {...props}>React component</div>
  }

  return <Component id="foo"/>
})()
```

```jsx test.jsx babel=true repl=js !inline
return (async args => {

const b = document.body
const ch = b.clientHeight
const sh = b.scrollHeight
const st = b.scrollTop

const c = (ch/2)+st
const cp = c / sh
  const y = cp
  const confetti = (await 
  import('https://cdn.skypack.dev/canvas-confetti')).default
  // do this for 30 seconds
var duration = 30 * 1000;
var end = Date.now() + duration;

(function frame() {
  // launch a few confetti from the left edge
  confetti({
    particleCount: 7,
    angle: 90,
    spread: 55,
    origin: { y: 0.5}
  });
  // and launch a few from the right edge
  false && confetti({
    particleCount: 7,
    angle: 0,
    spread: 55,
    origin: { y: 1 }
  });

  // keep going until we are out of time
  if (Date.now() < end) {
    console.log("still going")
    requestAnimationFrame(frame);
  }
}());
})()
```
```>txt attached=true updated=1619131619894
still going
undefined
```

```js

const b = document.body
const ch = b.clientHeight
const sh = b.scrollHeight
const st = b.scrollTop

const c = (ch/2)+st
const cp = c / sh

return {
   ch,sh,st,c,cp
}
```
```>txt attached=true updated=1619130891344
{ ch: 664, sh: 3092, st: 1836, c: 2168, cp: 0.7011642949547219 }
```













### Output Markdown

```js > md
console.log("A __*result*__: **`" +  42/13 + "`**")
return 42
```
```>md attached=true updated=1619049088835
A __*result*__: **`3.230769230769231`**
42
```







```js > json
return { foo: 'bar'}
```
```>json attached=true updated=1619020417262
{ foo: 'bar' }
```








### Meta: `lit` global and AST

























```js > ast_info !collapse
return this
```
```>ast_info !collapse attached=true updated=1619125613785
{ type: 'root',
  children: 
   [ { type: 'section',
       data: [Object],
       depth: 1,
       children: [Object],
       position: [Object] },
     { type: 'section',
       data: [Object],
       depth: 2,
       children: [Object],
       position: [Object] },
     { type: 'section',
       data: [Object],
       depth: 2,
       children: [Object],
       position: [Object] },
     { type: 'section',
       data: [Object],
       depth: 3,
       children: [Object],
       position: [Object] },
     { type: 'section',
       data: [Object],
       depth: 3,
       children: [Object],
       position: [Object] },
     { type: 'section',
       data: [Object],
       depth: 3,
       children: [Object],
       position: [Object] },
     { type: 'section',
       data: [Object],
       depth: 3,
       children: [Object],
       position: [Object] } ],
  position: 
   { start: { line: 1, column: 1, offset: 0 },
     end: { line: 315, column: 1, offset: 4807 } } }
```






```js > litlocation !collapse
return lit.location
```
```>litlocation !collapse attached=true updated=1619049206900
{ src: 'execute_code_cells.lit',
  root: '/',
  base: 'https://dotlit.org/',
  query: { file: 'execute_code_cells.lit' } }
```


```js > lit_utils !collapse
return lit.utils
```
```>lit_utils !collapse attached=true updated=1619049230464
{ select: 
   { matches: [Function: matches],
     selectAll: [Function: selectAll],
     select: [Function: select] },
  path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: null,
     posix: [Circular] },
  vfile: [Function: VFile],
  delete: [Function: _delete],
  read: [Function: read] }
```


```js > headings !collapse
return lit.utils
          .select
          .selectAll('heading', ast)
          .map( h => `${h.depth} ${h.data.id }`)
```
```>headings !collapse attached=true updated=1619049327833
[ '1 executing-code-cells',
  '2 table-of-contents',
  '2 bugs--and-to-do-',
  '2 examples',
  '3 typescript',
  '3 async-and-promises',
  '3 react-jsx',
  '3 output-markdown',
  '3 meta-lit-global-and-ast' ]
```


```html !inline
<style>
codecell.collapsed.dir-collapse li span.dir-collapse {
  display: none;
}
codecell.dir-error pre {
  border: 2px solid red;
}

codecell.dir-error li span.dir-error {
  background-color: red;
  color: white;
}
</style>
```

```js

const b = document.body
const ch = b.clientHeight
const sh = b.scrollHeight
const st = b.scrollTop

const c = (ch/2)+st
const cp = c / sh

return {
   ch,sh,st,c,cp
}
```
```>txt attached=true updated=1619131033688
{ ch: 664, sh: 3475, st: 2811, c: 3143, cp: 0.9044604316546763 }
```














