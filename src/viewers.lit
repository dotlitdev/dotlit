# Custom Viewers

## Table of Contents

## To Do

- [ ] DoppelgÃ¤nger page?
- [ ] Error handling
- [ ] Sharing across documents

## Examples

### Example: Basic `foo` viewer

```js !plugin of=foo
export const viewer = ({node}) => {
  return `${node.value} Foooooo!`
}
```


Not used in the default case:

```foo
Bar
```

Only when using the `!inline` directive:

```foo !inline
Baz 1
```





or `viewer=xxx` attribute is present:

```bar viewer=foo
Quz
```

or it is an output cell:

```>foo
Qux
```


### Example: React viewer

```js !plugin of=bar !collapse
export const viewer = ({node, React}) => {
  const rc = React.createElement
  const {useState, useEffect} = React
  const meta = node.properties 
               && node.properties.meta
  const [content, setContent] = useState('Loading...')
  const src = node.data.value
  useEffect(()=>{
    setContent("Loaded. " + node.data.value)
  },[src])

  return rc('div', {
    className: 'custom-react-view',
  }, content)
}
```

```bar !below
Custom Content 3
```

### Example: `css` viewer

```js !plugin of=css !collapse
export const viewer = ({node, React}) => {
  const rc = React.createElement
  const meta = node.properties 
               && node.properties.meta

  const link = meta && meta.uri

  if (link) return rc('link', {
    rel: 'stylesheet',
    href: link
  })

  return rc('style', {
    dangerouslySetInnerHTML: {
      __html: node.value
    }
  })
}
```

```>css !below
#lit-header {
  color: purple;
  font-family: sans-serif;
}
```

```css https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/solarized-light.min.css !inline !hidemeta
```
```>md !inline !info
ðŸ‘€ There is an invisible `css` cell (using `!inline` and `!hidemeta` directives) above which pulls a new solarised light highlight.js theme into the page.
```

### Example: `md` viewer

Less of an example but rather a work in progress before moving it into `.lit` as a default.

```js !plugin of=md !collapse <  plugins/viewers/md/index.jsx

```





```md !below
*Markdown* Viewer **DONE**
```

```>md
*Markdown* Viewer **FIXED**
```











```md !success viewer=md
**âœ… Admonitions**

See [[plugins/viewers/md/admonitions]] for more examples and usages.
```

```md !inline
    ```js
    Does this work?
    ```
```

### Example: `KaTeX` viewer

```html viewer=iframe !inline
<!DOCTYPE html>
<!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly -->
<html>
  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.13.2/dist/katex.min.css" integrity="sha384-Cqd8ihRLum0CCg8rz0hYKPoLZ3uw+gES2rXQXycqnL5pgVQIflxAUDS7ZSjITLb5" crossorigin="anonymous">

    <!-- The loading of KaTeX is deferred to speed up page rendering -->
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.13.2/dist/katex.min.js" integrity="sha384-1Or6BdeNQb0ezrmtGeqQHFpppNd7a/gw29xeiSikBbsb44xu3uAo8c7FwbF5jhbd" crossorigin="anonymous"></script>

    <!-- To automatically render math in text elements, include the auto-render extension: -->
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.13.2/dist/contrib/auto-render.min.js" integrity="sha384-vZTG03m+2yp6N6BNi5iM4rW4oIwk5DfcNdFfxkk9ZWpDriOkXX8voJBFrAO7MpVl" crossorigin="anonymous"
        onload="katex.render(document.body.innerHTML, document.body,{throwOnError: false});"></script>
  </head>
  <body>% \f is defined as #1f(#2) using the macro
\f\relax{x} = \int_{-\infty}^\infty
    \f\hat\xi\,e^{2 \pi i \xi x}
    \,d\xi</body>
</html>
```


### Example: `meta` viewer
```>js viewers/meta.js !plugin of=meta
export const viewer = ({node,React}) => {
  const {useEffect, useState} = React
  const [output,setOutput] = useState("Loading...")
  useEffect(()=>{
    setOutput(lit.utils.inspect(node))
  }, [node])
  return React.createElement('pre', {style: {color: 'black'}}, output)
}
```



```txt !below viewer=meta < dummy/plain.txt > lang file.ext
show meta content below:
```

### Example: `diff` viewer

v1 `https://cdn.skypack.dev/diff` didn't work (via skyPack) but added to utils.

v2 `https://github.com/praneshr/react-diff-viewer`

```js !plugin of=diff !collapse
import diff from 'https://cdn.skypack.dev/react-diff-viewer'
export const viewer = ({node,React}) => {
  const rc = React.createElement
 const {useState, useEffect} = React
  const meta = node.properties 
               && node.properties.meta
  const [content, setContent] = useState('Loading...')
  const src = node.data.value
  useEffect(async () => {

  const styles = {
    lineNumber: {
      fontWeight: 'bold'
    },
    gutter: {
      minWidth: '0.6em',
      padding: '0 0.2em',
    },
    marker: {
      width: 'auto',
      padding: '0 0.2em'
    },
    contentText: {
      lineHeight: '1em !important',
      wordBreak: 'break-all',
    },
    content: {
      width: 'auto',
      padding: 0,
    }
  }

  const view = rc(diff, {
    newValue: node.properties.data.originalSource,
    rightTitle: 'local',
    oldValue: src,
    leftTitle: 'remote',
    splitView: meta && meta.split === 'true',
    styles,
    compareMethod: diff[(meta && meta.method && meta.method.toUpperCase()) || 'CHARS']
  })


    setContent(view)
  },[src])

  

  return rc('div', {
    className: 'custom-diff-view',
  }, content)

}
```
```diff !inline split=true < dummy/plain.txt
Custom Content B as a new value
for testing diff viewer
initially created as a txt file output
flipped to transclude and modified cell
giving a node with data.value and data.properties.data.originalSource 
```
```>js plugins/modal/diff.js !plugin type=filemenu id=diff !collapse
import diff from "https://cdn.skypack.dev/react-diff-viewer";

export const filemenu = (ctx, { React, Menu, toggleModal }) => {
  const rc = React.createElement;

  const showDiff = async () => {
    const close = rc("button", { onClick: () => toggleModal() }, ["Close"]);

    const styles = {
      lineNumber: {
        fontWeight: "bold",
      },
      gutter: {
        minWidth: "0.6em",
        padding: "0 0.2em",
      },
      marker: {
        width: "auto",
        padding: "0 0.2em",
      },
      contentText: {
        lineHeight: "1em !important",
        wordBreak: "break-all",
      },
      content: {
        width: "auto",
        padding: 0,
      },
    };
    const stats = await lit.fs.readStat(lit.location.src, { encoding: "utf8" });
    if (stats.local.value === stats.remote.value) {
      toggleModal(rc("div", {}, [close, "Local and Remote match. (No Diff)"]));
      return;
    }

    const view = rc(diff, {
      newValue: stats.local.value,
      rightTitle: "local",
      oldValue: stats.remote.value,
      leftTitle: "remote",
      splitView: false,
      styles,
      compareMethod: diff["CHARS"],
    });

    const modal = rc("div", {}, [close, view]);
    toggleModal(modal);
  };

  return rc("span", { onClick: showDiff }, "Show Diff");
};

```

```>js plugins/viewer/diff.js !plugin of=diff2 !collapse
import diff from "https://cdn.skypack.dev/react-diff-viewer";

export const viewer = ({ node, React }) => {
  const rc = React.createElement;
  const { useState, useEffect } = React;
  const meta = node.properties && node.properties.meta;
  const [content, setContent] = useState("Loading...");
  const src = node.data.value;
  useEffect(async () => {
    const styles = {
      lineNumber: {
        fontWeight: "bold",
      },
      gutter: {
        minWidth: "0.6em",
        padding: "0 0.2em",
      },
      marker: {
        width: "auto",
        padding: "0 0.2em",
      },
      contentText: {
        lineHeight: "1em !important",
        wordBreak: "break-all",
      },
      content: {
        width: "auto",
        padding: 0,
      },
    };
    const stats = await lit.fs.readStat(src);
    if (stats.local.value === stats.remote.value) {
      setContent("Local and Remote match. (No Diff)");
      return;
    }

    const view = rc(diff, {
      newValue: stats.local.value,
      rightTitle: "local",
      oldValue: stats.remote.value,
      leftTitle: "remote",
      splitView: meta && meta.split === "true",
      styles,
      compareMethod:
        diff[(meta && meta.method && meta.method.toUpperCase()) || "CHARS"],
    });

    setContent(view);
  }, [src]);

  return rc(
    "div",
    {
      className: "custom-diff-view",
    },
    content
  );
};
```
```>diff2 split=true method=chars
/testing/fuzzy_text_search.lit
```

### Example: `graph` viewer

âœ… This viewer has been folded into `.lit` as one of the default viewers.

```js !plugin of=custom-graph !collapse
export const viewer = ({node, React}) => {
   const c = React.createElement
   const data = node.value

   const el = c('iframe', {srcDoc: `<head>
  <style> body { margin: 0; } </style>
  <script src="https://unpkg.com/force-graph"></script>
  <!-- from: https://github.com/vasturiano/force-graph -->
</head>
<body>
  <div id="graph"></div>
  <script>
    const data = ${data};
      const thisfile = window.parent.lit.location.src
      // alert(thisfile)
      const elem = document.getElementById('graph')
      const Graph = ForceGraph()(elem)
        .graphData(data)
        .nodeId('id')
        .nodeVal((n) => 2 * (n.backlinks && n.backlinks.length ? n.backlinks.length : 1))
        .nodeLabel('id')
        .nodeAutoColorBy('type')
        
        // .linkColor(d => data.nodes[d.source].exists ? 'red' : 'lightblue')
        .linkDirectionalArrowLength(6)
        .onNodeHover(node => elem.style.cursor = node ? 'pointer' : null)
        .onNodeClick(node => {
          // Center/zoom on node
          Graph.centerAt(node.x, node.y, 1000);
          Graph.zoom(2, 2000);
        });

        setTimeout( () => {
            const { nodes, links } = Graph.graphData()
            const node = nodes.filter( n => n.id === thisfile)[0]
            Graph.centerAt(node.x, node.y, 1000);
            Graph.zoom(2, 2000);

        }, 2000)

  </script>
</body>`})
   return el
}
```

```custom-graph !inline
{
  "nodes":[
    {"id": "foo"},
    {"id": "bar"}
  ],
  "links": [
    {"source": "foo", "target": "bar"}
  ]
}
```

```custom-graph !inline < ../manifest.json
```

The above automatically transcludes the `.lit` manifest and focuses on the current document

### Example: Vega 

Still a *Work in progress*
Docs: [vega-lite](https://vega.github.io/vega-lite/usage/compile.html)

```>iframe xviewer=meta
<!DOCTYPE html>
<html>
  <head>
    <title>Embedding Vega-Lite</title>
    <script src="https://cdn.jsdelivr.net/npm/vega@5.19.1"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega-lite@5.0.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega-embed@6.15.1"></script>
  </head>
  <body>
    <div id="vis"></div>

    <script type="text/javascript">
      var yourVlSpec = {
        $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
        description: 'A simple bar chart with embedded data.',
        data: {
          values: [
            {a: 'A', b: 28},
            {a: 'B', b: 55},
            {a: 'C', b: 43},
            {a: 'D', b: 91},
            {a: 'E', b: 81},
            {a: 'F', b: 53},
            {a: 'G', b: 19},
            {a: 'H', b: 87},
            {a: 'I', b: 52}
          ]
        },
        mark: 'bar',
        encoding: {
          x: {field: 'a', type: 'ordinal'},
          y: {field: 'b', type: 'quantitative'}
        }
      };
      vegaEmbed('#vis', yourVlSpec);
    </script>
  </body>
</html>
```

```vega
{
        $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
        description: 'A simple bar chart with embedded data.',
        data: {
          values: [
            {a: 'A', b: 28},
            {a: 'B', b: 55},
            {a: 'C', b: 43},
            {a: 'D', b: 91},
            {a: 'E', b: 81},
            {a: 'F', b: 53},
            {a: 'G', b: 19},
            {a: 'H', b: 87},
            {a: 'I', b: 52}
          ]
        },
        mark: 'bar',
        encoding: {
          x: {field: 'a', type: 'ordinal'},
          y: {field: 'b', type: 'quantitative'}
        }
      }
```

### Example: D3 Graphviz `dot` viewer

Docs: https://github.com/magjac/d3-graphviz#examples

```js !plugin of=dot !collapse
export const viewer = ({node, React}) => {
   const c = React.createElement
   const el = c('iframe', {srcDoc: `<!DOCTYPE html>
<meta charset="utf-8">
<body>
<script src="//d3js.org/d3.v5.min.js"></script>
<script src="https://unpkg.com/@hpcc-js/wasm@0.3.11/dist/index.min.js"></script>
<script src="https://unpkg.com/d3-graphviz@3.0.5/build/d3-graphviz.js"></script>
<div id="graph" style="text-align: center;"></div>
<script>

d3.select("#graph").graphviz()
    .renderDot('${node.value.trim()}');

</script>`})
   return el
}
```

```>dot xviewer=meta
digraph  { a -> b }
```

```>dot
digraph Q {

  node [shape=record];


  nd_1   [label = "Node 1"];
  nd_2   [label = "Node 2"];
  nd_3_a [label = "Above Right Node 3"];
  nd_3_l [label = "Left of Node 3"];
  nd_3   [label = "Node 3"];
  nd_3_r [label = "Right of Node 3"];
  nd_4   [label = "Node 4"];


  nd_3_a -> nd_3_r;
  nd_1 -> nd_2 -> nd_3 -> nd_4;

  subgraph cluster_R {

    {rank=same nd_3_l nd_3 nd_3_r}

    nd_3_l -> nd_3 -> nd_3_r [color=grey arrowhead=none];

  }

}
```

The above mildly more complex example doesn't render, likely due to not being actual graphviz.



## Errors

### Runtime

```js !plugin-disabled of=testerror
export const viewer = ({node}) => {
  throw new Error("Test Error: Broken Viewer")
}
```

```js !plugin-disabled of=syntaxerror
export const viewer = ({node}) => {
  throw new Error("Syntax Error: Broken Viewer"
}
```
```>testerror
Viewer throws an Error
```

```>syntaxerror
TODO: Viewer has a syntax error
```

### Import

```js !plugin-disabled of=testerror2
throw new Error("Test Error: Broken Viewer")
export const viewer = ({node}) => {
  return "never"
}
```
```>testerror2
Viewer throws an Error
```

## Initial prototype

```html !below viewer=iframe
<!DOCTYPE html>
<html>
  <head>
    <title>Test page</title>
  </head>
  <body>
  <script type="module">

    async function getViewer(src) {
      const module = await import(`data:text/javascript;base64,${ btoa(src)}`);
      return module.viewer;
    }

    getViewer(`export const viewer = () => "foo!"`).then(viewer => {
       document.body.innerHTML = ("Got viewer " + !!viewer)
    })

  </script>
  </body>
</html>
```


