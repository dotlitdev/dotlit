# testing/serviceworker

## References 

- https://ponyfoo.com/articles/serviceworker-revolution
- https://github.com/homam/service-workers-example
- Communication 
  - ~[broadcast channels](https://stackoverflow.com/a/66784901/371040)~ not available in safari, desktop or iOS 
- Initial source, from: https://googlechrome.github.io/samples/service-worker/basic/

See [[testing/Web Workers]] for related investigation.

## Exploration
```js
return navigator
```
```>txt attached=true updated=1619869271361
{}
```

```js
if ('serviceWorker' in navigator) {
  return true
}
```
```>txt attached=true updated=1619524117633
true
```


```js #register
return navigator
          .serviceWorker
          .register('/serviceworker.js')
```

```js #status
return navigator.serviceWorker.controller
         ? "Service worker active."
         : "Refresh to activate worker."
```
```>txt attached=true updated=1619869140213
Service worker active.
```

```js #unregister
navigator.serviceWorker.getRegistrations().then(function(registrations) {
 for(let registration of registrations) {
  registration.unregister()
} })
```
```>txt attached=true updated=1619597506256
undefined
```
```js
return (async fn => {
  const resp = await fetch('/none')
  return resp.status
})()
```
```>txt attached=true updated=1619524261160
404
```
```js
return (new Response('hello')).text()
```
```>txt attached=true updated=1619524123503
hello
```
```js
return (async fn => {
  const resp = await fetch('/swversion')
  return resp.status + " : " + (await resp.text())
})()
```
```>txt attached=true updated=1619870610489
404 : <html data-reactroot=""><head><title>Not yet found</title><meta name="litsrc" value="404.lit"/><meta name="litroot" value="/"/><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"/><link rel="stylesheet" href="https://highlightjs.org/static/demo/styles/railscasts.css"/><link rel="stylesheet" href="/style.css"/></head><body><div id="lit-app"><div id="lit-header"><menu class="horizontal open has-children"><li class="MenuTitle"><a href="/">Home</a></li><li class="MenuItems"><menu class="has-children"><li class="MenuTitle">File</li></menu><menu class="has-children" disabled=""><li class="MenuTitle">Cell</li></menu><menu class="has-children" disabled=""><li class="MenuTitle">Section</li></menu><menu class="has-children"><li class="MenuTitle">Help</li></menu><menu class="has-children right"><li class="MenuTitle"><span class="led led-grey"></span></li></menu></li></menu><div class="lit-messages"></div></div><div id="content"><section depth="1" class="" startpos="1:1-0" endpos="3:55-73"><cell startpos="1:1-0" endpos="3:55-73"><div class="cell-content"><h1 id="not-yet-found">Not <em>yet</em> found</h1><p>The file was not found, edit this page to change that.</p></div></cell></section></div></div><div id="backlinks"><h4>Backlinks (1)</h4><ol><li><a title=".lit" href="/index.html">.lit</a></li></ol></div><script src="//cdn.jsdelivr.net/npm/eruda"></script><script>eruda.init();</script><script src="/web.bundle.js"></script></body></html>
```

## Implementation
```>js ../serviceworker.js !collapse #implementation

// gross hack around one of @codemirror/view bugs
let document = { documentElement: { style: {} } }

importScripts('web.bundle.js')
postMessage("dotlit: " + typeof dotlit)

const PRECACHE = Date.now() // no-cache 'precache-v1';
const RUNTIME = 'runtime';

// A list of local resources we always want to be cached.
const PRECACHE_URLS = [
  //'index.html',
  //'./', // Alias for index.html
  //'styles.css',
  //'../../styles/main.css',
  //'demo.js'
];

const getMockResponse = args => new Response('sv:version:0.0.1')

// The install handler takes care of precaching the resources we always need.
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(PRECACHE)
      .then(cache => cache.addAll(PRECACHE_URLS))
      .then(self.skipWaiting())
  );
});

// The activate handler takes care of cleaning up old caches.
self.addEventListener('activate', event => {
  const currentCaches = [PRECACHE, RUNTIME];
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return cacheNames.filter(cacheName => !currentCaches.includes(cacheName));
    }).then(cachesToDelete => {
      return Promise.all(cachesToDelete.map(cacheToDelete => {
        return caches.delete(cacheToDelete);
      }));
    }).then(() => self.clients.claim())
  );
});

// The fetch handler serves responses for same-origin resources from a cache.
// If no response is found, it populates the runtime cache with the response
// from the network before returning it to the page.
self.addEventListener('fetch', event => {
  // Skip cross-origin requests, like those for Google Analytics. And add mock response
  if (event.request.url.startsWith(self.location.origin)) {
    if (event.request.url.endsWith('/swversion')) {
       event.respondWith(getMockResponse())
    }
    else event.respondWith(
      caches.match(event.request).then(cachedResponse => {
        if (false && cachedResponse) {
          return cachedResponse;
        }

        return caches.open(RUNTIME).then(cache => {
          return fetch(event.request).then(response => {
            // Put a copy of the response in the runtime cache.
            return cache.put(event.request, response.clone()).then(() => {
              return response;
            });
          });
        });
      })
    );
  }
});
```