# Service Worker

```js exec=onload !collapse
return fetch("--sw")
  .catch((err) => err.message)
  .then((res) => res.status);

```

## Table of Contents

## References 

- https://ponyfoo.com/articles/serviceworker-revolution
- https://github.com/homam/service-workers-example
- Communication 
  - ~[broadcast channels](https://stackoverflow.com/a/66784901/371040)~ not available in safari, desktop or iOS 
- Initial source, from: https://googlechrome.github.io/samples/service-worker/basic/
- https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith
- https://stackoverflow.com/questions/44424709/passing-state-info-into-a-service-worker-before-install
- https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch


See [[testing/Web Workers]] for related investigation.

## Exploration
```js
return navigator
```
```>txt attached=true updated=1619869271361
{}
```

```js
if ('serviceWorker' in navigator) {
  return true
}
```
```>txt attached=true updated=1619524117633
true
```


```js #register
return navigator
          .serviceWorker
          .register('/serviceworker.js?root='+lit.location.root)
```
```>txt attached=true updated=1624914201934
{}
```

- [ ] To do, handle register for non-root hosted notebooks.

```js #status exec=onload
return navigator.serviceWorker.controller
         ? "Service worker active."
         : "Service worker Not active."
```

```js #unregister
return (async fn => {
  const regs = await navigator
                     .serviceWorker
                     .getRegistrations()
  for(let registration of regs) {
    console.log(registration)
    registration.unregister()
  }
  return `Unregistered ${regs.length} regisration(s)`
})()
```
```>txt attached=true updated=1664833287631
{}
Unregistered 1 regisration(s)
```
```>txt attached=true updated=1654640239561
{}
Unregistered 1 regisration(s)
```
```js
return fetch('/none')
       .then( resp => resp.status )
```
```>txt attached=true updated=1620028398727
404
```
```js
return fetch('/manifest.json')
       .then(resp => resp.status)
```
```>txt attached=true updated=1619884198845
200
```
```js
return (new Response('hello')).text()
```
```>txt attached=true updated=1619524123503
hello
```

~~As of now, the service worker doesn't cache anything and just passes through to the network as normal.~~ Except if the `request.url` ends with `--sw` in which case it returns a mock/info response.
```js
return fetch('/--sw')
       .then(resp => resp.text()
                          .then( text => `${resp.status}\n${text}`)
       )
```
```>txt attached=true updated=1623677989543
200
{
  "version": "0.2.17",
  "dotlit": "object",
  "root": "/",
  "enableCache": false,
  "count": 11,
  "filepath": "/",
  "stat": {
    "type": "dir",
    "mode": 511,
    "size": 0,
    "ino": 0,
    "mtimeMs": 1621892330665,
    "ctimeMs": 1621892330665,
    "uid": 1,
    "gid": 1,
    "dev": 1
  }
}
```


```text < ./getserviceworker--sw 

```

## Implementation

```js !collapse #implementation < ../serviceworker.js

```

## To do

- [ ] Serve from cache first for specified domains (skypack, unpkg, jsdeliver etc)
- [x] Add responses not on host domain to `RUNTIME` cache for offline usage...?
