# Links
```js babel=true
const {wikiLinkOptions, linkToUrl, decorateLinkNode} = lit.parser.utils

const resolve = wikiLinkOptions().pageResolver

// console.info(resolve.toString())
// console.info(linkToUrl.toString())

const root = '/'
const type = 'wikiLink'
const example = 'testing/Links?foo=bar#baz'
const resolved = resolve(example)
const link = {
  type,
  data: {permalink: resolved[0]},
  url: example,
  value: example,
}
console.log({root,example,resolved,link})
let url
try { url = linkToUrl(link, root) } catch(err) {console.error(err.message)}

const decorated = decorateLinkNode(link)
return JSON.stringify(decorated, null, 2)


```
```>txt  updated=1621980516788
{ root: '/',
  example: 'testing/Links?foo=bar#baz',
  resolved: [ 'testing/linksfoobarbaz' ],
  link: 
   { type: 'wikiLink',
     data: { permalink: 'testing/linksfoobarbaz' },
     url: 'testing/Links?foo=bar#baz',
     value: 'testing/Links?foo=bar#baz' } }
{
  "type": "link",
  "data": {
    "isExternal": false,
    "isAbsolute": false,
    "isFragment": false,
    "isRelative": true,
    "canonical": "testing/linksfoobarbaz.lit",
    "wikilink": true,
    "hProperties": {
      "wikilink": true,
      "data": {
        "base": "testing/linksfoobarbaz.html",
        "isExternal": false,
        "isAbsolute": false,
        "isFragment": false,
        "isRelative": true,
        "canonical": "testing/linksfoobarbaz.lit",
        "wikilink": true
      }
    }
  },
  "url": "testing/linksfoobarbaz.html?file=testing/linksfoobarbaz.lit",
  "title": "testing/Links?foo=bar#baz",
  "children": [
    {
      "type": "text",
      "value": "testing/Links?foo=bar#baz"
    }
  ]
}
```



