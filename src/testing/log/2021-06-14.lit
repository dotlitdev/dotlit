# 2021-06-14

## A Geo Hash

> Earth's circumference is the distance around Earth. Measured around the Equator, it is 40,075.017 km (24,901.461 mi). Measured around the poles, the circumference is 40,007.863 km (24,859.734 mi).
> â€” [Wikipedia](https://en.m.wikipedia.org/wiki/Earth%27s_circumference)

```js
return 40075017 / Math.pow(2,25)
```
```>txt attached=true updated=1623746076992
1.1943285763263702
```

The circumference `c` of the earth at the equator in meters, divided by two, twenty five times is roughly one point two meters `s`.

```js
const c = 40075017
const s = 1.1943285763263702
const n = c / s
const dlon = 360 / n
return `${n} segments of ${dlon} degrees longitude`
```
```>txt attached=true updated=1623712900558
33554432 segments of 0.000010728836059570312 degrees longitude
```

If for each division we stored "left" (0) or "right" (1) as a binary with 25 bits

Which if we always picked the "right" half of the split would give a maximum binary string like so:

```js
return parseInt("111111111111111111111111", 2);
```
```>txt attached=true updated=1623708862835
16777215
```

Coincidentally the max hex representation. is then:

```js
return (16777215).toString(16)
```
```>txt attached=true updated=1623710026311
ffffff
```



```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const n = Math.pow(2, x)
const dLon = mLon / n
const dLat = mLat / n

const binToInt = str => parseInt(str,2)
const intToHex = num => num.toString(16)

const normLat = lat => lat + 90
const normLon = lon => lon + 180

const geo2hash = (lat,lon) => {
  const bins = ['','']
  let [a,b] = [normLat(lat) / dLat, normLon(lon) / dLon]
  let S = n
  let [minLatS,maxLatS,minLonS,maxLonS] = [0,n,0,n]
  for (var I=0;I<x;I++) {
    S = S / 2
    if (a < maxLatS/2){
      maxLatS = maxLatS - ((maxLatS-minLatS)/2)
      bins[0] += "0"
    } else {
      minLatS = minLatS + ((maxLatS-minLatS)/2)
      bins[0] += "1"
    }
    if (b < maxLonS/2){
      maxLonS = maxLonS - ((maxLonS-minLonS)/2)
      bins[1] += "0"
    } else {
      minLonS = minLonS + ((maxLonS-minLonS)/2)
      bins[1] += "1"
    }
    console.log({I, S, a, b, d: [minLatS,maxLatS,minLonS,maxLonS]})
    //bins[0] += ((a < S) ? "0" : "1")
    //bins[1] += ((b < S) ? "0" : "1")
  }
  const ints = bins.map( bin => binToInt(bin))
  const hexs = ints.map( i => intToHex(i))
  console.log({lat,lon,dLon,dLat,n,x,ints,hexs, bins})
  return hexs.join('x')
}

return geo2hash(30,30)
```
```>txt attached=true updated=1623760022494
{ I: 0,
  S: 16777216,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 16777216, 0, 16777216 ] }
{ I: 1,
  S: 8388608,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 8388608, 0, 8388608 ] }
{ I: 2,
  S: 4194304,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 4194304, 0, 4194304 ] }
{ I: 3,
  S: 2097152,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 2097152, 0, 2097152 ] }
{ I: 4,
  S: 1048576,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 1048576, 0, 1048576 ] }
{ I: 5,
  S: 524288,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 524288, 0, 524288 ] }
{ I: 6,
  S: 262144,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 262144, 0, 262144 ] }
{ I: 7,
  S: 131072,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 131072, 0, 131072 ] }
{ I: 8,
  S: 65536,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 65536, 0, 65536 ] }
{ I: 9,
  S: 32768,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 32768, 0, 32768 ] }
{ I: 10,
  S: 16384,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 16384, 0, 16384 ] }
{ I: 11,
  S: 8192,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 8192, 0, 8192 ] }
{ I: 12,
  S: 4096,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 4096, 0, 4096 ] }
{ I: 13,
  S: 2048,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 2048, 0, 2048 ] }
{ I: 14,
  S: 1024,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 1024, 0, 1024 ] }
{ I: 15,
  S: 512,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 512, 0, 512 ] }
{ I: 16,
  S: 256,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 256, 0, 256 ] }
{ I: 17,
  S: 128,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 0, 128, 128, 256 ] }
{ I: 18,
  S: 64,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 64, 128, 192, 256 ] }
{ I: 19,
  S: 32,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 96, 128, 224, 256 ] }
{ I: 20,
  S: 16,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 112, 128, 240, 256 ] }
{ I: 21,
  S: 8,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 120, 128, 248, 256 ] }
{ I: 22,
  S: 4,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 124, 128, 252, 256 ] }
{ I: 23,
  S: 2,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 126, 128, 254, 256 ] }
{ I: 24,
  S: 1,
  a: 100.64351200162828,
  b: 175.831010127831,
  d: [ 127, 128, 255, 256 ] }
{ lat: 30,
  lon: 30,
  dLon: 1.1943285763263702,
  dLat: 1.192327231168747,
  n: 33554432,
  x: 25,
  ints: [ 127, 255 ],
  hexs: [ '7f', 'ff' ],
  bins: [ '0000000000000000001111111', '0000000000000000011111111' ] }
7fxff
```

```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const n = Math.pow(2, x)
const dLon = mLon / n
const dLat = mLat / n
const blank = Array(x).fill("0").join('')

const hash2geo = hash => {
  const hexs = hash.split('x')
  const ints = hexs.map(h => parseInt(h,16))
  const bins = ints.map( i => i.toString(2)).map(b => blank.slice(0, 0-b.length) + b)
  
  let [minLat,maxLat] = [0, n]
  let [minLon,maxLon] = [0, n]
  for (var I=0;I<x;I++) {
    const a = parseInt(bins[0][I])
    const b = parseInt(bins[1][I])

    if (a) minLat = (minLat + ((maxLat-minLat)/2))
    else maxLat = (maxLat - (maxLat-minLat)/2)
    if (b) minLon = (minLon + ((maxLon-minLon)/2))
    else maxLon = (maxLon - (maxLon-minLon)/2)
    // console.log({I,d: [minLat,maxLat,minLon,maxLon]})
  }

  // [minLat,maxLat] = [minLat,maxLat].map(y=>(y*dLat)-90)
  // [minLon,maxLon] = [minLon,maxLon].map(y=>(y*dLon)-180)
  
  return {x,hash,ints,hexs,bins, minLat,maxLat,minLon,maxLon}
}
return hash2geo("7fxff")
```
```>txt attached=true updated=1623793963174
{ x: 25,
  hash: '7fxff',
  ints: [ 127, 255 ],
  hexs: [ '7f', 'ff' ],
  bins: [ '0000000000000000001111111', '0000000000000000011111111' ],
  minLat: 127,
  maxLat: 128,
  minLon: 255,
  maxLon: 256 }
```

```js
const x = 25
const n = Math.pow(2, x)
const dLon = 360 / n
const dLat = 180 / n
const mLon = 40075017
const mLat = 40007863

const geo2hash = (lat,lon) => {
  const nLat = Math.floor((lat+90)/dLat)
  const nLon = Math.floor((lon+180)/dLon)
  console.log({nLat,nLon})
  return `${nLat.toString(16)}x${nLon.toString(16)}`
}
const hash2geo = hash => {
  const [hLat,hLon] = hash.split('x').map(x=>parseInt(x,16))
  const lat = (hLat * dLat) - 90
  const lon = (hLon * dLon) - 180
  return { lat: [lat, lat+dLat], lon: [lon,lon+dLon]}
}

return hash2geo(geo2hash(30,30))
```
```>txt attached=true updated=1623771539065
{ nLat: 22369621, nLon: 19573418 }
{ lat: [ 29.999998211860657, 30.000003576278687 ],
  lon: [ 29.999992847442627, 30.000003576278687 ] }
```