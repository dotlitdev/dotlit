# 2021-06-14

## A Geo Hash

> Earth's circumference is the distance around Earth. Measured around the Equator, it is 40,075.017 km (24,901.461 mi). Measured around the poles, the circumference is 40,007.863 km (24,859.734 mi).
> â€” [Wikipedia](https://en.m.wikipedia.org/wiki/Earth%27s_circumference)

```js
return 40075017 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2
```
```>txt attached=true updated=1623708791131
1.1943285763263702
```

The circumference of the the earth at the equator in meters, divided by two, twenty five times is roughly one point two meters.

```js
const c = 40075017
const s = 1.1943285763263702
const n = c / s
const dlon = 360 / n
return `${n} segments of ${dlon} degrees longitude`
```
```>txt attached=true updated=1623712900558
33554432 segments of 0.000010728836059570312 degrees longitude
```

If for each division we stored "left" (0) or "right" (1) as a binary with 25 bits

Which if we always picked the "right" half of the split would give a maximum binary string like so:

```js
return parseInt("111111111111111111111111", 2);
```
```>txt attached=true updated=1623708862835
16777215
```

Coincidentally the max hex representation. is then:

```js
return (16777215).toString(16)
```
```>txt attached=true updated=1623710026311
ffffff
```



```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const s = Math.pow(2, x)
const dLon = mLon / s
const dLat = mLat / s

const geo = (lat,lon) => {
  const bins = [[],[]]
  let [a,b] = [lat / dLat, lon / dLon]
  let S = s
  for (var I=0;I<x;I++) {
    S = S / 2
    bins[0].push((a < S) ? "0" : "1")
    bins[1].push((b < S) ? "0" : "1")
  }
  return bins.map( bin => bin.join(''))
}

return geo(30,30)
```
```>txt attached=true updated=1623713811890
[ '0000000000000000000011111', '0000000000000000000011111' ]
```