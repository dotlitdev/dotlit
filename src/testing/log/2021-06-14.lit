# 2021-06-14

## A Geo Hash

> Earth's circumference is the distance around Earth. Measured around the Equator, it is 40,075.017 km (24,901.461 mi). Measured around the poles, the circumference is 40,007.863 km (24,859.734 mi).
> â€” [Wikipedia](https://en.m.wikipedia.org/wiki/Earth%27s_circumference)

```js
return 40075017 / Math.pow(2,25)
```
```>txt attached=true updated=1623746076992
1.1943285763263702
```

The circumference `c` of the the earth at the equator in meters, divided by two, twenty five times is roughly one point two meters `s`.

```js
const c = 40075017
const s = 1.1943285763263702
const n = c / s
const dlon = 360 / n
return `${n} segments of ${dlon} degrees longitude`
```
```>txt attached=true updated=1623712900558
33554432 segments of 0.000010728836059570312 degrees longitude
```

If for each division we stored "left" (0) or "right" (1) as a binary with 25 bits

Which if we always picked the "right" half of the split would give a maximum binary string like so:

```js
return parseInt("111111111111111111111111", 2);
```
```>txt attached=true updated=1623708862835
16777215
```

Coincidentally the max hex representation. is then:

```js
return (16777215).toString(16)
```
```>txt attached=true updated=1623710026311
ffffff
```



```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const n = Math.pow(2, x)
const dLon = mLon / n
const dLat = mLat / n

const binToHex = (str) => parseInt(str,2).toString(16)

const normLat = lat => lat + 90
const normLon = lon => lon + 180

const geo2hash = (lat,lon) => {
  const bins = ['','']
  let [a,b] = [normLat(lat) / dLat, normLon(lon) / dLon]
  let S = n
  for (var I=0;I<x;I++) {
    S = S / 2
    bins[0] += ((a < S) ? "0" : "1")
    bins[1] += ((b < S) ? "0" : "1")
  }
  const hash = bins.map( bin => binToHex(bin))
  console.log({hash, bins})
  return hash
}

return geo2hash(30,30).join('x')
```
```>txt attached=true updated=1623755708476 !error
{ bins: [ '0000000000000000001111111', '0000000000000000011111111' ] }
function toString() {
    [native code]
}
untitled.js:27:28
untitled.js:29:63
module code@untitled.js:29:139
evaluate@[native code]
moduleEvaluation@[native code]
```

```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const n = Math.pow(2, x)
const dLon = mLon / n
const dLat = mLat / n

const hash2geo = hash => {
  const blank = Array(x).fill("0").join('')
  const hexs = hash.split('x')
  const ints = hexs.map(h => parseInt(h,16))
  const bins = ints.map( i => i.toString(2))
  
  return {hexs,bins}
}
return hash2geo("7fxff")
```
```>txt attached=true updated=1623755585376
{ hexs: [ '7f', 'ff' ], bins: [ '1111111', '11111111' ] }
```