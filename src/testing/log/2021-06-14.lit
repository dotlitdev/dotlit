# 2021-06-14

## A Geo Hash

> Earth's circumference is the distance around Earth. Measured around the Equator, it is 40,075.017 km (24,901.461 mi). Measured around the poles, the circumference is 40,007.863 km (24,859.734 mi).
> â€” [Wikipedia](https://en.m.wikipedia.org/wiki/Earth%27s_circumference)

```js
return 40075017 / Math.pow(2,25)
```
```>txt attached=true updated=1623746076992
1.1943285763263702
```

The circumference `c` of the earth at the equator in meters, divided by two, twenty five times is roughly one point two meters `s`.

```js
const c = 40075017
const s = 1.1943285763263702
const n = c / s
const dlon = 360 / n
return `${n} segments of ${dlon} degrees longitude`
```
```>txt attached=true updated=1623712900558
33554432 segments of 0.000010728836059570312 degrees longitude
```

If for each division we stored "left" (0) or "right" (1) as a binary with 25 bits

Which if we always picked the "right" half of the split would give a maximum binary string like so:

```js
return parseInt("111111111111111111111111", 2);
```
```>txt attached=true updated=1623708862835
16777215
```

Coincidentally the max hex representation. is then:

```js
return (16777215).toString(16)
```
```>txt attached=true updated=1623710026311
ffffff
```



```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const n = Math.pow(2, x)
const dLon = 360 / n
const dLat = 180 / n

const binToInt = str => parseInt(str,2)
const intToHex = num => num.toString(16)

const normLat = lat => lat + 90
const normLon = lon => lon + 180

const geo2hash = (lat,lon) => {
  const bins = ['','']
  let [a,b] = [normLat(lat), normLon(lon)]
  console.log({normalised: [a,b]})
  let [minLatS,maxLatS,minLonS,maxLonS] = [0,180,0,360]
  for (var I=0;I<x;I++) {
    const latDiv = minLatS + (maxLatS-minLatS)/2
    const lonDiv = minLonS + (maxLonS-minLonS)/2
    //console.log({I, d: [minLatS,maxLatS,minLonS,maxLonS], divs:[latDiv,lonDiv]})
    if (a < latDiv){
      maxLatS = maxLatS - ((maxLatS-minLatS)/2)
      bins[0] += "0"
    } else {
      minLatS = minLatS + ((maxLatS-minLatS)/2)
      bins[0] += "1"
    }
    if (b < lonDiv){
      maxLonS = maxLonS - ((maxLonS-minLonS)/2)
      bins[1] += "0"
    } else {
      minLonS = minLonS + ((maxLonS-minLonS)/2)
      bins[1] += "1"
    }
    //console.log(bins)
  }
  const ints = bins.map( bin => binToInt(bin))
  const hexs = ints.map( i => intToHex(i))
  console.log({lat,lon,dLon,dLat,n,x,ints,hexs, bins})
  return hexs.join('x')
}

return geo2hash(30,30)
```
```>txt attached=true updated=1623795406443
{ normalised: [ 120, 210 ] }
{ I: 0, d: [ 0, 180, 0, 360 ], divs: [ 90, 180 ] }
[ '1', '1' ]
{ I: 1, d: [ 90, 180, 180, 360 ], divs: [ 135, 270 ] }
[ '10', '10' ]
{ I: 2, d: [ 90, 135, 180, 270 ], divs: [ 112.5, 225 ] }
[ '101', '100' ]
{ I: 3, d: [ 112.5, 135, 180, 225 ], divs: [ 123.75, 202.5 ] }
[ '1010', '1001' ]
{ I: 4,
  d: [ 112.5, 123.75, 202.5, 225 ],
  divs: [ 118.125, 213.75 ] }
[ '10101', '10010' ]
{ I: 5,
  d: [ 118.125, 123.75, 202.5, 213.75 ],
  divs: [ 120.9375, 208.125 ] }
[ '101010', '100101' ]
{ I: 6,
  d: [ 118.125, 120.9375, 208.125, 213.75 ],
  divs: [ 119.53125, 210.9375 ] }
[ '1010101', '1001010' ]
{ I: 7,
  d: [ 119.53125, 120.9375, 208.125, 210.9375 ],
  divs: [ 120.234375, 209.53125 ] }
[ '10101010', '10010101' ]
{ I: 8,
  d: [ 119.53125, 120.234375, 209.53125, 210.9375 ],
  divs: [ 119.8828125, 210.234375 ] }
[ '101010101', '100101010' ]
{ I: 9,
  d: [ 119.8828125, 120.234375, 209.53125, 210.234375 ],
  divs: [ 120.05859375, 209.8828125 ] }
[ '1010101010', '1001010101' ]
{ I: 10,
  d: [ 119.8828125, 120.05859375, 209.8828125, 210.234375 ],
  divs: [ 119.970703125, 210.05859375 ] }
[ '10101010101', '10010101010' ]
{ I: 11,
  d: [ 119.970703125, 120.05859375, 209.8828125, 210.05859375 ],
  divs: [ 120.0146484375, 209.970703125 ] }
[ '101010101010', '100101010101' ]
{ I: 12,
  d: [ 119.970703125, 120.0146484375, 209.970703125, 210.05859375 ],
  divs: [ 119.99267578125, 210.0146484375 ] }
[ '1010101010101', '1001010101010' ]
{ I: 13,
  d: [ 119.99267578125, 120.0146484375, 209.970703125, 210.0146484375 ],
  divs: [ 120.003662109375, 209.99267578125 ] }
[ '10101010101010', '10010101010101' ]
{ I: 14,
  d: 
   [ 119.99267578125,
     120.003662109375,
     209.99267578125,
     210.0146484375 ],
  divs: [ 119.9981689453125, 210.003662109375 ] }
[ '101010101010101', '100101010101010' ]
{ I: 15,
  d: 
   [ 119.9981689453125,
     120.003662109375,
     209.99267578125,
     210.003662109375 ],
  divs: [ 120.00091552734375, 209.9981689453125 ] }
[ '1010101010101010', '1001010101010101' ]
{ I: 16,
  d: 
   [ 119.9981689453125,
     120.00091552734375,
     209.9981689453125,
     210.003662109375 ],
  divs: [ 119.99954223632812, 210.00091552734375 ] }
[ '10101010101010101', '10010101010101010' ]
{ I: 17,
  d: 
   [ 119.99954223632812,
     120.00091552734375,
     209.9981689453125,
     210.00091552734375 ],
  divs: [ 120.00022888183594, 209.99954223632812 ] }
[ '101010101010101010', '100101010101010101' ]
{ I: 18,
  d: 
   [ 119.99954223632812,
     120.00022888183594,
     209.99954223632812,
     210.00091552734375 ],
  divs: [ 119.99988555908203, 210.00022888183594 ] }
[ '1010101010101010101', '1001010101010101010' ]
{ I: 19,
  d: 
   [ 119.99988555908203,
     120.00022888183594,
     209.99954223632812,
     210.00022888183594 ],
  divs: [ 120.00005722045898, 209.99988555908203 ] }
[ '10101010101010101010', '10010101010101010101' ]
{ I: 20,
  d: 
   [ 119.99988555908203,
     120.00005722045898,
     209.99988555908203,
     210.00022888183594 ],
  divs: [ 119.99997138977051, 210.00005722045898 ] }
[ '101010101010101010101', '100101010101010101010' ]
{ I: 21,
  d: 
   [ 119.99997138977051,
     120.00005722045898,
     209.99988555908203,
     210.00005722045898 ],
  divs: [ 120.00001430511475, 209.9999713897705 ] }
[ '1010101010101010101010', '1001010101010101010101' ]
{ I: 22,
  d: 
   [ 119.99997138977051,
     120.00001430511475,
     209.9999713897705,
     210.00005722045898 ],
  divs: [ 119.99999284744263, 210.00001430511475 ] }
[ '10101010101010101010101', '10010101010101010101010' ]
{ I: 23,
  d: 
   [ 119.99999284744263,
     120.00001430511475,
     209.9999713897705,
     210.00001430511475 ],
  divs: [ 120.00000357627869, 209.99999284744263 ] }
[ '101010101010101010101010', '100101010101010101010101' ]
{ I: 24,
  d: 
   [ 119.99999284744263,
     120.00000357627869,
     209.99999284744263,
     210.00001430511475 ],
  divs: [ 119.99999821186066, 210.0000035762787 ] }
[ '1010101010101010101010101', '1001010101010101010101010' ]
{ lat: 30,
  lon: 30,
  dLon: 0.000010728836059570312,
  dLat: 0.000005364418029785156,
  n: 33554432,
  x: 25,
  ints: [ 22369621, 19573418 ],
  hexs: [ '1555555', '12aaaaa' ],
  bins: [ '1010101010101010101010101', '1001010101010101010101010' ] }
1555555x12aaaaa
```

```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const n = Math.pow(2, x)
const dLon = 360 / n
const dLat = 180 / n
const blank = Array(x).fill("0").join('')

const hash2geo = hash => {
  const hexs = hash.split('x')
  const ints = hexs.map(h => parseInt(h,16))
  const bins = ints.map( i => i.toString(2)).map(b => blank.slice(0, 0-b.length) + b)
  
  let [minLat,maxLat] = [0, 180]
  let [minLon,maxLon] = [0, 360]
  for (var I=0;I<x;I++) {
    const a = parseInt(bins[0][I])
    const b = parseInt(bins[1][I])
    //console.log({I,a,b,d: [minLat,maxLat,minLon,maxLon]})
    if (a) {
       minLat = (minLat + ((maxLat-minLat)/2))
    } else {
       maxLat = (maxLat - (maxLat-minLat)/2)
    }
    if (b) {
       minLon = (minLon + ((maxLon-minLon)/2))
    } else {
       maxLon = (maxLon - (maxLon-minLon)/2)
    }
  }
  console.log({d: [minLat,maxLat,minLon,maxLon]})
  //[minLat,maxLat] = [minLat,maxLat].map(y=>y-90)
  //[minLon,maxLon] = [minLon,maxLon].map(y=>y-180)
  
  return {x,hash,ints,hexs,bins, minLat,maxLat,minLon,maxLon}
}
return hash2geo("1555555x12aaaaa")
```
```>txt attached=true updated=1623796493657
{ I: 0, a: 1, b: 1, d: [ 0, 180, 0, 360 ] }
{ I: 1, a: 0, b: 0, d: [ 90, 180, 180, 360 ] }
{ I: 2, a: 1, b: 0, d: [ 90, 135, 180, 270 ] }
{ I: 3, a: 0, b: 1, d: [ 112.5, 135, 180, 225 ] }
{ I: 4, a: 1, b: 0, d: [ 112.5, 123.75, 202.5, 225 ] }
{ I: 5, a: 0, b: 1, d: [ 118.125, 123.75, 202.5, 213.75 ] }
{ I: 6, a: 1, b: 0, d: [ 118.125, 120.9375, 208.125, 213.75 ] }
{ I: 7,
  a: 0,
  b: 1,
  d: [ 119.53125, 120.9375, 208.125, 210.9375 ] }
{ I: 8,
  a: 1,
  b: 0,
  d: [ 119.53125, 120.234375, 209.53125, 210.9375 ] }
{ I: 9,
  a: 0,
  b: 1,
  d: [ 119.8828125, 120.234375, 209.53125, 210.234375 ] }
{ I: 10,
  a: 1,
  b: 0,
  d: [ 119.8828125, 120.05859375, 209.8828125, 210.234375 ] }
{ I: 11,
  a: 0,
  b: 1,
  d: [ 119.970703125, 120.05859375, 209.8828125, 210.05859375 ] }
{ I: 12,
  a: 1,
  b: 0,
  d: [ 119.970703125, 120.0146484375, 209.970703125, 210.05859375 ] }
{ I: 13,
  a: 0,
  b: 1,
  d: [ 119.99267578125, 120.0146484375, 209.970703125, 210.0146484375 ] }
{ I: 14,
  a: 1,
  b: 0,
  d: 
   [ 119.99267578125,
     120.003662109375,
     209.99267578125,
     210.0146484375 ] }
{ I: 15,
  a: 0,
  b: 1,
  d: 
   [ 119.9981689453125,
     120.003662109375,
     209.99267578125,
     210.003662109375 ] }
{ I: 16,
  a: 1,
  b: 0,
  d: 
   [ 119.9981689453125,
     120.00091552734375,
     209.9981689453125,
     210.003662109375 ] }
{ I: 17,
  a: 0,
  b: 1,
  d: 
   [ 119.99954223632812,
     120.00091552734375,
     209.9981689453125,
     210.00091552734375 ] }
{ I: 18,
  a: 1,
  b: 0,
  d: 
   [ 119.99954223632812,
     120.00022888183594,
     209.99954223632812,
     210.00091552734375 ] }
{ I: 19,
  a: 0,
  b: 1,
  d: 
   [ 119.99988555908203,
     120.00022888183594,
     209.99954223632812,
     210.00022888183594 ] }
{ I: 20,
  a: 1,
  b: 0,
  d: 
   [ 119.99988555908203,
     120.00005722045898,
     209.99988555908203,
     210.00022888183594 ] }
{ I: 21,
  a: 0,
  b: 1,
  d: 
   [ 119.99997138977051,
     120.00005722045898,
     209.99988555908203,
     210.00005722045898 ] }
{ I: 22,
  a: 1,
  b: 0,
  d: 
   [ 119.99997138977051,
     120.00001430511475,
     209.9999713897705,
     210.00005722045898 ] }
{ I: 23,
  a: 0,
  b: 1,
  d: 
   [ 119.99999284744263,
     120.00001430511475,
     209.9999713897705,
     210.00001430511475 ] }
{ I: 24,
  a: 1,
  b: 0,
  d: 
   [ 119.99999284744263,
     120.00000357627869,
     209.99999284744263,
     210.00001430511475 ] }
{ d: 
   [ 119.99999821186066,
     120.00000357627869,
     209.99999284744263,
     210.0000035762787 ] }
{ x: 25,
  hash: '1555555x12aaaaa',
  ints: [ 22369621, 19573418 ],
  hexs: [ '1555555', '12aaaaa' ],
  bins: [ '1010101010101010101010101', '1001010101010101010101010' ],
  minLat: 119.99999821186066,
  maxLat: 120.00000357627869,
  minLon: 209.99999284744263,
  maxLon: 210.0000035762787 }
```


```js
const x = 25
const n = Math.pow(2, x)
const dLon = 360 / n
const dLat = 180 / n
const mLon = 40075017
const mLat = 40007863

const geo2hash = (lat,lon) => {
  const nLat = Math.floor((lat+90)/dLat)
  const nLon = Math.floor((lon+180)/dLon)
  console.log({nLat,nLon})
  return `${nLat.toString(16)}x${nLon.toString(16)}`
}
const hash2geo = hash => {
  const [hLat,hLon] = hash.split('x').map(x=>parseInt(x,16))
  const lat = (hLat * dLat) - 90
  const lon = (hLon * dLon) - 180
  return { lat: [lat, lat+dLat], lon: [lon,lon+dLon]}
}

return hash2geo(geo2hash(30,30))
```
```>txt attached=true updated=1623771539065
{ nLat: 22369621, nLon: 19573418 }
{ lat: [ 29.999998211860657, 30.000003576278687 ],
  lon: [ 29.999992847442627, 30.000003576278687 ] }
```