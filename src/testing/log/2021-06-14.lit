# 2021-06-14

## A Geo Hash

> Earth's circumference is the distance around Earth. Measured around the Equator, it is 40,075.017 km (24,901.461 mi). Measured around the poles, the circumference is 40,007.863 km (24,859.734 mi).
> â€” [Wikipedia](https://en.m.wikipedia.org/wiki/Earth%27s_circumference)

```js
return 40075017 / Math.pow(2,25)
```
```>txt attached=true updated=1623746076992
1.1943285763263702
```

The circumference `c` of the the earth at the equator in meters, divided by two, twenty five times is roughly one point two meters `s`.

```js
const c = 40075017
const s = 1.1943285763263702
const n = c / s
const dlon = 360 / n
return `${n} segments of ${dlon} degrees longitude`
```
```>txt attached=true updated=1623712900558
33554432 segments of 0.000010728836059570312 degrees longitude
```

If for each division we stored "left" (0) or "right" (1) as a binary with 25 bits

Which if we always picked the "right" half of the split would give a maximum binary string like so:

```js
return parseInt("111111111111111111111111", 2);
```
```>txt attached=true updated=1623708862835
16777215
```

Coincidentally the max hex representation. is then:

```js
return (16777215).toString(16)
```
```>txt attached=true updated=1623710026311
ffffff
```



```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const n = Math.pow(2, x)
const dLon = mLon / n
const dLat = mLat / n

const binToInt = str => parseInt(str,2)
const intToHex = num => num.toString(16)

const normLat = lat => lat + 90
const normLon = lon => lon + 180

const geo2hash = (lat,lon) => {
  const bins = ['','']
  let [a,b] = [normLat(lat) / dLat, normLon(lon) / dLon]
  let S = n
  for (var I=0;I<x;I++) {
    S = S / 2
    bins[0] += ((a < S) ? "0" : "1")
    bins[1] += ((b < S) ? "0" : "1")
  }
  const ints = bins.map( bin => binToInt(bin))
  const hexs = ints.map( i => intToHex(i))
  console.log({ints,hexs, bins})
  return hexs.join('x')
}

return geo2hash(30,30)
```
```>txt attached=true updated=1623757648760
{ ints: [ 127, 255 ],
  hexs: [ '7f', 'ff' ],
  bins: [ '0000000000000000001111111', '0000000000000000011111111' ] }
7fxff
```

```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const n = Math.pow(2, x)
const dLon = mLon / n
const dLat = mLat / n
const blank = Array(x).fill("0").join('')

const denorm = (v,d) => v-d
const hash2geo = hash => {
  const hexs = hash.split('x')
  const ints = hexs.map(h => parseInt(h,16))
  const bins = ints.map( i => i.toString(2)).map(b => blank.slice(0, 0-b.length) + b)
  let S = n
  let [minLat,maxLat] = [0, 180]
  let [minLon,maxLon] = [0, 360]
  for (var I=0;I<x;I++) {
    const a = parseInt(bins[0][I])
    const b = parseInt(bins[1][I])
    S = S / 2
    if (a) minLat = (minLat + ((maxLat-minLat)/2))
    else maxLat = (maxLat - (maxLat-minLat)/2)
    if (b) minLon = (minLon + ((maxLon-minLon)/2))
    else maxLon = (maxLon - (maxLon-minLon)/2)
    console.log({I,d: [minLat,maxLat,minLon,maxLon]})
  }

  // [minLat,maxLat] = [minLat,maxLat].map(y=>denorm(y,90))
  // [minLon,maxLon] = [minLon,maxLon].map(y=>denorm(y,180))
  
  return {ints,hexs,bins, minLat,maxLat,minLon,maxLon}
}
return hash2geo("7fxff")
```
```>txt attached=true updated=1623758187531
{ I: 0, d: [ 0, 90, 0, 180 ] }
{ I: 1, d: [ 0, 45, 0, 90 ] }
{ I: 2, d: [ 0, 22.5, 0, 45 ] }
{ I: 3, d: [ 0, 11.25, 0, 22.5 ] }
{ I: 4, d: [ 0, 5.625, 0, 11.25 ] }
{ I: 5, d: [ 0, 2.8125, 0, 5.625 ] }
{ I: 6, d: [ 0, 1.40625, 0, 2.8125 ] }
{ I: 7, d: [ 0, 0.703125, 0, 1.40625 ] }
{ I: 8, d: [ 0, 0.3515625, 0, 0.703125 ] }
{ I: 9, d: [ 0, 0.17578125, 0, 0.3515625 ] }
{ I: 10, d: [ 0, 0.087890625, 0, 0.17578125 ] }
{ I: 11, d: [ 0, 0.0439453125, 0, 0.087890625 ] }
{ I: 12, d: [ 0, 0.02197265625, 0, 0.0439453125 ] }
{ I: 13, d: [ 0, 0.010986328125, 0, 0.02197265625 ] }
{ I: 14, d: [ 0, 0.0054931640625, 0, 0.010986328125 ] }
{ I: 15, d: [ 0, 0.00274658203125, 0, 0.0054931640625 ] }
{ I: 16, d: [ 0, 0.001373291015625, 0, 0.00274658203125 ] }
{ I: 17,
  d: [ 0, 0.0006866455078125, 0.001373291015625, 0.00274658203125 ] }
{ I: 18,
  d: 
   [ 0.00034332275390625,
     0.0006866455078125,
     0.0020599365234375,
     0.00274658203125 ] }
{ I: 19,
  d: 
   [ 0.000514984130859375,
     0.0006866455078125,
     0.00240325927734375,
     0.00274658203125 ] }
{ I: 20,
  d: 
   [ 0.0006008148193359375,
     0.0006866455078125,
     0.002574920654296875,
     0.00274658203125 ] }
{ I: 21,
  d: 
   [ 0.0006437301635742188,
     0.0006866455078125,
     0.0026607513427734375,
     0.00274658203125 ] }
{ I: 22,
  d: 
   [ 0.0006651878356933594,
     0.0006866455078125,
     0.0027036666870117188,
     0.00274658203125 ] }
{ I: 23,
  d: 
   [ 0.0006759166717529297,
     0.0006866455078125,
     0.0027251243591308594,
     0.00274658203125 ] }
{ I: 24,
  d: 
   [ 0.0006812810897827148,
     0.0006866455078125,
     0.0027358531951904297,
     0.00274658203125 ] }
{ ints: [ 127, 255 ],
  hexs: [ '7f', 'ff' ],
  bins: [ '0000000000000000001111111', '0000000000000000011111111' ],
  minLat: 0.0006812810897827148,
  maxLat: 0.0006866455078125,
  minLon: 0.0027358531951904297,
  maxLon: 0.00274658203125 }
```