# 2021-06-14

## A Geo Hash

> Earth's circumference is the distance around Earth. Measured around the Equator, it is 40,075.017 km (24,901.461 mi). Measured around the poles, the circumference is 40,007.863 km (24,859.734 mi).
> â€” [Wikipedia](https://en.m.wikipedia.org/wiki/Earth%27s_circumference)

```js
return 40075017 / Math.pow(2,25)
```
```>txt attached=true updated=1623746076992
1.1943285763263702
```

The circumference `c` of the earth at the equator in meters, divided by two, twenty five times is roughly one point two meters `s`.

```js
const c = 40075017
const s = 1.1943285763263702
const n = c / s
const dlon = 360 / n
return `${n} segments of ${dlon} degrees longitude`
```
```>txt attached=true updated=1623712900558
33554432 segments of 0.000010728836059570312 degrees longitude
```

If for each division we stored "left" (0) or "right" (1) as a binary with 25 bits

Which if we always picked the "right" half of the split would give a maximum binary string like so:

```js
return parseInt("111111111111111111111111", 2);
```
```>txt attached=true updated=1623708862835
16777215
```

Coincidentally the max hex representation. is then:

```js
return (16777215).toString(16)
```
```>txt attached=true updated=1623710026311
ffffff
```



```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const n = Math.pow(2, x)
const dLon = 360 / n
const dLat = 180 / n

const binToInt = str => parseInt(str,2)
const intToHex = num => num.toString(16)

const normLat = lat => lat + 90
const normLon = lon => lon + 180

const geo2hash = (lat,lon) => {
  const bins = ['','']
  let [a,b] = [normLat(lat), normLon(lon)]
  let S = n
  let [minLatS,maxLatS,minLonS,maxLonS] = [0,180,0,360]
  for (var I=0;I<x;I++) {
    S = S / 2
    if (a < maxLatS/2){
      maxLatS = maxLatS - ((maxLatS-minLatS)/2)
      bins[0] += "0"
    } else {
      minLatS = minLatS + ((maxLatS-minLatS)/2)
      bins[0] += "1"
    }
    if (b < maxLonS/2){
      maxLonS = maxLonS - ((maxLonS-minLonS)/2)
      bins[1] += "0"
    } else {
      minLonS = minLonS + ((maxLonS-minLonS)/2)
      bins[1] += "1"
    }
    console.log({I, S, a, b, d: [minLatS,maxLatS,minLonS,maxLonS]})
  }
  const ints = bins.map( bin => binToInt(bin))
  const hexs = ints.map( i => intToHex(i))
  console.log({lat,lon,dLon,dLat,n,x,ints,hexs, bins})
  return hexs.join('x')
}

return geo2hash(30,30)
```
```>txt attached=true updated=1623794602012
{ I: 0, S: 16777216, a: 120, b: 210, d: [ 90, 180, 180, 360 ] }
{ I: 1, S: 8388608, a: 120, b: 210, d: [ 135, 180, 270, 360 ] }
{ I: 2, S: 4194304, a: 120, b: 210, d: [ 157.5, 180, 315, 360 ] }
{ I: 3,
  S: 2097152,
  a: 120,
  b: 210,
  d: [ 168.75, 180, 337.5, 360 ] }
{ I: 4,
  S: 1048576,
  a: 120,
  b: 210,
  d: [ 174.375, 180, 348.75, 360 ] }
{ I: 5,
  S: 524288,
  a: 120,
  b: 210,
  d: [ 177.1875, 180, 354.375, 360 ] }
{ I: 6,
  S: 262144,
  a: 120,
  b: 210,
  d: [ 178.59375, 180, 357.1875, 360 ] }
{ I: 7,
  S: 131072,
  a: 120,
  b: 210,
  d: [ 179.296875, 180, 358.59375, 360 ] }
{ I: 8,
  S: 65536,
  a: 120,
  b: 210,
  d: [ 179.6484375, 180, 359.296875, 360 ] }
{ I: 9,
  S: 32768,
  a: 120,
  b: 210,
  d: [ 179.82421875, 180, 359.6484375, 360 ] }
{ I: 10,
  S: 16384,
  a: 120,
  b: 210,
  d: [ 179.912109375, 180, 359.82421875, 360 ] }
{ I: 11,
  S: 8192,
  a: 120,
  b: 210,
  d: [ 179.9560546875, 180, 359.912109375, 360 ] }
{ I: 12,
  S: 4096,
  a: 120,
  b: 210,
  d: [ 179.97802734375, 180, 359.9560546875, 360 ] }
{ I: 13,
  S: 2048,
  a: 120,
  b: 210,
  d: [ 179.989013671875, 180, 359.97802734375, 360 ] }
{ I: 14,
  S: 1024,
  a: 120,
  b: 210,
  d: [ 179.9945068359375, 180, 359.989013671875, 360 ] }
{ I: 15,
  S: 512,
  a: 120,
  b: 210,
  d: [ 179.99725341796875, 180, 359.9945068359375, 360 ] }
{ I: 16,
  S: 256,
  a: 120,
  b: 210,
  d: [ 179.99862670898438, 180, 359.99725341796875, 360 ] }
{ I: 17,
  S: 128,
  a: 120,
  b: 210,
  d: [ 179.9993133544922, 180, 359.9986267089844, 360 ] }
{ I: 18,
  S: 64,
  a: 120,
  b: 210,
  d: [ 179.9996566772461, 180, 359.9993133544922, 360 ] }
{ I: 19,
  S: 32,
  a: 120,
  b: 210,
  d: [ 179.99982833862305, 180, 359.9996566772461, 360 ] }
{ I: 20,
  S: 16,
  a: 120,
  b: 210,
  d: [ 179.99991416931152, 180, 359.99982833862305, 360 ] }
{ I: 21,
  S: 8,
  a: 120,
  b: 210,
  d: [ 179.99995708465576, 180, 359.9999141693115, 360 ] }
{ I: 22,
  S: 4,
  a: 120,
  b: 210,
  d: [ 179.99997854232788, 180, 359.99995708465576, 360 ] }
{ I: 23,
  S: 2,
  a: 120,
  b: 210,
  d: [ 179.99998927116394, 180, 359.9999785423279, 360 ] }
{ I: 24,
  S: 1,
  a: 120,
  b: 210,
  d: [ 179.99999463558197, 180, 359.99998927116394, 360 ] }
{ lat: 30,
  lon: 30,
  dLon: 0.000010728836059570312,
  dLat: 0.000005364418029785156,
  n: 33554432,
  x: 25,
  ints: [ 33554431, 33554431 ],
  hexs: [ '1ffffff', '1ffffff' ],
  bins: [ '1111111111111111111111111', '1111111111111111111111111' ] }
1ffffffx1ffffff
```

```js
const mLon = 40075017
const mLat = 40007863
const x = 25
const n = Math.pow(2, x)
const dLon = 360 / n
const dLat = 180 / n
const blank = Array(x).fill("0").join('')

const hash2geo = hash => {
  const hexs = hash.split('x')
  const ints = hexs.map(h => parseInt(h,16))
  const bins = ints.map( i => i.toString(2)).map(b => blank.slice(0, 0-b.length) + b)
  
  let [minLat,maxLat] = [0, n]
  let [minLon,maxLon] = [0, n]
  for (var I=0;I<x;I++) {
    const a = parseInt(bins[0][I])
    const b = parseInt(bins[1][I])

    if (a) minLat = (minLat + ((maxLat-minLat)/2))
    else maxLat = (maxLat - (maxLat-minLat)/2)
    if (b) minLon = (minLon + ((maxLon-minLon)/2))
    else maxLon = (maxLon - (maxLon-minLon)/2)
    console.log({I,d: [minLat,maxLat,minLon,maxLon]})
  }

  [minLat,maxLat] = [minLat,maxLat].map(y=>(y*dLat)-90)
  [minLon,maxLon] = [minLon,maxLon].map(y=>(y*dLon)-180)
  
  return {x,hash,ints,hexs,bins, minLat,maxLat,minLon,maxLon}
}
return hash2geo("1ffffffx1ffffff")
```
```>txt attached=true updated=1623794314975
{ I: 0, d: [ 16777216, 33554432, 16777216, 33554432 ] }
{ I: 1, d: [ 25165824, 33554432, 25165824, 33554432 ] }
{ I: 2, d: [ 29360128, 33554432, 29360128, 33554432 ] }
{ I: 3, d: [ 31457280, 33554432, 31457280, 33554432 ] }
{ I: 4, d: [ 32505856, 33554432, 32505856, 33554432 ] }
{ I: 5, d: [ 33030144, 33554432, 33030144, 33554432 ] }
{ I: 6, d: [ 33292288, 33554432, 33292288, 33554432 ] }
{ I: 7, d: [ 33423360, 33554432, 33423360, 33554432 ] }
{ I: 8, d: [ 33488896, 33554432, 33488896, 33554432 ] }
{ I: 9, d: [ 33521664, 33554432, 33521664, 33554432 ] }
{ I: 10, d: [ 33538048, 33554432, 33538048, 33554432 ] }
{ I: 11, d: [ 33546240, 33554432, 33546240, 33554432 ] }
{ I: 12, d: [ 33550336, 33554432, 33550336, 33554432 ] }
{ I: 13, d: [ 33552384, 33554432, 33552384, 33554432 ] }
{ I: 14, d: [ 33553408, 33554432, 33553408, 33554432 ] }
{ I: 15, d: [ 33553920, 33554432, 33553920, 33554432 ] }
{ I: 16, d: [ 33554176, 33554432, 33554176, 33554432 ] }
{ I: 17, d: [ 33554304, 33554432, 33554304, 33554432 ] }
{ I: 18, d: [ 33554368, 33554432, 33554368, 33554432 ] }
{ I: 19, d: [ 33554400, 33554432, 33554400, 33554432 ] }
{ I: 20, d: [ 33554416, 33554432, 33554416, 33554432 ] }
{ I: 21, d: [ 33554424, 33554432, 33554424, 33554432 ] }
{ I: 22, d: [ 33554428, 33554432, 33554428, 33554432 ] }
{ I: 23, d: [ 33554430, 33554432, 33554430, 33554432 ] }
{ I: 24, d: [ 33554431, 33554432, 33554431, 33554432 ] }
{ x: 25,
  hash: '1ffffffx1ffffff',
  ints: [ 33554431, 33554431 ],
  hexs: [ '1ffffff', '1ffffff' ],
  bins: [ '1111111111111111111111111', '1111111111111111111111111' ],
  minLat: 179.99998927116394,
  maxLat: 180,
  minLon: 33554431,
  maxLon: 33554432 }
```

```js
const x = 25
const n = Math.pow(2, x)
const dLon = 360 / n
const dLat = 180 / n
const mLon = 40075017
const mLat = 40007863

const geo2hash = (lat,lon) => {
  const nLat = Math.floor((lat+90)/dLat)
  const nLon = Math.floor((lon+180)/dLon)
  console.log({nLat,nLon})
  return `${nLat.toString(16)}x${nLon.toString(16)}`
}
const hash2geo = hash => {
  const [hLat,hLon] = hash.split('x').map(x=>parseInt(x,16))
  const lat = (hLat * dLat) - 90
  const lon = (hLon * dLon) - 180
  return { lat: [lat, lat+dLat], lon: [lon,lon+dLon]}
}

return hash2geo(geo2hash(30,30))
```
```>txt attached=true updated=1623771539065
{ nLat: 22369621, nLon: 19573418 }
{ lat: [ 29.999998211860657, 30.000003576278687 ],
  lon: [ 29.999992847442627, 30.000003576278687 ] }
```