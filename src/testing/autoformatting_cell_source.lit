# Autoformatting Cell Source
## ... with prettier

Homepage https://prettier.io

```js babel=true #reference
import prettier from "https://unpkg.com/prettier@2.3.0/esm/standalone.mjs";
import parserBabel from "https://unpkg.com/prettier@2.3.0/esm/parser-babel.mjs";

console.log(
  prettier.format("const html=/* HTML */ `<DIV> </DIV>`", {
    parser: "babel",
    plugins: [parserBabel],
  })
);

```

```js #test > js #formatted
return (async fn => { // intentionally [sic] badly formatted 
const p = await import(

'https://unpkg.com/prettier@2.3.0/esm/standalone.mjs')
           
              const b = await 
          import('https://unpkg.com/prettier@2.3.0/esm/parser-babel.mjs')
const format 
= p.default.format
const babelPlugin 
= b.default


  const thisCellsSource = this.children[0].children[0].data.value


return format(thisCellsSource, { parser: "babel",plugins: [babelPlugin]})
})()
```
```>js #formatted attached=true updated=1621285984079
return (async (fn) => {
  // intentionally [sic] badly formatted
  const p = await import("https://unpkg.com/prettier@2.3.0/esm/standalone.mjs");

  const b = await import(
    "https://unpkg.com/prettier@2.3.0/esm/parser-babel.mjs"
  );
  const format = p.default.format;
  const babelPlugin = b.default;

  const thisCellsSource = this.children[0].children[0].data.value;

  return format(thisCellsSource, { parser: "babel", plugins: [babelPlugin] });
})();

```

Implementing as a transformer `!plugin`

```>js ../plugins/transformers/prettier.js !plugin type=transformer of=prettier id=prettier
export const transformer = async ({
  node,
  src,
  codeSource,
  rawSource,
  originalSource,
}) => {
  const lines = src.split("\n");
  let [first, ...rest] = lines;
  let middle = rest.slice(0, -1);
  const [last] = rest.slice(-1);
  const body = middle.join("\n");

  const p = await import("https://unpkg.com/prettier@2.3.0/esm/standalone.mjs");
  const b = await import(
    "https://unpkg.com/prettier@2.3.0/esm/parser-babel.mjs"
  );

  const format = p.default.format;
  const babelPlugin = b.default;
  try {
    return [
      first,
      format(body, { parser: "babel", plugins: [babelPlugin] }),
      last,
    ].join("\n");
  } catch (err) {
    lit.file.message(err.message);
    return src;
  }
};

```

```js transformer=prettier
// make me
         // prettier
//...
// thanks

return async fn=>{}

```
```>txt attached=true updated=1621632686284
[Function]
```