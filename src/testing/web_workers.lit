# Web Workers

## Table of Contents 

## References 
[Using Web Workers on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)

## Support



```js
return `Worker supported: ${!!window.Worker}`
```
```>txt attached=true updated=1619650950719
Worker supported: true
```

## Implementation
```>js worker.js #implementation
// gross hack around one of codemirror/view bugs
let document = { documentElement: { style: {} } }

importScripts('../web.bundle.js')
postMessage("dotlit: " + typeof dotlit)
console.log("anyone here?")
```
```>js worker2.js #implementation
postMessage("hi")
console.log("anyone here?")
```
Check if web server has up to date content yet? This delay is really why we need a service worker in the first place.

```js
return (async fn => {
  const resp = await fetch('./worker.js')
  return resp.status + "\n" + (await resp.text())
})()
```
```>txt attached=true updated=1619735935623
200
importScripts('../web.bundle.js')
postMessage("dotlit: " + typeof dotlit)
console.log("anyone here?")
```
### Testing

~Current REPL results in script execution from cross-origin? Due to data:uri~ was resolving the raw event from postMessage not `ev.data` which is necessary.

```js
return new Promise((resolve,reject) => {
  let myWorker;
  try {
    myWorker = new Worker('worker.js')
    myWorker.onmessage = (ev) => resolve(ev.data)
    myWorker.onerror = (err) => {
      resolve({msg: "worker.onerror: " + err.message + " (" + err.filename + ":" + err.lineno + ")", err, err},)
    }
  } catch(err) {
    resolve({msg: "Caught err", err})
  }
  
})
```
```>txt attached=true updated=1619790172554
{ msg: 'worker.onerror: Uncaught TypeError: Path must be a string. Received undefined (http://localhost:8080/web.bundle.js:177281)',
  err: { isTrusted: [Getter] } }
```

```js
return (async fn =>{
   const url = "https://dotlit.org/web.bundle.js"
   const lineno = 93002
   const spread = 10

   const resp = await fetch(url)
   console.log(resp.status)
   const val = await resp.text()
   const lines = val.split("\n")
   console.log(lines.length, "lines")

   
   return lines.map((l,i) => {
           if (i ===lineno-1) return ">>>" + l
           else return "" + i + " " + l
           }).slice(lineno - spread, lineno + spread).join("\n")
})()

```
```>txt attached=true updated=1619790000754
200
227913,lines
92992 __webpack_require__.r(__webpack_exports__);
92993 /* harmony export */ __webpack_require__.d(__webpack_exports__, {
92994 /* harmony export */   "NoOp": () => (/* binding */ NoOp),
92995 /* harmony export */   "Identity": () => (/* binding */ Identity),
92996 /* harmony export */   "AsInt": () => (/* binding */ AsInt),
92997 /* harmony export */   "Undef": () => (/* binding */ Undef),
92998 /* harmony export */   "getMeta": () => (/* binding */ getMeta),
92999 /* harmony export */   "posstr": () => (/* binding */ posstr)
93000 /* harmony export */ });
>>>var NoOp = function NoOp() {};
93002 var Identity = function Identity(x) {
93003   return x;
93004 };
93005 var AsInt = function AsInt(x) {
93006   return parseInt(x);
93007 };
93008 var Undef = function Undef(x) {
93009   return typeof x === 'undefined';
93010 };
93011 var getMeta = function getMeta(key, def) {
```



