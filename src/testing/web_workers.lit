# Web Workers

## Table of Contents 

## References 
[Using Web Workers on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)

## Support



```js
return `Worker supported: ${!!window.Worker}`
```
```>txt attached=true updated=1619650950719
Worker supported: true
```

## Implementation
```>js worker.js #implementation
importScripts('../web.bundle.js')
postMessage("dotlit: " + typeof dotlit)
console.log("anyone here?")
```
```>js worker2.js #implementation
postMessage("hi")
console.log("anyone here?")
```
Check if web server has up to date content yet? This delay is really why we need a service worker in the first place.

```js
return (async fn => {
  const resp = await fetch('./worker.js')
  return resp.status + "\n" + (await resp.text())
})()
```
```>txt attached=true updated=1619735935623
200
importScripts('../web.bundle.js')
postMessage("dotlit: " + typeof dotlit)
console.log("anyone here?")
```
### Testing

~Current REPL results in script execution from cross-origin? Due to data:uri~ was resolving the raw event from postMessage not `ev.data` which is necessary.

```js
return new Promise((resolve,reject) => {
  let myWorker;
  try {
    myWorker = new Worker('worker.js')
    myWorker.onmessage = (ev) => resolve(ev.data)
    myWorker.onerror = (err) => {
      resolve({msg: "worker.onerror", err, err.data})
    }
  } catch(err) {
    resolve({msg: "Caught err", err})
  }
  
})
```
```>txt attached=true updated=1619736645812 !error
undefined
```



