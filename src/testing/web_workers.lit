# Web Workers

## Table of Contents 

## References 
[Using Web Workers on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)

## Support



```js
return `Worker supported: ${!!window.Worker}`
```
```>txt attached=true updated=1619650950719
Worker supported: true
```

## Implementation
```>js worker.js #implementation
// gross hack around one of codemirror/view bugs
let document = { documentElement: { style: {} } }

importScripts('../web.bundle.js')
postMessage("dotlit: " + typeof dotlit)
console.log("anyone here?")
```
```>js worker2.js #implementation
postMessage("hi")
console.log("anyone here?")
```
Check if web server has up to date content yet? This delay is really why we need a service worker in the first place.

```js
return (async fn => {
  const resp = await fetch('./worker.js')
  return resp.status + "\n" + (await resp.text())
})()
```
```>txt attached=true updated=1619735935623
200
importScripts('../web.bundle.js')
postMessage("dotlit: " + typeof dotlit)
console.log("anyone here?")
```
### Testing

~Current REPL results in script execution from cross-origin? Due to data:uri~ was resolving the raw event from postMessage not `ev.data` which is necessary.

```js
return new Promise((resolve,reject) => {
  let myWorker;
  try {
    myWorker = new Worker('worker.js')
    myWorker.onmessage = (ev) => resolve(ev.data)
    myWorker.onerror = (err) => {
      resolve({msg: "worker.onerror: " + err.message + " (" + err.filename + ":" + err.lineno + ")", err, err},)
    }
  } catch(err) {
    resolve({msg: "Caught err", err})
  }
  
})
```
```>txt attached=true updated=1619781435551
{ msg: 'worker.onerror: ReferenceError: Can\'t find variable: document (https://dotlit.org/web.bundle.js:68421)',
  err: { isTrusted: [Getter] } }
```

```js
return (async fn =>{
   const url = "https://dotlit.org/web.bundle.js"
   const lineno = 68421
   const spread = 10

   const resp = await fetch(url)
   console.log(resp.status)
   const val = await resp.text()
   const lines = val.split("\n")
   console.log(lines.length, "lines")

   
   return lines.map((l,i) => {
           if (i ===lineno-1) return ">>>" + l
           else return "" + i + " " + l
           }).slice(lineno - spread, lineno + spread).join("\n")
})()

```
```>txt attached=true updated=1619782028606
200
227913,lines
68416 
68417 
68418 
68419 let [nav, doc] = typeof navigator != "undefined"
>>>    ? [navigator, document]
68421     : [{ userAgent: "", vendor: "", platform: "" }, { documentElement: { style: {} } }];
68422 const ie_edge = /Edge\/(\d+)/.exec(nav.userAgent);
68423 const ie_upto10 = /MSIE \d/.test(nav.userAgent);
68424 const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
68425 const ie = !!(ie_upto10 || ie_11up || ie_edge);
```



