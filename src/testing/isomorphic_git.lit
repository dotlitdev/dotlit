# Isomorphic Git


Since `.lit` already uses [[testing/LightningFS]] for the local filesystem we can easily use https://isomorphic-git.org/docs/en/quickstart to manage versioning...

## Table of Contents

## Initial plan

The initial plan is to just auto commit on all actions, enabling "infinite" undo.

Thereafter that may remain the default but ideally an ergonomic version of the raw git api can be exposed for more advanced users.

*Implementation*





```js ../utils/git-commit-all.js !plugin type=fn id=git-commit-all !collapse
// initially, because it's on every change 
// a commit will mostly be for a single
// file at a time the immediate exception 
// being when a file with output files 
// is edited, in which case the commit 
// includes those files.

export const fn = async () => {
  const now = (new Date()).toISOString()

  const fs = lit.lfs 
  const dir = lit.location.root
  const git = lit.git
  const FILE = 0, WORKDIR = 2, STAGE = 3

  const unstaged = row => {
    return row[WORKDIR] !== row[STAGE]
  }

  // get/list unstaged files
  const status = await git.statusMatrix({ fs,dir})
  const files = status
                .filter( unstaged )
                .map(row => row[FILE])

  // stage everything
  await git.add({fs, dir, filepath: '.'})

  // message 
  const message = `Commit ${lit.location.src}

at ${now} includes the following ${files.length} files:
${files.map(f=> "- " + f).join('\n')}`

  // return message

  // commit
  const sha = await git.commit({fs, dir,
    message,
    author: {
      name: 'dotlitbot',
      email: 'bot@dotlit.org'
    }
  })
  return `Committed ${sha.slice(0,6)} 
${message}`
}
```
```js !plugin id=git type=menu !collapse
export const menu = (ctx, {React, Menu}) => {
  const rc = React.createElement
  const commit = lit.file.data.plugins.fn['git-commit-all']
  const onClick = async ev => alert(await commit())
  return rc( Menu, {
    title:"Git",
    disabled: false,
  }, [rc('span', {onClick}, 'Commit All')])
}
```
```txt updated=1619425559711
Committed d738da 
Auto commit testing/isomorphic_git.lit

at: 2021-04-26T08:25:54.893Z
includes the following 2 files:
- testing/isomorphic_git.lit
- utils/git-commit-all.js
```
## Investigating API


```js
return lit.fs
       .readFile('/.git/HEAD', {
          encoding: 'utf8'
        })
```
```>txt attached=true updated=1622725790535
ref: refs/heads/master

```
```js #init
return (async () => {
  return await lit.git.init({
    fs: lit.lfs, 
    dir: lit.location.root
  })
})()
```
```>txt attached=true updated=1622725787006
undefined
```
### Status

```js
return (async () => {
  return lit.location.src + " : " + await lit.git.status({
    fs: lit.lfs, 
    dir: lit.location.root, 
    filepath: '.' 
  })
})()
```
```>txt attached=true updated=1621335274603
testing/isomorphic_git.lit : *added
```
```js
return (async () => {
  return await lit.git.statusMatrix({
    fs: lit.lfs, 
    dir: lit.location.root, 
    filepaths: ['testing/']
  })
})()
```
```>txt attached=true updated=1622725804115
[ [ 'testing/<', 0, 2, 0 ],
  [ 'testing/autoformatting_cell_source.lit', 0, 2, 0 ],
  [ 'testing/autoformatting_cell_source.lit#prettier', 0, 2, 0 ],
  [ 'testing/compactManifest1.json', 0, 2, 0 ],
  [ 'testing/compact_manifest.lit', 0, 2, 0 ],
  [ 'testing/cors_proxy.lit', 0, 2, 0 ],
  [ 'testing/custom-module.js', 0, 2, 0 ],
  [ 'testing/custom-module.mjs', 0, 2, 0 ],
  [ 'testing/esm_viewer_repl.lit', 0, 2, 0 ],
  [ 'testing/full.json', 0, 2, 0 ],
  [ 'testing/fuzzy_text_search.lit', 0, 2, 0 ],
  [ 'testing/gitworker.js', 0, 2, 0 ],
  [ 'testing/importing_js_modules.lit', 0, 2, 0 ],
  [ 'testing/index.lit', 0, 2, 0 ],
  [ 'testing/input_buffer.lit', 0, 2, 0 ],
  [ 'testing/isomorphic_git.lit', 0, 2, 0 ],
  [ 'testing/lightningfs.lit', 0, 2, 0 ],
  [ 'testing/links.lit', 0, 2, 0 ],
  [ 'testing/local_remote_files.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-09.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-11.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-12.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-13.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-15.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-16.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-17.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-18.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-19.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-20.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-21.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-23.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-25.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-27.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-29.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05-30.lit', 0, 2, 0 ],
  [ 'testing/log/2021-05.lit', 0, 2, 0 ],
  [ 'testing/log/2021-06-01.lit', 0, 2, 0 ],
  [ 'testing/log/2021-06-02.lit', 0, 2, 0 ],
  [ 'testing/log/2021-w20.lit', 0, 2, 0 ],
  [ 'testing/log/2021-w21.lit', 0, 2, 0 ],
  [ 'testing/log/2021.lit', 0, 2, 0 ],
  [ 'testing/log/checkforinput.js', 0, 2, 0 ],
  [ 'testing/log/day.lit', 0, 2, 0 ],
  [ 'testing/log/today.js', 0, 2, 0 ],
  [ 'testing/paths.lit', 0, 2, 0 ],
  [ 'testing/private_files.lit', 0, 2, 0 ],
  [ 'testing/repl-output.svg', 0, 2, 0 ],
  [ 'testing/runkit-cors-proxy-endpoint.js', 0, 2, 0 ],
  [ 'testing/runkit-express-cors-proxy.js', 0, 2, 0 ],
  [ 'testing/runkit-repl-endpoint.js', 0, 2, 0 ],
  [ 'testing/runkit.lit', 0, 2, 0 ],
  [ 'testing/selection.lit', 0, 2, 0 ],
  [ 'testing/serviceworker.lit', 0, 2, 0 ],
  [ 'testing/test.txt', 0, 2, 0 ],
  [ 'testing/testing/repl-output.svg', 0, 2, 0 ],
  [ 'testing/web_workers.lit', 0, 2, 0 ],
  [ 'testing/worker.js', 0, 2, 0 ],
  [ 'testing/worker2.js', 0, 2, 0 ] ]
```



```js
const fs = lit.lfs 
const dir = lit.location.root
const git = lit.git
const FILE = 0, WORKDIR = 2, STAGE = 3

// list files with unstaged changes
return (async () => {
  const filenames = (await git.statusMatrix({ fs,dir}))
  .filter(row => row[WORKDIR] !== row[STAGE])
  .map(row => row[FILE])
  return filenames
})()
```
```>txt attached=true updated=1622725823403
[ '404.lit',
  'articles/ideas_for.lit',
  'cli/cli.lit',
  'cli/generate.js',
  'cli/index.js',
  'client/client.lit',
  'client/index.jsx',
  'client/style.styl',
  'client/styles/cell.styl',
  'client/styles/cellmenu.styl',
  'client/styles/codecell.styl',
  'client/styles/header.styl',
  'client/styles/viewers.styl',
  'components/App.jsx',
  'components/Backlinks.jsx',
  'components/Cell.jsx',
  'components/CellMenu.jsx',
  'components/CodeMeta.jsx',
  'components/Document.jsx',
  'components/Editor.jsx',
  'components/ErrorBoundry.jsx',
  'components/Header.jsx',
  'components/Icons.jsx',
  'components/Section.jsx',
  'components/SelectionContext.jsx',
  'components/Time.jsx',
  'components/base/Codeblock.jsx',
  'components/base/Link.jsx',
  'components/base/Paragraph.jsx',
  'components/components.lit',
  'components/utils/CodeMirrorSetup.js',
  'config.lit',
  'config.lit#github',
  'divergence_from_markdown.lit',
  'dummy/data.csv',
  'dummy/example.js',
  'dummy/example.svg',
  'dummy/plain.txt',
  'dummy/ðŸ”¥.lit',
  'execute_code_cells.lit',
  'filesystem/index.lit',
  'filesystem/overview.svg',
  'functions.lit',
  'index.js',
  'index.lit',
  'influences.svg',
  'meta/files_and_links.lit',
  'meta/github_workflows.lit',
  'meta/settings.lit',
  'meta/settings.lit#plantuml-viewer--repl',
  'meta/styling_and_themes.lit',
  'meta/styling_and_themes.lit#viewers',
  'meta/the_bazaar.lit',
  'meta.lit',
  'package.js',
  'parser/codeblocks.js',
  'parser/frontmatter.js',
  'parser/index.js',
  'parser/links.js',
  'parser/mdblocks.js',
  'parser/parser.lit',
  'parser/sections.js',
  'parser/transformers/js.js',
  'parser/utils/mdast-util-to-string.js',
  'persist_to_github.lit',
  'plugin_system.lit',
  'plugins/other/cors-proxy.js',
  'plugins/repls/module.js',
  'plugins/repls/search.js',
  'plugins/transformers/prettier.js',
  'plugins/viewers/diff.js',
  'plugins/viewers/esm.js',
  'plugins/viewers/md/admonitions.lit',
  'plugins/viewers/md/index.jsx',
  'plugins/viewers/meta.js',
  'plugins/viewers/plantuml/plantuml.lit',
  'plugins/viewers/search.js',
  'plugins/viewers/search2.js',
  'plugins/viewres/esm.js',
  'prismjs_and_a_simple_editor.lit',
  'renderer/Viewers.jsx',
  'renderer/difftestA.txt',
  'renderer/extractPlugins.js',
  'renderer/index.jsx',
  'renderer/plugins/viewers/diff.js',
  'renderer/renderer.lit',
  'renderer/transcludeCode.js',
  'renderer/utils/hast-util-code-handler.js',
  'renderer/viewers/graph/index.jsx',
  'renderer/viewers/md/admonitions.lit',
  'renderer/viewers/md/index.jsx',
  'renderer/viewers/meta.js',
  'renderer/viewers/plantuml.lit',
  'renderer/viewers.lit',
  'repl/index.js',
  'repl/index.lit',
  'repls.lit',
  'scratch_pad.lit',
  'scratch_pad.lit#viewers',
  'serviceworker.js',
  'taking_notes.lit',
  'testing/<',
  'testing/autoformatting_cell_source.lit',
  'testing/autoformatting_cell_source.lit#prettier',
  'testing/compactManifest1.json',
  'testing/compact_manifest.lit',
  'testing/cors_proxy.lit',
  'testing/custom-module.js',
  'testing/custom-module.mjs',
  'testing/esm_viewer_repl.lit',
  'testing/full.json',
  'testing/fuzzy_text_search.lit',
  'testing/gitworker.js',
  'testing/importing_js_modules.lit',
  'testing/index.lit',
  'testing/input_buffer.lit',
  'testing/isomorphic_git.lit',
  'testing/lightningfs.lit',
  'testing/links.lit',
  'testing/local_remote_files.lit',
  'testing/log/2021-05-09.lit',
  'testing/log/2021-05-11.lit',
  'testing/log/2021-05-12.lit',
  'testing/log/2021-05-13.lit',
  'testing/log/2021-05-15.lit',
  'testing/log/2021-05-16.lit',
  'testing/log/2021-05-17.lit',
  'testing/log/2021-05-18.lit',
  'testing/log/2021-05-19.lit',
  'testing/log/2021-05-20.lit',
  'testing/log/2021-05-21.lit',
  'testing/log/2021-05-23.lit',
  'testing/log/2021-05-25.lit',
  'testing/log/2021-05-27.lit',
  'testing/log/2021-05-29.lit',
  'testing/log/2021-05-30.lit',
  'testing/log/2021-05.lit',
  'testing/log/2021-06-01.lit',
  'testing/log/2021-06-02.lit',
  'testing/log/2021-w20.lit',
  'testing/log/2021-w21.lit',
  'testing/log/2021.lit',
  'testing/log/checkforinput.js',
  'testing/log/day.lit',
  'testing/log/today.js',
  'testing/paths.lit',
  'testing/private_files.lit',
  'testing/repl-output.svg',
  'testing/runkit-cors-proxy-endpoint.js',
  'testing/runkit-express-cors-proxy.js',
  'testing/runkit-repl-endpoint.js',
  'testing/runkit.lit',
  'testing/selection.lit',
  'testing/serviceworker.lit',
  'testing/test.txt',
  'testing/testing/repl-output.svg',
  'testing/web_workers.lit',
  'testing/worker.js',
  'testing/worker2.js',
  'throwaway/codevaluebug.lit',
  'utils/colors.js',
  'utils/console.js',
  'utils/fs-promises-gh-utils.js',
  'utils/fs-promises-utils.js',
  'utils/functions.js',
  'utils/git-commit-all.js',
  'utils/index.lit',
  'utils/momento.js',
  'utils/momento.lit',
  'utils/safe-encoders.js',
  'utils/unist-util-patch-source.js',
  'utils/unist-util-select-position.js',
  'viewers.lit',
  'wiki-links.lit' ]
```
### Add

```js

const fs = lit.lfs
const dir = lit.location.root

return (async ()=> {
  return await lit.git.add({
    fs,
    dir,
    filepath: '.'
  })
})()
```
```>txt attached=true updated=1622725837890
undefined
```



### Commit

```js

const fs = lit.lfs
const dir = lit.location.root

return (async ()=> {
const now = (new Date()).toISOString()
let sha = await lit.git.commit({
  fs,
  dir,
  message: `Auto commit (${now})`,
  author: {
    name: 'dotlit',
    email: 'bit@dotlit.org'
  }
})

console.log(sha)

})()
```
```>txt attached=true updated=1622725844680
46ceec21a687227f28f6f1ca3139b6a0cd37fad5
undefined
```

### Log

```js > text !collapse
const indentLines = str => str.split('\n').map( line => `      ${line}`).join('\n')

return (async ()=> {
  let commits = await lit.git.log({
     fs: lit.lfs, 
     dir: lit.location.root, 
     depth: 10
  })
  return "**Log**\n" + commits.map( x => `1. **\`${x.oid.slice(0,6)}\`**

${indentLines(x.commit.message)}`).join('\n')
})()
```
```>text !collapse attached=true updated=1620129831107
**Log**
1. **`d738da`**

      Auto commit testing/isomorphic_git.lit
      
      at: 2021-04-26T08:25:54.893Z
      includes the following 2 files:
      - testing/isomorphic_git.lit
      - utils/git-commit-all.js
      
1. **`498191`**

      Auto commit testing/isomorphic_git.lit
      
      at: 2021-04-26T08:16:04.689Z
      includes the following 5 files:
      - 404.lit,- execute_code_cells.lit,- testing/.gitignore,- testing/isomorphic_git.lit,- testing/lightningfs.lit
      
1. **`ef8bee`**

      Auto commit testing/isomorphic_git.lit
      
      at: 2021-04-25T23:25:46.517Z
      includes the following 1 files:
      - testing/isomorphic_git.lit
      
1. **`e146ec`**

      Auto commit testing/isomorphic_git.lit
      
      at: (2021-04-25T23:25:04.262Z)
      includes the following 1 files:
      - testing/isomorphic_git.lit
      
1. **`ccc6f8`**

      Auto commit testing/isomorphic_git.lit
      at: (2021-04-25T22:41:55.195Z)
      includes the following tk files...
      
1. **`d6a406`**

      Auto commit (2021-04-25T22:35:27.239Z)
      
1. **`2c1dcf`**

      Auto commit (2021-04-25T22:11:46.433Z)
      
1. **`769349`**

      Auto commit (${now})
      
1. **`74737c`**

      Commit All!!!
      
1. **`a90dc6`**

      Commit All!!!
      
```

### Diff

```js
const {git, lfs} = lit
return [git.walk, git.TREE]
```
```>txt attached=true updated=1620405199415
[ [Function: walk], [Function: TREE] ]
```
```js !collapse
return lit.git
  const commitHash1 = '0c40ed746ebe53cf744d78191d0bbc2941537280'
  const commitHash2 = 'b081f51cd27f54cf58915512006838d4eb67716b'
  const git = lit.git
  return git.walk({
    lit.lfs,
    lit.location.root,
    trees: [git.TREE({ ref: commitHash1 }), git.TREE({ ref: commitHash2 })],
    map: async function(filepath, [A, B]) {
     Â return filepath
    })
  )}
```
```>txt attached=true updated=1620405076140 !error
undefined
```

## Http client

```js

return (async fn =>{
  const http = await import('https://unpkg.com/isomorphic-git/http/web/index.js')
  return lit.git.getRemoteInfo({ http: http.default, url: 'https://github.com/isomorphic-git/isomorphic-git' })
})()

```
```>txt attached=true updated=1621336307318
undefined
```

## Web worker

```>js gitworker.js
/* eslint-env worker */
/* globals LightningFS git MagicPortal GitHttp */
importScripts(
  "https://unpkg.com/@isomorphic-git/lightning-fs",
  "https://unpkg.com/isomorphic-git@beta",
  "https://unpkg.com/isomorphic-git@beta/http/web/index.umd.js",
  "https://unpkg.com/magic-portal"
);

let fs = new LightningFS("fs", { wipe: true });
const portal = new MagicPortal(self);
self.addEventListener("message", ({ data }) => console.log(data));

(async () => {
  let mainThread = await portal.get("mainThread");
  let dir = "/";
  portal.set("workerThread", {
    setDir: async _dir => {
      dir = _dir;
    },
    clone: async args => {
      fs = new LightningFS("fs", { wipe: true });
      try{
      return git.clone({
        ...args,
        fs,
        http: GitHttp,
        dir,
        onProgress(evt) {
          mainThread.progress(evt);
        },
        onMessage(msg) {
          mainThread.print(msg);
        },
        onAuth(url) {
          console.log(url);
          return mainThread.fill(url);
        },
        onAuthFailure({ url, auth }) {
          return mainThread.rejected({ url, auth });
        }
      });
      } catch(err) {
        mainThread.failure({message}=err)
      }
    },
    listBranches: args => git.listBranches({ ...args, fs, dir }),
    listFiles: args => git.listFiles({ ...args, fs, dir }),
    log: args => git.log({ ...args, fs, dir })
  });
})();
```

```html #reference !collapse
<div>
  <input
    id="repository"
    type="text"
    style="width: 50em"
    title="Tip: enter a private repo URL to see the credentialManager plugin prompt for a password.",
    value="https://github.com/isomorphic-git/isomorphic-git",
  />
  <button type="button" id="cloneButton">Clone</button>
</div>
<div>
  <progress id="progress" value="0"></progress>
  <span id="progress-txt" style="font-family: monospace;"></span>
</div>
<output id="log" style="white-space: pre; font-family: monospace;"></output>

<script src="https://unpkg.com/magic-portal"></script>
<script>
  // alert("Running")
  const $ = id => document.getElementById(id);

  let worker = new Worker("gitworker.js");
  const portal = new MagicPortal(worker);
  worker.addEventListener("message", ({ data }) => console.log(data));

  const mainThread = {
    async print(message) {
      let text = $("log").textContent;
      if (message.endsWith("\r")) {
        // overwrite last line
        text = text.trim().replace(/.+$/, "");
      }
      text += message + "\n";
      $("log").textContent = text;
    },
    async progress(evt) {
      $("progress-txt").textContent = evt.phase;
      $("progress").value = evt.total ? evt.loaded / evt.total : 0.5;
      return;
    },
    async fill(url) {
      let username = window.prompt("Username:");
      let password = window.prompt("Password:");
      return { username, password };
    },
    async rejected({ url, auth }) {
      window.alert("Authentication rejected");
      return;
    }
  };
  portal.set("mainThread", mainThread, {
    void: ["print", "progress", "rejected"]
  });

```

```>script https://unpkg.com/magic-portal !below
https://unpkg.com/magic-portal
```

```js
return new Promise((resolve,reject) => {
  let myWorker;
  try {
    myWorker = new Worker('gitworker.js')
    myWorker.onmessage = (ev) => {
      if (ev.data === 'done') resolve(ev.data)
      else console.log(ev.data)
    }
    myWorker.onerror = (err) => {
      resolve({msg: "worker.onerror: " + err.message + " (" + err.filename + ":" + err.lineno + ")", err, err},)
    }
  } catch(err) {
    resolve({msg: "Caught err", err})
  }
  
})
```


```js
  // alert("Running")
  const $ = id => document.getElementById(id);

  let worker = new Worker("gitworker.js");
  const portal = new MagicPortal(worker);
  worker.addEventListener("message", ({ data }) => console.log(data));

  const mainThread = {
    async print(message) {
      console.log(message)
    },
    async progress(evt) {
      console.log(evt.phase, evt.total ? evt.loaded / evt.total : 0.5)
      return;
    },
    async fill(url) {
      let username = window.prompt("Username:");
      let password = window.prompt("Password:");
      return { username, password };
    },
    async rejected({ url, auth }) {
      window.alert("Authentication rejected");
      return;
    }, 
    async failure({message}) {
      alert("Failure: ", message)
      return
    },
  }
  portal.set("mainThread", mainThread, {
    void: ["print", "progress", "rejected", "failure"]
  });

async function doCloneAndStuff() {
    console.log("CLONE");

    await workerThread.setDir("/testing");

    await workerThread.clone({
      corsProxy: "https://cors.isomorphic-git.org",
      url: "https://GitHub.com/dotlitdev/dotlit"
    });
    console.log("CLONED!!")

    let branches = await workerThread.listBranches({ remote: "origin" });
    console.log("BRANCHES:\n" + branches.map(b => `  ${b}`).join("\n"))

    let files = await workerThread.listFiles({});
    console.log("FILES:\n" + files.map(b => `  ${b}`).join("\n"))

    let commits = await workerThread.log({});
    console.log("LOG:\n" +
      commits
        .map(c => `  ${c.oid.slice(0, 7)}: ${c.commit.message}`)
        .join("\n"))
  }

  return (async () => {
    const workerThread = await portal.get("workerThread");
    window.workerThread = workerThread
    window.worker = worker
    console.log(workerThread)

    console.log("ready")
    await doCloneAndStuff()

    
  })();
```
```>txt attached=true updated=1621342790497
true
```

```js
return workerThread.log({})
```
```>txt attached=true updated=1621343998003
{ setDir: [Function],
  clone: [Function],
  listBranches: [Function],
  listFiles: [Function],
  log: [Function] }
```





