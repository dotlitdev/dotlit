# CORS Proxy

Creating a CORS proxy server using [[testing/RunKit]]

```>js runkit-cors-proxy-endpoint.js !collapse #source
const util = require("util");

exports.endpoint = function (req, res) {
  res.writeHead(200, {
    "Content-Type": "application/json",
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "*",
  });

  res.end("WIP");
};

```

```>js runkit-express-cors-proxy.js #source
const express = require("@runkit/runkit/express-endpoint/1.0.0");
const cors = require("cors");
const request = require("request");

const app = express(exports);
app.use(cors());
app.use("*", (req, res) => {
  const target = req.header("Target-Domain");
  // res.end("WIP: " + target);
  req.pipe(request(target + req.url)).pipe(res);
});

```
```>js ../plugins/other/cors-proxy.js !plugin type=proxy id=corsProxy !collapse
if (typeof lit !== "undefined" && !window.__runkitCORSProxyEnpoint) {
  (async (fn) => {
    const rkEmbed = document.createElement("script");
    rkEmbed.onload = async (fn) => {
      const el = document.createElement("div");
      document.body.appendChild(el);
      el.setAttribute("style", "height:0;");
      RunKit.createNotebook({
        element: el,
        mode: "endpoint",
        onLoad: async (rk) => {
          window.__runkitCORSProxyEnpoint = await rk.getEndpointURL();
          document.body.removeChild(el);
        },
        evaluateOnLoad: true,
        source: await lit.fs.readFile("/testing/runkit-express-cors-proxy.js", {
          encoding: "utf8",
        }),
      });
    };
    rkEmbed.setAttribute("src", "https://embed.runkit.com");
    document.body.appendChild(rkEmbed);
  })();
}

export const proxy = async (src, meta, node) => {
  if (!window.__runkitCORSProxyEnpoint) {
    return "Still setting up proxy endpoint";
  } else {
    const getAndReplaceDomain = (originalUrl, newDomain) => {
      var url = new URL(originalUrl);
      const originalDomain = `${url.protocol}//${url.hostname}`;
      const regExp = new RegExp(`^${originalDomain}`);
      const str = originalUrl.replace(regExp, newDomain);
      return [str, originalDomain];
    };

    const proxyFetch = async (url, opts = {}) => {
      const [proxyUrl, target] = getAndReplaceDomain(
        url,
        window.__runkitCORSProxyEnpoint
      );
      opts.headers = opts.headers || {};
      opts.headers["Target-Domain"] = target;
      return fetch(proxyUrl, opts);
    };

    return proxyFetch;
  }
};

```


```js #test > text !collapse
return (async (fn) => {
  const proxyFetch = await lit.file.data.plugins.proxy.corsProxy();
  const resp = await proxyFetch('https://example.com')
  console.log(resp.status)
  return resp.text();
})();

```
```>text !collapse attached=true updated=1622242822858
200
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    body {
        background-color: #f0f0f2;
        margin: 0;
        padding: 0;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
        
    }
    div {
        width: 600px;
        margin: 5em auto;
        padding: 2em;
        background-color: #fdfdff;
        border-radius: 0.5em;
        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
    }
    a:link, a:visited {
        color: #38488f;
        text-decoration: none;
    }
    @media (max-width: 700px) {
        div {
            margin: 0 auto;
            width: auto;
        }
    }
    </style>    
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>

```
```uml repl=uml !collapse > svg #source
@startmindmap
* root node
	* some first level node
		* second level node
		* another second level node
	* another first level node
@endmindmap
```
```>svg #source attached=true updated=1622242967850
Error: Cross-origin redirection to http://www.plantuml.com/plantuml/svg/SoWkIImgoStCIybDBE3IKYZApozHoCjFIUNYr58epizDLKZBB2ekKSX9BKlDWKg0P5AJy_DIq4KJy_9BCbABiCaY937CSqW5MWvr0000 denied by Cross-Origin Resource Sharing policy: Origin https://dotlit.org is not allowed by Access-Control-Allow-Origin.
```




