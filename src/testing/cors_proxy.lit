# CORS Proxy

Creating a CORS proxy server using [[testing/RunKit]]



```>js runkit-express-cors-proxy.js #source
const express = require("@runkit/runkit/express-endpoint/1.0.0");
const cors = require("cors");
const request = require("request").defaults({ maxRedirects: 100 });

const app = express(exports);
app.use(cors());
app.use("/:path", (req, res) => {
  try {
    const target = req.header("Target-Domain");
    res.end("WIP: " + target + req.url);
    // req.pipe(request(target + req.url)).pipe(res);
  } catch (err) {
    res.end(err.message);
  }
});

```
```>js ../plugins/other/cors-proxy.js !plugin type=proxy id=corsProxy !collapse
if (typeof lit !== "undefined" && !window.__runkitCORSProxyEnpoint) {
  (async (fn) => {
    const rkEmbed = document.createElement("script");
    rkEmbed.onload = async (fn) => {
      const el = document.createElement("div");
      document.body.appendChild(el);
      el.setAttribute("style", "height:0;");
      RunKit.createNotebook({
        element: el,
        mode: "endpoint",
        onLoad: async (rk) => {
          window.__runkitCORSProxyEnpoint = await rk.getEndpointURL();
          document.body.removeChild(el);
        },
        evaluateOnLoad: true,
        source: await lit.fs.readFile("/testing/runkit-express-cors-proxy.js", {
          encoding: "utf8",
        }),
      });
    };
    rkEmbed.setAttribute("src", "https://embed.runkit.com");
    document.body.appendChild(rkEmbed);
  })();
}

export const proxy = async (src, meta, node) => {
  if (!window.__runkitCORSProxyEnpoint) {
    return "Still setting up proxy endpoint";
  } else {
    const getAndReplaceDomain = (originalUrl, newDomain) => {
      var url = new URL(originalUrl);
      const originalDomain = `${url.protocol}//${url.hostname}`;
      const regExp = new RegExp(`^${originalDomain}`);
      const str = originalUrl.replace(regExp, newDomain);
      return [str, originalDomain];
    };

    const proxyFetch = async (url, opts = {}) => {
      const [proxyUrl, target] = getAndReplaceDomain(
        url,
        window.__runkitCORSProxyEnpoint
      );
      opts.headers = opts.headers || {};
      opts.headers["Target-Domain"] = target;
      return fetch(proxyUrl, opts);
    };

    return proxyFetch;
  }
};

```


```js #test > text !collapse
return (async (fn) => {
  const proxyFetch = await lit.file.data.plugins.proxy.corsProxy();
  const resp = await proxyFetch('http://www.plantuml.com/plantuml/svg/SoWkIImgoStCIybDBE3IKYZApozHoCjFIUNYr58epizDLKZBB2ekKSX9BKlDWKg0P5AJy_DIq4KJy_9BCbABiCaY937CSqW5MWvr0000')
  console.log(resp.status)
  return resp.text();
})();

```
```>text !collapse attached=true updated=1622245233867
200
WIP: http://www.plantuml.com/svg/SoWkIImgoStCIybDBE3IKYZApozHoCjFIUNYr58epizDLKZBB2ekKSX9BKlDWKg0P5AJy_DIq4KJy_9BCbABiCaY937CSqW5MWvr0000
```
```uml repl=uml !collapse > svg #source
@startmindmap
* root node
	* some first level node
		* second level node
		* another second level node
	* another first level node
@endmindmap
```
```>svg #source attached=true updated=1622245313424
WIP: https://plantuml.com/svg/SoWkIImgoStCIybDBE3IKYZApozHoCjFIUNYr58epizDLKZBB2ekKSX9BKlDWKg0P5AJy_DIq4KJy_9BCbABiCaY937CSqW5MWvr0000
```






