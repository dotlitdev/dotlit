# Compact Manifest

Reducing the serialised size of a manifest of all files in a `.lit` notebook.

## Exploring

Trying out [compact-prefix-tree](https://github.com/sidvishnoi/compact-prefix-tree)
```js
return (async fn => {
  const {CompactPrefixTree} = await import('https://cdn.skypack.dev/compact-prefix-tree')

  const manifest = await fetch('/manifest.json').then(res => res.json())
  const keys = manifest.nodes.map(n=>n.id)
  const trie = new CompactPrefixTree(keys)

  const before = JSON.stringify(manifest.nodes.map(n=>null))
  const after = JSON.stringify(trie.T)
  // console.log(trie.T)
  await lit.fs.writeFile('/testing/compactManifest1.json', after, 'utf8')
  return `${before.length}->${after.length}. A ${100-(after.length/before.length*100)}% reduction in size.`
})()
```
```>txt attached=true updated=1622979669286
1006->4663. A -363.5188866799205% reduction in size.
```



Looking up a file, check for existence:
```js
return (async (fn) => {
  const { CompactPrefixTree, getWordsFromTrie } = await import(
    "https://cdn.skypack.dev/compact-prefix-tree"
  );

  const json = await fetch("/testing/compactManifest1.json").then((res) =>
    res.json()
  );
  // return json
  const keys = getWordsFromTrie(json);
  const trie = new CompactPrefixTree(Array.from(keys));
  return trie.prefix("testing/log/");
})();

```
```>txt  updated=1621380328935
{ prefix: 'testing/log/day.lit', isProper: true }
```
```>txt updated=1621380061074
{ prefix: '', isProper: false }
```

## A Start

```js
return (async (fn) => {
  const { CompactPrefixTree, getWordsFromTrie } = lit.utils.compactPrefixTree;

  const resp = await fetch("/compactManifest.json");
  const data = await resp.json();
  const keyset = getWordsFromTrie(data);
  const list = Array.from(keyset).map(k=>`/${k}`)
  console.log(list[50])
  return list.length
})();

```
```>txt attached=true updated=1622379267444
/parser/frontmatter.js
159
```

- [ ] Use the above to sync local file system instead of manifest.
```js #sync !collapse
// fetch all remote files and store
// locally if they don't already exist

const getList = async () => {
  const { CompactPrefixTree, getWordsFromTrie } = lit.utils.compactPrefixTree;

  const resp = await fetch("/compactManifest.json");
  const data = await resp.json();
  const keyset = getWordsFromTrie(data);
  const list = Array.from(keyset).map((k) => `/${k}`);
  return list;
};

return (async (fn) => {
  const t = Date.now();
  const p = lit.utils.path;
  const writePLocal = async (...args) => {};

  const list = await getList();

  const existed = []
  const duds = [];
  const synced = [];
  const errors = [];
  const res = await Promise.all(
    list.map(async (n) => {
      try {
        const stats = await lit.fs
          .readStat(n)
          .then((x) => x)
          .catch((err) => {
            duds.push(n);
            return { local: {}, remote: {} };
          });
        if (stats.local.stat) {
          existed.push(n)
        }
        else if (stats.remote.stat) {
          await lit.fs.writeFile(n, stats.remote.value, {
            localOnly: true,
            encoding: "utf8",
          });
          synced.push(n);
        } else {
          errors.push(n)
        }

        return n;
      } catch (err) {
        errors.push(n + " : " + err.message);
      }
    })
  );
  console.log(
    `Synced ${synced.length + existed.length}/${list.length} files in ${
      (Date.now() - t) / 1000
    } seconds. Fetched: ${synced.length} Duds: ${duds.length} Errors: ${errors.length} Skipped: ${existed.length}`
  );
  return { duds, errors };
})();

```
```>txt attached=true updated=1622380268774
Synced 156/159 files in 3.242 seconds. Fetched: 0 Duds: 0 Errors: 3 Skipped: 156
{ duds: [],
  errors: 
   [ '/testing/uploads/B98FC982-EB37-427B-A7D7-D872628323C0.png',
     '/testing/uploads/graph.png',
     '/testing/uploads/EC0FF74E-93A5-496D-A5A7-1F2FC1885F77.png.png' ] }
```


