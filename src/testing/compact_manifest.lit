# Compact Manifest

Reducing the serialised size of a manifest of all files in a `.lit` notebook.

## Exploring

Trying out [compact-prefix-tree](https://github.com/sidvishnoi/compact-prefix-tree)
```js
return (async fn => {
  const {CompactPrefixTree} = await import('https://cdn.skypack.dev/compact-prefix-tree')

  const manifest = await fetch('/manifest.json').then(res => res.json())
  const keys = manifest.nodes.map(n=>n.id)
  const trie = new CompactPrefixTree(keys)

  const before = JSON.stringify(keys)
  const after = JSON.stringify(trie.T)
  // console.log(trie.T)
  await lit.fs.writeFile('/testing/compactManifest1.json', after, 'utf8')
  return `A ${after.length/before.length*100}% reduction in size.`
})()
```
```>txt attached=true updated=1622378699194
A 95.31428571428572% reduction in size.
```



Looking up a file, check for existence:
```js
return (async (fn) => {
  const { CompactPrefixTree, getWordsFromTrie } = await import(
    "https://cdn.skypack.dev/compact-prefix-tree"
  );

  const json = await fetch("/testing/compactManifest1.json").then((res) =>
    res.json()
  );
  // return json
  const keys = getWordsFromTrie(json);
  const trie = new CompactPrefixTree(Array.from(keys));
  return trie.prefix("testing/log/");
})();

```
```>txt  updated=1621380328935
{ prefix: 'testing/log/day.lit', isProper: true }
```
```>txt updated=1621380061074
{ prefix: '', isProper: false }
```

## A Start

```js
return (async (fn) => {
  const { CompactPrefixTree, getWordsFromTrie } = lit.utils.compactPrefixTree;

  const resp = await fetch("/compactManifest.json");
  const data = await resp.json();
  const keyset = getWordsFromTrie(data);
  const list = Array.from(keyset).map(k=>`/${k}`)
  console.log(list[50])
  return list.length
})();

```
```>txt attached=true updated=1622379267444
/parser/frontmatter.js
159
```

- [ ] Use the above to sync local file system instead of manifest.
```js #sync !collapse
// fetch all remote files and store
// locally if they don't already exist 


return (async fn => {
  const t = Date.now()
  const p = lit.utils.path
  const writePLocal = async (...args) => {
    
  }

  const m = await fetch('/manifest.json')
                  .then(res => res.json())
                  .catch(e=>({nodes:[]}))

 Â const duds = []
  const synced = []
  const errors = []
  const res = await Promise.all(m.nodes.map( async n => {
    try {
    n.stats = await lit.fs.readStat(n.id)
      .then(x=>x)
      .catch(err=>{
          duds.push(n.id)
          return {local: {}, remote: {}}
      })

    if (!n.stats.local.stat && n.stats.remote.stat) {
        await lit.fs.writeFile(n.id, n.stats.remote.value, {localOnly: true, encoding: 'utf8'})
        synced.push(n)
    }
    
    return n
    } catch(err) {errors.push(n.id + " : " + err.message)} 
  } ))
  console.log(`Synced ${synced.length}/${m.nodes.length} files in ${(Date.now() - t)/1000} seconds. Duds: ${duds.length} Errors: ${errors.length}`)
  return {duds, errors}
})()

```
```>txt attached=true updated=1622320934287
Synced 9/173 files in 1.789 seconds. Duds: 32 Errors: 1
{ duds: 
   [ 'links.js',
     '/testing/log/2021-w22.lit',
     '/utils/unist-patch-source.lit',
     '/distributed_knowledge_graph.lit',
     '/transfomers.lit',
     '/testing/log/2021-w23.lit',
     '/meta/files_and_links.lit',
     'runkit-express-cors-proxy.js',
     '/experimental_social_network.lit',
     '/agora.lit',
     '/viewers.lit',
     'meta/.github/workflows/npm-publish.yaml',
     'viewers/meta.js',
     '/unified.lit',
     '/undefined.lit',
     'filename',
     'runkit-repl-endpoint.js',
     'log/checkforinput.js',
     'worker2.js',
     '/markdown.lit',
     'renderer/file.txt',
     'rk.jsx',
     'worker.js',
     '/utils/fs.lit',
     '/remark.lit',
     'gitworker.js',
     '/utils/uri.lit',
     'fsviewer.jsx',
     '../.github/workflows/generate.yaml',
     'log/today.js',
     'custom-module.mjs',
     '/components.lit' ],
  errors: [ '../serviceworker.js : Unable to normalize path - traverses above root directory' ] }
```

