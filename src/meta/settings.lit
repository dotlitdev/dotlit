# `.lit` Settings

This file is special in that it is parsed and any `!plugins` it contains are pre-populated for all other `.lit` documents.

Move or copy any document specific `!plugin`s here to have them apply to all documents.

## Table of Contents


## Settings 

Not yet Implemented the below are mocks while we decide on the interface. Just another kind of `!plugin`? data exports could work the same...

```js !setting ns=lit
export const setting = {
  base: '/'
}
```



```js !setting ns=github
export const setting = {
  username: 'dotlitdev',
  repo: 'dotlit',
  branch: 'main',
  base: 'src/',
}
```

## ðŸ”Œ Plug-ins

Not yet Implemented, to replace existing implementation of `!viewer` and `!transformer`, with `!plugin type=xxx`

### `type`s

- [ ] `parser`: 
- [ ] `renderer`: 
- [x] `viewer`: 
- [ ] `transformer`:
- [ ] `repl`:

```js
return lit.file.data.plugins
```
```>txt attached=true updated=1620169400788
{ unknown: {},
  parser: { 'example-parser': [Function: parser] },
  renderer: { 'example-renderer': [Function: renderer] },
  viewer: 
   { 'example-viewer': [Function: viewer],
     uml: [Function: viewer] },
  data: { 'example-data': { foo: 'bar' } },
  repl: { uml: [Function: repl] } }
```

### Examples

```js !plugin id=example-parser
export const parser = (...args) => {
  return (tree) => {
    tree.data = file.data || {}
    tree.data__examplePluginActive = true
  }
}
```
```js !plugin id=example-renderer
export const renderer = (...args) => {
  return (tree,file) => {
    file.data = file.data || {}
    file.data.__examplePluginActive = true
  }
}
```
```js !plugin of=example-viewer
export const viewer = ({node, React}) => {
  return "Example viewer plugin used."
}
```
```js !plugin type=data id=example-data
export const data = {
  foo: "bar"
}
```

### My plugins

#### Plant`uml` viewer & repl
Uses [plantuml.com](https://plantuml.com) to create `svg` images from `uml` source. Not included as a default viewer due to the external dependency, but it's great! See [[renderer/viewers/plantuml]] for more.

*Implementation:*

```js !plugin of=uml !collapse #viewer type=repl

async function encodePlantUML(src) {
      console.log("encoding", src)
      const module = await import("https://cdn.skypack.dev/plantuml-encoder");
      const encoded = module.encode(src) //.replace(/\n/g, '\\n'))
      console.log(encoded)
      return encoded
}

const getEndpoint = (format, encoded) => `https://plantuml.com/plantuml/${format}/` + encoded

export const repl = (src, meta, node) => {
  const format = (meta && meta.format) || 'svg'
  // return JSON.stringify(node)
  return "TODO: " + getEndpoint(format, "Todo")
}

export const viewer = ({node, React}) => {
  const rc = React.createElement
  const {useState, useEffect} = React
  const meta = node.properties 
               && node.properties.meta

  const format = (meta && meta.format) || 'svg'
  const [url, setUrl] = useState(null)

  const src = node.value
  useEffect(async ()=> {
    const encoded = await encodePlantUML(node.data.value)
    const url = getEndpoint(format, encoded)
    setUrl(url)
  },[src])

  return rc('div', {
    className: 'lit-viewer-plantuml2',
  }, url ? rc('img', {
    src: url,
  }) : "Loading...")
}
```





*Example usage:*

```>uml format=png repl=uml
@startmindmap
* root node
	* some first level node
		* second level node
		* another second level node
	* another first level node
@endmindmap
```
```>txt attached=true updated=1620203682413
{"type":"element","tagName":"cell","properties":{"class":"cell"},"children":[{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":"","meta":{"attrs":{"format":"png","repl":"uml"},"lang":"uml","format":"png","repl":"uml","isOutput":true,"hasOutput":false,"hasSource":false,"raw":">uml format=png repl=uml"}},"children":[{"type":"text","value":"\n"}],"position":{"start":{"line":143,"column":1,"offset":3322},"end":{"line":154,"column":4,"offset":5478}},"data":{"value":"@startmindmap\n* root node\n\t* some first level node\n\t\t* second level node\n\t\t* another second level node\n\t* another first level node\n@endmindmap\n","meta":"format=png repl=uml","__customHastCodeHandler":true},"value":"@startmindmap\n* root node\n\t* some first level node\n\t\t* second level node\n\t\t* another second level node\n\t* another first level node\n@endmindmap\n"}],"position":{"start":{"line":143,"column":1,"offset":3322},"end":{"line":154,"column":4,"offset":5478}}},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":"","meta":{"attrs":{"attached":"true","updated":"1620203681626"},"lang":"txt","attached":"true","updated":"1620203681626","isOutput":true,"hasOutput":false,"hasSource":false,"raw":">txt attached=true updated=1620203681626"}},"children":[{"type":"text","value":"\n"}],"position":{"start":{"line":152,"column":1,"offset":3497},"end":{"line":154,"column":4,"offset":5478}},"data":{"value":"{\"type\":\"element\",\"tagName\":\"cell\",\"properties\":{\"class\":\"cell\"},\"children\":[{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":\"\",\"meta\":{\"attrs\":{\"format\":\"png\",\"repl\":\"uml\"},\"lang\":\"uml\",\"format\":\"png\",\"repl\":\"uml\",\"isOutput\":true,\"hasOutput\":false,\"hasSource\":false,\"raw\":\">uml format=png repl=uml\"}},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"}],\"position\":{\"start\":{\"line\":143,\"column\":1,\"offset\":3322},\"end\":{\"line\":154,\"column\":4,\"offset\":3589}},\"data\":{\"value\":\"@startmindmap\\n* root node\\n\\t* some first level node\\n\\t\\t* second level node\\n\\t\\t* another second level node\\n\\t* another first level node\\n@endmindmap\\n\",\"meta\":\"format=png repl=uml\",\"__customHastCodeHandler\":true},\"value\":\"@startmindmap\\n* root node\\n\\t* some first level node\\n\\t\\t* second level node\\n\\t\\t* another second level node\\n\\t* another first level node\\n@endmindmap\\n\"}],\"position\":{\"start\":{\"line\":143,\"column\":1,\"offset\":3322},\"end\":{\"line\":154,\"column\":4,\"offset\":3589}}},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":\"\",\"meta\":{\"attrs\":{\"attached\":\"true\",\"updated\":\"1620203602199\"},\"lang\":\"txt\",\"attached\":\"true\",\"updated\":\"1620203602199\",\"isOutput\":true,\"hasOutput\":false,\"hasSource\":false,\"raw\":\">txt attached=true updated=1620203602199\"}},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"}],\"position\":{\"start\":{\"line\":152,\"column\":1,\"offset\":3497},\"end\":{\"line\":154,\"column\":4,\"offset\":3589}},\"data\":{\"value\":\"TODO: https://plantuml.com/plantuml/svg/Todo\\n\",\"meta\":\"attached=true updated=1620203602199\",\"__customHastCodeHandler\":true},\"value\":\"TODO: https://plantuml.com/plantuml/svg/Todo\\n\"}],\"position\":{\"start\":{\"line\":152,\"column\":1,\"offset\":3497},\"end\":{\"line\":154,\"column\":4,\"offset\":3589}}}],\"position\":{\"start\":{\"line\":143,\"column\":1,\"offset\":3322},\"end\":{\"line\":154,\"column\":4,\"offset\":3589}}}\n","meta":"attached=true updated=1620203681626","__customHastCodeHandler":true},"value":"{\"type\":\"element\",\"tagName\":\"cell\",\"properties\":{\"class\":\"cell\"},\"children\":[{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":\"\",\"meta\":{\"attrs\":{\"format\":\"png\",\"repl\":\"uml\"},\"lang\":\"uml\",\"format\":\"png\",\"repl\":\"uml\",\"isOutput\":true,\"hasOutput\":false,\"hasSource\":false,\"raw\":\">uml format=png repl=uml\"}},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"}],\"position\":{\"start\":{\"line\":143,\"column\":1,\"offset\":3322},\"end\":{\"line\":154,\"column\":4,\"offset\":3589}},\"data\":{\"value\":\"@startmindmap\\n* root node\\n\\t* some first level node\\n\\t\\t* second level node\\n\\t\\t* another second level node\\n\\t* another first level node\\n@endmindmap\\n\",\"meta\":\"format=png repl=uml\",\"__customHastCodeHandler\":true},\"value\":\"@startmindmap\\n* root node\\n\\t* some first level node\\n\\t\\t* second level node\\n\\t\\t* another second level node\\n\\t* another first level node\\n@endmindmap\\n\"}],\"position\":{\"start\":{\"line\":143,\"column\":1,\"offset\":3322},\"end\":{\"line\":154,\"column\":4,\"offset\":3589}}},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":\"\",\"meta\":{\"attrs\":{\"attached\":\"true\",\"updated\":\"1620203602199\"},\"lang\":\"txt\",\"attached\":\"true\",\"updated\":\"1620203602199\",\"isOutput\":true,\"hasOutput\":false,\"hasSource\":false,\"raw\":\">txt attached=true updated=1620203602199\"}},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"}],\"position\":{\"start\":{\"line\":152,\"column\":1,\"offset\":3497},\"end\":{\"line\":154,\"column\":4,\"offset\":3589}},\"data\":{\"value\":\"TODO: https://plantuml.com/plantuml/svg/Todo\\n\",\"meta\":\"attached=true updated=1620203602199\",\"__customHastCodeHandler\":true},\"value\":\"TODO: https://plantuml.com/plantuml/svg/Todo\\n\"}],\"position\":{\"start\":{\"line\":152,\"column\":1,\"offset\":3497},\"end\":{\"line\":154,\"column\":4,\"offset\":3589}}}],\"position\":{\"start\":{\"line\":143,\"column\":1,\"offset\":3322},\"end\":{\"line\":154,\"column\":4,\"offset\":3589}}}\n"}],"position":{"start":{"line":152,"column":1,"offset":3497},"end":{"line":154,"column":4,"offset":5478}}}],"position":{"start":{"line":143,"column":1,"offset":3322},"end":{"line":154,"column":4,"offset":5478}}}
```


