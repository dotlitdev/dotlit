# `.lit` Settings

This file is special in that it is parsed and any `!plugins` it contains are pre-populated for all other `.lit` documents.

Move or copy any document specific `!plugin`s here to have them apply to all documents.

## Table of Contents


## Settings 

Not yet Implemented the below are mocks while we decide on the interface. Just another kind of `!plugin`? data exports could work the same...

```js !setting ns=lit
export const setting = {
  base: '/'
}
```



```js !setting ns=github
export const setting = {
  username: 'dotlitdev',
  repo: 'dotlit',
  branch: 'main',
  base: 'src/',
}
```





```js
const all = lit.file.data.plugins
return Object.keys(all).map(t=>`${t} (${Object.keys(all[t]).length})`)
```
```>txt attached=true updated=1620256234305
[ 'unknown (0)',
  'parser (1)',
  'renderer (1)',
  'viewer (2)',
  'data (1)',
  'repl (1)' ]
```








## My plugins
```js !plugin of=json
// see https://github.com/mac-s-g/react-json-view
import reactJsonView from 'https://cdn.skypack.dev/react-json-view'

export const viewer = ({node, React}) => {
  const rc = React.createElement
  let obj
  try { obj = JSON.parse(node.data.value)
  } catch(err) {}
  return rc( 'div', {className: 'json-viewer', onClick:ev=>{ev.preventDefault(); ev.stopPropagation(); return false;}}, rc(reactJsonView, {
    src: obj,
    collapseStringsAfterLength: 20,
    collapsed: node.properties.meta.collapse || 1,
  }))
}
```

#### Plant`uml` viewer & repl
Uses [plantuml.com](https://plantuml.com) to create `svg` images from `uml` source. Not included as a default viewer due to the external dependency, but it's great! See [[renderer/viewers/plantuml]] for more.

*Implementation:*

```js !plugin of=uml !collapse #viewer type=repl

async function encodePlantUML(src) {
      console.log("encoding", src)
      const module = await import("https://cdn.skypack.dev/plantuml-encoder");
      const encoded = module.encode(src) //.replace(/\n/g, '\\n'))
      console.log(encoded)
      return encoded
}

const getEndpoint = (format, encoded) => `https://plantuml.com/plantuml/${format}/` + encoded

export const repl = async (src, meta, node) => {
  const format = (meta && meta.format) || 'svg'
  try {
    const encoded = await encodePlantUML(src)
    const url = getEndpoint(format, encoded)
    const resp = await fetch(url)
    if (meta.writefile) {
    
    }
    return resp.status
  } catch(err) {
    return "Error: " + err.message
  }
}

export const viewer = ({node, React}) => {
  const rc = React.createElement
  const {useState, useEffect} = React
  const meta = node.properties 
               && node.properties.meta

  const format = (meta && meta.format) || 'svg'
  const [url, setUrl] = useState(null)

  const src = node.value
  useEffect(async ()=> {
    const encoded = await encodePlantUML(node.data.value)
    const url = getEndpoint(format, encoded)
    setUrl(url)
  },[src])

  return rc('div', {
    className: 'lit-viewer-plantuml2',
  }, url ? rc('img', {
    src: url,
  }) : "Loading...")
}
```





*Example usage:*

```uml !below repl=uml > img
@startmindmap
* root node
	* some first level node
		* second level node
		* another second level node
	* another first level node
@endmindmap
```


```>img updated=1620216498131
Error: Cross-origin redirection to http://www.plantuml.com/plantuml/svg/SoWkIImgoStCIybDBE3IKYZApozHoCjFIUNYr58epizDLKZBB2ekKSX9BKlDWKg0P5AJy_DIq4KJy_9BCbABiCaY937CSqW5MWvr0000 denied by Cross-Origin Resource Sharing policy: Origin https://dotlit.org is not allowed by Access-Control-Allow-Origin.
```
Urgh, CORS... perhaps [this](https://medium.com/@albertogasparin/manipulating-cross-origin-images-with-html-canvas-1e3e8780964c) will help?