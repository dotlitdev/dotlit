# `.lit` Settings

Not yet Implemented the below are mocks while we decide on the interface. Just another kind of `!plugin`? data exports could work the same...

```js !setting ns=lit
export const setting = {
  base: '/'
}
```



```js !setting ns=github
export const setting = {
  username: 'dotlitdev',
  repo: 'dotlit',
  branch: 'main',
  base: 'src/',
}
```

## ðŸ”Œ Plug-ins

Not yet Implemented, to replace existing implementation of `!viewer` and `!transformer`, with `!plugin type=xxx`

### `type`s

- [ ] `parser`: 
- [ ] `renderer`: 
- [x] `viewer`: 
- [ ] `transformer`:

```js
return lit.file.data.plugins
```
```>txt attached=true updated=1620085461395
{ unknown: {},
  parser: { 'example-parser': [Function: parser] },
  renderer: { 'example-renderer': [Function: renderer] },
  viewer: { 'example-viewer': [Function: viewer] },
  data: {} }
```

### Examples

```js !plugin id=example-parser
export const parser = (...args) => {
  return (tree) => {
    tree.data = file.data || {}
    tree.data__examplePluginActive = true
  }
}
```
```js !plugin id=example-renderer
export const renderer = (...args) => {
  return (tree,file) => {
    file.data = file.data || {}
    file.data.__examplePluginActive = true
  }
}
```
```js !plugin of=example-viewer
export const viewer = ({node, React}) => {
  return "Example viewer plugin used."
}
```
```js !plugin type=data id=example-data
export const data = {
  foo: "bar"
}
```