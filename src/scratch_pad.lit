# üî• Scratch ‚ö†Ô∏è Pad üî¨

> Scratch pad to view **Markdown** output and *emergent* behaviour.

## Table of Contents

## ‚úçÔ∏è Inline Markdown

### Basics

`.lit` is a plain text document format, really it's just **Markdown**. But with *Sections*, *Cells*, <Ken>interactive</kbd> `code` blocks and _meta_ programming over its own `AST`.

### üîó Links

[Standard](#) links, [[wiki]] links, inline [references] and footnotes[^1]

[references]: https://example.com "Example"
[^1]: footnote 
    With multi line `content`

## üß≠ Headings (h2)
### Sub headings (h3)
#### little (h4)
##### tiny (h5)
###### smallest (h6)
####### tooooo small (h6+)

## ‚òëÔ∏è Lists

### Basics

* List
  - styles
  - [ ] not done
    - [x] done
  1. Foo
     1. Bar
     1. Qux

### Lists with nested blocks

- # List Item heading
  
  With additional 

      Content...


## ‚ú≥Ô∏è Code

### Basic code blocks

Lines indented with 4 spaces, are plain code blocks without any syntax highlighting or additional behaviour.

    A plain code block

### Fenced code blocks

Blocks preceded and suffixed with 3 backticks ie "```" with additional metadata being placed after the back ticks on the opening line.

    ```lang filename.ext #tag !directive attr=val
    ...
    ```

```
A fenced code block
```

```js example.js #example #test !exec !above repl=browser
A named and configured fenced code block
```

#### Outputs and Transcludes

A cell which references a source `txt < ./source.txt` will be transcluded into the view.

```lit < üî•.lit
will be replaced by above source
```

A cell which defines a filename `js index.js` will the mirrored to the filesystem.

```lit example.svg
<text>Foo</text>
```

A cell which defines an output `js > data.csv` will output to the filesystem and the document when executed.

```lit > data.csv
id,name,amount
17494,Alice,9001
245,Bob,2000
```
