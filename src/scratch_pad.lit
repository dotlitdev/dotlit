# üî• Scratch ‚ö†Ô∏è Pad üî¨

> Scratch pad to view **Markdown** output and *emergent* behaviour.

## Table of Contents

## ‚úçÔ∏è Inline Markdown

### Basics

`.lit` is a plain text document format, really it's just **Markdown**. But with *Sections*, *Cells*, <Ken>interactive</kbd> `code` blocks and _meta_ programming over its own `AST`.

### üîó Links

[Standard](#) links, [[wiki]] links, inline [references] and footnotes[^1]


#### WikiLinks

- [x] with slashes: [[utils/fs]] 
- [ ] with fragments: [[utils/uri#fragments]]
  - [ ] Hoist fragment 

[references]: https://example.com "Example"
[^1]: footnote 
    With multi line `content`

## üß≠ Headings (h2)
### Sub headings (h3)
#### little (h4) {#custom-id}
##### tiny (h5)
###### smallest (h6)
####### tooooo small (h6+)

## ‚òëÔ∏è Lists

### Basics

* List
  - styles
  - [ ] not done
    - [x] done
  1. Foo
     1. Bar
     1. Qux

### Lists with nested blocks

- # List Item heading
  
  With additional 

  > block elements

      Content...


## ‚ú≥Ô∏è Code

### Basic code blocks

Lines indented with 4 spaces, are plain code blocks without any syntax highlighting or additional behaviour.

    A plain code block

### Fenced code blocks

Blocks preceded and suffixed with 3 backticks ie "```" with additional metadata being placed after the back ticks on the opening line.

    ```lang filename.ext #tag !directive attr=val


    
    ```



```js example.js #example #test !exec !above repl=node
// A named and configured fenced code block which is to be executed in a yet to be implemented nodejs repl.
```

```uri http://example.com
```

#### Tags and directives

Reserved directives include: `!inline` `!above` or for example `!onload` ...

```html !inline
<em>foo</em>
```

#### Attributes

For now the only reserved attribute is `repl` used to define what remote REPL to execute code against.

```txt repl=echo
pipe to echo binary
```

Potentially to include `updatedAt` and or a reference to source cell for outputs in order to maintain a connection with code that produced the output.

#### Outputs and Transcludes

Metadata which references a source `lang < ./file.ext` will be transcluded into the view.

```lit < üî•.lit
will be replaced by above source
```

Metadata which defines a filename `lang file.ext` will be mirrored to the filesystem.

```svg example.svg
<text>Foo</text>
```

Metadata which defines an output `lang > file.ext` will output to the filesystem and the document when executed[^2].

[^2]: `REPL` still to be reimplemented.

```csv > data.csv
id,name,amount
17494,Alice,9001
245,Bob,2000
```
```> csv data.csv
id,name,amount
17494,Alice,9001
245,Bob,2000
```

#### Viewers

When a cell is an Output or has the directive `!inline` and a lang, file-extension, or the explicit `viewer=xxx` attribute, for which a Viewer exists (TBD) then the source will be shown using the viewer and source only visible on edit.

```>json
{"json": "viewer tbd"}
```

```>svg
<svg width="100" height="100">
  <circle cx="50" cy="50" r="40" stroke="green" stroke-width="4" fill="yellow" />
</svg>
```

```>uri
https://example.com
```

Suggested or planned viewers

- [ ] JSON
- [x] HTML (inclined)
- [x] SVG (basically the above)
- [ ] CSV: Table
- [ ] URI: Iframe
- [ ] CSS: Style
- [ ] JS: Script
