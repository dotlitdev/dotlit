# ðŸ”Œ Plugin system

`.lit` has a flexible Plugin system, primarily to allow the author to create custom [[Viewers]] and [[REPLs]] but also includes various other types.

## Table of Contents

## Anatomy of a plugin 

`.lit` plugins are defined using the `!plugin` directive on a fenced code block.

    ```js !plugin id=foo
    // implementation...
    ```

Initially it is assumed that a plugin is implemented in `js` but due to the flexibility this likely won't remain the case for long.



## Types

- [ ] `parser`: 
- [ ] `renderer`: 
- [x] `viewer`: 
- [ ] `transformer`:
- [x] `repl`:

```js #list !collapse > json
const all = lit.file.data.plugins
return Object.keys(all).map(t=>`${t} (${Object.keys(all[t]).length})`)
```
```>txt attached=true updated=1620216877148
[ 'unknown (0)',
  'parser (1)',
  'renderer (1)',
  'viewer (2)',
  'data (1)',
  'repl (1)' ]
```


### Viewer

```js !plugin of=example-viewer
export const viewer = ({node, React}) => {
  return "Example viewer plugin used."
}
```

### Parser

```js !plugin id=example-parser
export const parser = (...args) => {
  return (tree) => {
    tree.data = file.data || {}
    tree.data__examplePluginActive = true
  }
}
```
### Renderer



```js !plugin id=example-renderer
export const renderer = (...args) => {
  return (tree,file) => {
    file.data = file.data || {}
    file.data.__examplePluginActive = true
  }
}
```
### Custom

```js !plugin type=data id=example-data
export const data = {
  foo: "bar"
}
```







