<!-- data
title: .lit 
-->

# `.lit`

[![Open Source](https://img.shields.io/badge/üå±-Open%20Source-green)](https://github.com/dotlitdev/dotlit)
[![npm (scoped)](https://img.shields.io/npm/v/@dotlit/dotlit)](https://npmjs.org/@dotlit/dotlit)
[![Deploy](https://github.com/dotlitdev/dotlit/actions/workflows/generate.yaml/badge.svg)](https://github.com/dotlitdev/dotlit/actions/workflows/generate.yaml)

`.lit` is a plain text document format, really it's just **Markdown**. But with *Sections*, *Cells*, <kbd>interactive</kbd> & *executable* `code` blocks and _meta_ programming over its own <abbr>AST</abbr>.

## Table of Contents

## About

```>md !warn
‚ö†Ô∏è **`.lit`** is still a *Work in progress*.

This iteration is a from-scratch rewrite of an [initial prototype], with many features yet to be re-implemented.
```

**üß™ [[Scratch ‚ö†Ô∏è Pad üî¨]]**

```graph !inline < manifest.json
```

**‚òëÔ∏è To Do** or *in progress*
- [ ] local git repo [[testing/Isomorphic Git]]
- [ ] fragments in [[wiki-links]]
- [ ] remove global fetch hack for nodejs and bundle properly with webpack
- [ ] [[testing/Local & Remote files]]
- [x] [[testing/ServiceWorker]]
- [x] [[testing/Private Files]]
- [[meta/Settings]]
- [ ] [[testing/Selection]]
- [[testing/Input Buffer]]

**üêú Bugs**
- [ ] Next/sibling sections are getting nested
- [ ] Transcluding failure breaks the page see [[meta/Github workflows]]
- [ ] Inline <abbr>html</abbr> in Markdown source not surviving to final rendered output.

**‚úÖ Done**
- [x] [[Execute `code` cells]]
- Check lists ([[gfm]] Github Flavoured Markdown)
- [x] [[Persist to GitHub]]

## Getting Started


### Starter template repo

While `.lit` is still under active development and not quite ready for prime time, you can fork this [GitHub template repository](https://github.com/dotlitdev/dotlit-starter) to deploy your own "instance" hosted on GitHub Pages.

### From the command line

To use `.lit` from the command line, see usage and documentation [here](cli/cli.lit).

## Documentation 

Currently my [[Scratch ‚ö†Ô∏è Pad üî¨]] is the closest thing to documentation, start there for now.

### Divergence from Markdown

Generally `.lit` is backward compatible with Markdown. That is to say that a valid Markdown file is a valid `.lit` file and vice versa.

The primary difference being that a basic/normal Markdown viewer will lack many of the niceties afforded by `.lit` but the intent is that it should still render *correctly* for the reader.

**Key differences**

- **Frontmatter**: We consider existing frontmatter implementations *Not* backward compatable with basic Markdown. Primarily due to the fact that they are rendered at all (and badly) by renderers that do not support frontmatter. Therefor we define frontmatter as HTML Comments with a `data` prefix.

      <!-- data
      title: foo
      -->

- **Code block meta**:

      ```lang [...meta]
      content
      ```

- **Wiki-Links**:

## Implementation

### Parser

Built atop the unified ecosystem, specifically remark, which takes `.lit` Markdown source and outputs `.lit` AST (Abstract Syntax Tree). [Read More](parser/parser.lit)

### Renderer

The default render output is `html` which includes client-side `javascript` which hydrates a React application. [Read More](renderer/renderer.lit)

### Client

The static html generated by `.lit` does not *require* JavaScript to function for the reader. But by default includes a [[client/client]] which re-hydrates the page to become fully interactive, enabling editing of the original document in place. See [[components/components]] for implementation details.

### Plugins

`.lit` has a flexible [[Plugin system]], primarily to allow the author to create custom [[Viewers]] and [[REPLs]] but also includes other types.



### Filesystem

Implemented on top of [[testing/LightningFS]] on the client side with pass through reads and writes to a remote backend (currently GitHub API see [[persist to GitHub]]). Additionally see [[testing/Isomorphic Git]] for experimental `git` support.

### Utils

Collection of utilities used throughout `.lit` which should probably be extracted and published as individual packages. [Read more](utils/index.lit)



## Meta

- [[404]]
- [[meta/GitHub Workflows]]
- [[meta/Styling and Themes]]
- [[meta/Files and Links]]
- [[meta/Settings]]

```>html
<style>
.task-list-item {
  list-style: none;
  margin-left: -1.5em;
}
</style>
```

```lang

```

<!-- This is a trailing html comment -->
