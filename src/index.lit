<!-- data
title: .lit 
-->

# `.lit`

[![Open Source](https://img.shields.io/badge/üå±-Open%20Source-green)](https://github.com/dotlitdev/dotlit)
[![npm (scoped)](https://img.shields.io/npm/v/@dotlit/dotlit)](https://npmjs.org/@dotlit/dotlit)
[![Deploy](https://github.com/dotlitdev/dotlit/actions/workflows/generate.yaml/badge.svg)](https://github.com/dotlitdev/dotlit/actions/workflows/generate.yaml)

`.lit` is a plain text document format. It's really just **Markdown**, but with a few ~key differences~ interpretations [ref]. With an aim to maintain backward compatibility with Markdown.

The first of the liberties to be taken is `Code` blocks, pulling the fenced code block to a first class citizen with super powers.

A less ambitious one is that Headlines naturally form *Sections*, and blocks of content coalesce into *Cells* [^lists].

That and `.lit` outputs to html but as a default these self-contained documents are their own editors, with full access to their own AST (Abstract Syntax Tree). A Notebook being a collection/graph of interlinked files.

[ref]: https://example.com "a reference note?"

[^lists]: It gets a bit more complicated when nested lists of further content, but you get the idea.rther content, but you get the idea.

## Table of Contents

## Work in progress

### To Do

[[Scratch ‚ö†Ô∏è Pad üî¨]]

- [ ] [[Execute `code` cells]]
- [ ] fragments in wikilinks
- [ ] [[Viewers]]
- [ ] remove global fetch hack for nodejs and bundle properly with webpack

### Done

- [x] Check lists ([[gfm]] Github Flavoured Markdown)
- [x] [[Persist to GitHub]]
- [x] Emoji üî•
  https://github.com/jimkang/github-file/blob/master/safe-encoders.js#L3

## Parser

Built atop the [[unified]] ecosystem, specifically [[remark]], which takes `.lit` [[Markdown]] source and outputs `.lit` AST (Abstract Syntax Tree)

[Read More](parser/parser.lit)

## Renderer

The default render output is `html` which includes client-side `javascript` which hydrates a React application.

[Read More](renderer/renderer.lit)

## REPL

Still to be re-implemented based on learnings from the prototype.

[Read More](repl/index.lit)

## Utils

- fs-promises-utils
- safe-encodings
- console
- [[functions]]
- unist-util-patch-source
- [[unist-util-position-to-node]]

## `cli`

Command Line Interface for `dotlit` for use via the terminal. Compile (Parse and Render) a directory tree of `.lit (or .md)` files into a notebook.

[Read More](cli/cli.lit)

## Meta

- [[GitHub Workflows]]
- [[Styling and Themes]]
- [[meta/Files and Links]]

<!-- This is a trailing html comment -->
