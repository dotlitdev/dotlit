{
    "type": "root",
    "children": [
        {
            "type": "section",
            "data": {
                "name": "lit-utils",
                "hName": "section",
                "hProperties": {
                    "depth": 1
                }
            },
            "depth": 1,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 3,
                            "column": 100,
                            "offset": 115
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 1,
                                    "column": 1,
                                    "offset": 0
                                },
                                "end": {
                                    "line": 22,
                                    "column": 4,
                                    "offset": 502
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 1,
                            "children": [
                                {
                                    "type": "inlineCode",
                                    "value": ".lit",
                                    "position": {
                                        "start": {
                                            "line": 1,
                                            "column": 3,
                                            "offset": 2
                                        },
                                        "end": {
                                            "line": 1,
                                            "column": 9,
                                            "offset": 8
                                        }
                                    }
                                },
                                {
                                    "type": "text",
                                    "value": " Utils",
                                    "position": {
                                        "start": {
                                            "line": 1,
                                            "column": 9,
                                            "offset": 8
                                        },
                                        "end": {
                                            "line": 1,
                                            "column": 15,
                                            "offset": 14
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 1,
                                    "column": 1,
                                    "offset": 0
                                },
                                "end": {
                                    "line": 3,
                                    "column": 100,
                                    "offset": 115
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "lit-utils"
                                },
                                "id": "lit-utils"
                            },
                            "processed": true
                        },
                        {
                            "type": "paragraph",
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Generally available as ",
                                    "position": {
                                        "start": {
                                            "line": 3,
                                            "column": 1,
                                            "offset": 16
                                        },
                                        "end": {
                                            "line": 3,
                                            "column": 24,
                                            "offset": 39
                                        }
                                    }
                                },
                                {
                                    "type": "inlineCode",
                                    "value": "lit.utils",
                                    "position": {
                                        "start": {
                                            "line": 3,
                                            "column": 24,
                                            "offset": 39
                                        },
                                        "end": {
                                            "line": 3,
                                            "column": 35,
                                            "offset": 50
                                        }
                                    }
                                },
                                {
                                    "type": "text",
                                    "value": " With some exceptions, inludes ",
                                    "position": {
                                        "start": {
                                            "line": 3,
                                            "column": 35,
                                            "offset": 50
                                        },
                                        "end": {
                                            "line": 3,
                                            "column": 66,
                                            "offset": 81
                                        }
                                    }
                                },
                                {
                                    "type": "inlineCode",
                                    "value": "lit.utils.React",
                                    "position": {
                                        "start": {
                                            "line": 3,
                                            "column": 66,
                                            "offset": 81
                                        },
                                        "end": {
                                            "line": 3,
                                            "column": 83,
                                            "offset": 98
                                        }
                                    }
                                },
                                {
                                    "type": "text",
                                    "value": " for convenience.",
                                    "position": {
                                        "start": {
                                            "line": 3,
                                            "column": 83,
                                            "offset": 98
                                        },
                                        "end": {
                                            "line": 3,
                                            "column": 100,
                                            "offset": 115
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 3,
                                    "column": 1,
                                    "offset": 16
                                },
                                "end": {
                                    "line": 3,
                                    "column": 100,
                                    "offset": 115
                                }
                            }
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 5,
                            "column": 1,
                            "offset": 117
                        },
                        "end": {
                            "line": 6,
                            "column": 4,
                            "offset": 153
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "js",
                            "meta": "!collapse < ./functions.js",
                            "value": "export const NoOp = () => {}\nexport const Identity = x => x\nexport const AsInt = x => parseInt(x)\nexport const Undef = x => typeof x === 'undefined'\n\nexport const getMeta = (key,def) => {\n    if (typeof document === \"undefined\" || !document.querySelector) return def;\n\n    const el = document.querySelector(`meta[name=\"lit${key}\"]`)\n    const val = el ? el.getAttribute('value') : def\n    return val\n}\n\nexport const posstr = pos => {\n    return pos ? `${pos.line}:${pos.column}-${pos.offset}` : undefined\n}\n\nexport const wait = async (ms) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\n\nexport const template = (templateString, templateVars) => {\n    console.log(templateString)\n    const escaped = templateString.replace(/`/g, '\\\\`')\n    console.log(escaped)\n    const body = \"return `\"+ escaped +\"`;\"\n    console.log(body)\n    return new Function(body).call(templateVars)\n}",
                            "position": {
                                "start": {
                                    "line": 5,
                                    "column": 1,
                                    "offset": 117
                                },
                                "end": {
                                    "line": 6,
                                    "column": 4,
                                    "offset": 153
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "js",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "./functions.js",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt ./functions.js"
                                    },
                                    "raw": "js !collapse < ./functions.js",
                                    "fromSource": "./functions.js"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "js",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "./functions.js",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt ./functions.js"
                                        },
                                        "raw": "js !collapse < ./functions.js",
                                        "fromSource": "./functions.js"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 7,
                            "column": 1,
                            "offset": 154
                        },
                        "end": {
                            "line": 8,
                            "column": 4,
                            "offset": 188
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "js",
                            "meta": "!collapse < ./console.js",
                            "value": "import { NoOp } from './functions'\n\nconst ROOT_NS = '.lit'\nconst ROOT_PREFIX = `${ROOT_NS}`\n\nconst debugKeys = (...args) => {\n  let debugStr = ''\n  if (typeof process !== 'undefined' && process.env && process.env.DEBUG) {\n    debugStr = process.env.DEBUG\n  }\n\n  if (typeof window !== 'undefined' && window.location) {\n      const debugKeys = localStorage.getItem('litDebug') || ''\n      if (debugKeys) debugStr = debugKeys\n  }\n\n  return debugStr.split(',')\n}\n\n// console.log(\"[console] log mask:\", debugKeys().join(',') )\n\nconst shouldLog = ns => {\n  const keys = debugKeys()\n  if (keys.indexOf(`-${ns}`) >= 0) return false;\n  return keys.indexOf('*') >= 0 || keys.indexOf('All') >= 0 || keys.indexOf(ns) >= 0\n}\n\nconst level = function(level, fn) {\n  const lvlIndent = Array(level).fill('  ').join('')\n  return function(...args) {\n    if (level <= debug_level() || shouldLog(level)) fn(`[lit]{${level}}${lvlIndent}`, ...args)\n  }\n}\n\nconst prefixArgs = (prefix, fn, self) => {\n  return (...args) => {\n    const newArgs = [prefix, ...args]\n    fn.apply( self, newArgs)\n  }\n}\n\nconst getConsole = (ns) => {\n  const prefix = `[${ROOT_PREFIX}:${ns}] `\n  return {\n    level: level,\n    log: prefixArgs(prefix, console.log, console),\n    dir: prefixArgs(prefix, console.dir, console),\n    info: prefixArgs(prefix, console.info, console),\n    error: prefixArgs(prefix, console.error, console),\n    time: console.time,\n    timeEnd: console.timeEnd,\n    getConsoleForNamespace,\n  }\n}\n\nexport const Console = getConsole(ROOT_NS);\nexport function getConsoleForNamespace(ns) {\n  if (shouldLog(ns)) {\n    return getConsole(ns)\n  } else {\n    if (debugKeys()[0] !== 'None') console.log(`[${ROOT_PREFIX}] Hiding console for NS \"${ns}\"`)\n    const prefix = `[${ROOT_PREFIX}:${ns}] `\n    return {\n      level: NoOp,\n      log: NoOp,\n      dir: NoOp,\n      info: NoOp,\n      error: prefixArgs(prefix, console.error, console),\n      time: NoOp,\n      timeEnd: NoOp,\n    }\n  }\n}\n\n\n\n\n",
                            "position": {
                                "start": {
                                    "line": 7,
                                    "column": 1,
                                    "offset": 154
                                },
                                "end": {
                                    "line": 8,
                                    "column": 4,
                                    "offset": 188
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "js",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "./console.js",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt ./console.js"
                                    },
                                    "raw": "js !collapse < ./console.js",
                                    "fromSource": "./console.js"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "js",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "./console.js",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt ./console.js"
                                        },
                                        "raw": "js !collapse < ./console.js",
                                        "fromSource": "./console.js"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 9,
                            "column": 1,
                            "offset": 189
                        },
                        "end": {
                            "line": 10,
                            "column": 4,
                            "offset": 222
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "js",
                            "meta": "!collapse < ./colors.js",
                            "value": "function hashCode(str) {\n    var hash = 0;\n    for (var i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    return hash;\n}\n\n// Convert an int to hexadecimal with a max length\n// of six characters.\nfunction intToARGB(i) {\n    var hex = ((i>>24)&0xFF).toString(16) +\n            ((i>>16)&0xFF).toString(16) +\n            ((i>>8)&0xFF).toString(16) +\n            (i&0xFF).toString(16);\n    // Sometimes the string returned will be too short so we \n    // add zeros to pad it out, which later get removed if\n    // the length is greater than six.\n    hex += '000000';\n    return '#' + hex.substring(0, 6);\n}\n\nexport function pickTextColorBasedOnBgColor(bgColor, lightColor, darkColor) {\n    var color = (bgColor.charAt(0) === '#') ? bgColor.substring(1, 7) : bgColor;\n    var r = parseInt(color.substring(0, 2), 16); // hexToR\n    var g = parseInt(color.substring(2, 4), 16); // hexToG\n    var b = parseInt(color.substring(4, 6), 16); // hexToB\n    var uicolors = [r / 255, g / 255, b / 255];\n    var c = uicolors.map((col) => {\n      if (col <= 0.03928) {\n        return col / 12.92;\n      }\n      return Math.pow((col + 0.055) / 1.055, 2.4);\n    });\n    var L = (0.2126 * c[0]) + (0.7152 * c[1]) + (0.0722 * c[2]);\n    return (L > 0.179) ? darkColor : lightColor;\n}\nexport function stringToHex (str) {\n    return intToARGB(hashCode(str))\n}\n",
                            "position": {
                                "start": {
                                    "line": 9,
                                    "column": 1,
                                    "offset": 189
                                },
                                "end": {
                                    "line": 10,
                                    "column": 4,
                                    "offset": 222
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "js",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "./colors.js",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt ./colors.js"
                                    },
                                    "raw": "js !collapse < ./colors.js",
                                    "fromSource": "./colors.js"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "js",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "./colors.js",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt ./colors.js"
                                        },
                                        "raw": "js !collapse < ./colors.js",
                                        "fromSource": "./colors.js"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 11,
                            "column": 1,
                            "offset": 223
                        },
                        "end": {
                            "line": 12,
                            "column": 4,
                            "offset": 263
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "js",
                            "meta": "!collapse < ./safe-encoders.js",
                            "value": "var newlineRegex = /\\n/g;\n\n\nexport const btoa = (str) => {\n  if (typeof window === 'undefined' || !window.btoa)  {\n    // const Buffer = require('buffer')\n    return Buffer.from(str, 'binary').toString('base64')\n  } else return window.btoa(str)\n}\n\nexport const atob = (str) => {\n  if (typeof window === 'undefined' || !window.atob)  {\n    // const Buffer = require('buffer')\n    return Buffer.from(str, 'base64').toString('binary')\n  }\n  else return window.atob(str)\n}\n\nexport function b64EncodeUnicode(str) {\n  return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {\n    return String.fromCharCode('0x' + p1);\n  }));\n}\n\nexport function b64DecodeUnicode(str) {\n  // atob on Mobile Safari for iOS 9 will throw an exception if there's a newline.\n  var b64Decoded = atob(str.replace(newlineRegex, ''));\n  var decodedWithUnicodeHexesRestored = Array.prototype.map.call(\n    b64Decoded,\n    hexEncodeCharCode\n  )\n  .join('');\n\n  return decodeURIComponent(decodedWithUnicodeHexesRestored);\n}\n\nfunction hexEncodeCharCode(c) {\n  return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n}\n",
                            "position": {
                                "start": {
                                    "line": 11,
                                    "column": 1,
                                    "offset": 223
                                },
                                "end": {
                                    "line": 12,
                                    "column": 4,
                                    "offset": 263
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "js",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "./safe-encoders.js",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt ./safe-encoders.js"
                                    },
                                    "raw": "js !collapse < ./safe-encoders.js",
                                    "fromSource": "./safe-encoders.js"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "js",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "./safe-encoders.js",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt ./safe-encoders.js"
                                        },
                                        "raw": "js !collapse < ./safe-encoders.js",
                                        "fromSource": "./safe-encoders.js"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                },
                {
                    "type": "section",
                    "data": {
                        "name": "unist-utils",
                        "hName": "section",
                        "hProperties": {
                            "depth": 2
                        }
                    },
                    "depth": 2,
                    "children": [
                        {
                            "type": "cell",
                            "position": {
                                "start": {
                                    "line": 14,
                                    "column": 1,
                                    "offset": 265
                                },
                                "end": {
                                    "line": 16,
                                    "column": 119,
                                    "offset": 399
                                }
                            },
                            "data": {
                                "hName": "cell",
                                "hProperties": {
                                    "class": "cell"
                                },
                                "section": {
                                    "position": {
                                        "start": {
                                            "line": 14,
                                            "column": 1,
                                            "offset": 265
                                        },
                                        "end": {
                                            "line": 22,
                                            "column": 4,
                                            "offset": 502
                                        }
                                    }
                                }
                            },
                            "children": [
                                {
                                    "type": "heading",
                                    "depth": 2,
                                    "children": [
                                        {
                                            "type": "text",
                                            "value": "Unist utils",
                                            "position": {
                                                "start": {
                                                    "line": 14,
                                                    "column": 4,
                                                    "offset": 268
                                                },
                                                "end": {
                                                    "line": 14,
                                                    "column": 15,
                                                    "offset": 279
                                                }
                                            }
                                        }
                                    ],
                                    "position": {
                                        "start": {
                                            "line": 14,
                                            "column": 1,
                                            "offset": 265
                                        },
                                        "end": {
                                            "line": 16,
                                            "column": 119,
                                            "offset": 399
                                        }
                                    },
                                    "data": {
                                        "hProperties": {
                                            "id": "unist-utils"
                                        },
                                        "id": "unist-utils"
                                    },
                                    "processed": true
                                },
                                {
                                    "type": "paragraph",
                                    "children": [
                                        {
                                            "type": "text",
                                            "value": "Various ",
                                            "position": {
                                                "start": {
                                                    "line": 16,
                                                    "column": 1,
                                                    "offset": 281
                                                },
                                                "end": {
                                                    "line": 16,
                                                    "column": 9,
                                                    "offset": 289
                                                }
                                            }
                                        },
                                        {
                                            "type": "inlineCode",
                                            "value": "unist-util-*",
                                            "position": {
                                                "start": {
                                                    "line": 16,
                                                    "column": 9,
                                                    "offset": 289
                                                },
                                                "end": {
                                                    "line": 16,
                                                    "column": 23,
                                                    "offset": 303
                                                }
                                            }
                                        },
                                        {
                                            "type": "text",
                                            "value": " utilities used by ",
                                            "position": {
                                                "start": {
                                                    "line": 16,
                                                    "column": 23,
                                                    "offset": 303
                                                },
                                                "end": {
                                                    "line": 16,
                                                    "column": 42,
                                                    "offset": 322
                                                }
                                            }
                                        },
                                        {
                                            "type": "inlineCode",
                                            "value": ".lit",
                                            "position": {
                                                "start": {
                                                    "line": 16,
                                                    "column": 42,
                                                    "offset": 322
                                                },
                                                "end": {
                                                    "line": 16,
                                                    "column": 48,
                                                    "offset": 328
                                                }
                                            }
                                        },
                                        {
                                            "type": "text",
                                            "value": " and some custom built, exposed for convenience under ",
                                            "position": {
                                                "start": {
                                                    "line": 16,
                                                    "column": 48,
                                                    "offset": 328
                                                },
                                                "end": {
                                                    "line": 16,
                                                    "column": 102,
                                                    "offset": 382
                                                }
                                            }
                                        },
                                        {
                                            "type": "inlineCode",
                                            "value": "lit.utils.unist",
                                            "position": {
                                                "start": {
                                                    "line": 16,
                                                    "column": 102,
                                                    "offset": 382
                                                },
                                                "end": {
                                                    "line": 16,
                                                    "column": 119,
                                                    "offset": 399
                                                }
                                            }
                                        }
                                    ],
                                    "position": {
                                        "start": {
                                            "line": 16,
                                            "column": 1,
                                            "offset": 281
                                        },
                                        "end": {
                                            "line": 16,
                                            "column": 119,
                                            "offset": 399
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            "type": "cell",
                            "position": {
                                "start": {
                                    "line": 18,
                                    "column": 1,
                                    "offset": 401
                                },
                                "end": {
                                    "line": 19,
                                    "column": 4,
                                    "offset": 449
                                }
                            },
                            "data": {
                                "hName": "cell",
                                "hProperties": {
                                    "class": "cell"
                                }
                            },
                            "children": [
                                {
                                    "type": "code",
                                    "lang": "js",
                                    "meta": "!collapse < unist-util-patch-source.js",
                                    "value": "\nconst patchSource = (src, originalLocation, value) => {\n    const pos = originalLocation.position || originalLocation\n    if (!pos) throw Error(\"No location to patch\")\n    return src.slice(0, pos.start.offset) + value + src.slice(pos.end.offset);\n}\n\nexport default patchSource\n",
                                    "position": {
                                        "start": {
                                            "line": 18,
                                            "column": 1,
                                            "offset": 401
                                        },
                                        "end": {
                                            "line": 19,
                                            "column": 4,
                                            "offset": 449
                                        }
                                    },
                                    "data": {
                                        "meta": {
                                            "attrs": {},
                                            "lang": "js",
                                            "directives": [
                                                "collapse"
                                            ],
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": true,
                                            "source": {
                                                "attrs": {},
                                                "lang": "txt",
                                                "filename": "unist-util-patch-source.js",
                                                "isOutput": false,
                                                "hasOutput": false,
                                                "hasSource": false,
                                                "raw": "txt unist-util-patch-source.js"
                                            },
                                            "raw": "js !collapse < unist-util-patch-source.js",
                                            "fromSource": "unist-util-patch-source.js"
                                        },
                                        "hProperties": {
                                            "className": "",
                                            "meta": {
                                                "attrs": {},
                                                "lang": "js",
                                                "directives": [
                                                    "collapse"
                                                ],
                                                "isOutput": false,
                                                "hasOutput": false,
                                                "hasSource": true,
                                                "source": {
                                                    "attrs": {},
                                                    "lang": "txt",
                                                    "filename": "unist-util-patch-source.js",
                                                    "isOutput": false,
                                                    "hasOutput": false,
                                                    "hasSource": false,
                                                    "raw": "txt unist-util-patch-source.js"
                                                },
                                                "raw": "js !collapse < unist-util-patch-source.js",
                                                "fromSource": "unist-util-patch-source.js"
                                            },
                                            "data": {
                                                "originalSource": ""
                                            }
                                        },
                                        "originalSource": ""
                                    }
                                }
                            ]
                        },
                        {
                            "type": "cell",
                            "position": {
                                "start": {
                                    "line": 21,
                                    "column": 1,
                                    "offset": 451
                                },
                                "end": {
                                    "line": 22,
                                    "column": 4,
                                    "offset": 502
                                }
                            },
                            "data": {
                                "hName": "cell",
                                "hProperties": {
                                    "class": "cell"
                                }
                            },
                            "children": [
                                {
                                    "type": "code",
                                    "lang": "js",
                                    "meta": "!collapse < unist-util-select-position.js",
                                    "value": "import filter from 'unist-util-filter'\nimport {selectAll as select} from 'unist-util-select'\nimport { getConsoleForNamespace } from './console'\n\nconst console = getConsoleForNamespace('util')\n\nexport const atPos = pos => (node) => {\n  const pos2 = node.position\n  if (!pos2 || !pos2.start || !pos2.end) {\n    console.error(\"no pos\", node)\n    return false\n  }\n\n  const startInside = (pos2.start.line >= pos.start.line\n    && pos2.start.line <= pos.end.line)\n\n  const endInside = (pos2.end.line >= pos.start.line\n    && pos2.end.line <= pos.end.line)\n\n  const wraps = pos2.start.line <= pos.start.line \n    && pos2.end.line >= pos.end.line\n\n  const any = wraps || startInside || endInside \n  // console.log(\"atPos: \" + node.type, any ,pos2.start.line, pos2.end.line, wraps, startInside, endInside, pos.start.line, pos.end.line)\n  return any\n}\n\nexport const selectAll = (type, pos, tree) => {\n  const filteredTree = filter(tree, atPos(pos))\n  const nodes = select(type, filteredTree)\n  return nodes\n}\n",
                                    "position": {
                                        "start": {
                                            "line": 21,
                                            "column": 1,
                                            "offset": 451
                                        },
                                        "end": {
                                            "line": 22,
                                            "column": 4,
                                            "offset": 502
                                        }
                                    },
                                    "data": {
                                        "meta": {
                                            "attrs": {},
                                            "lang": "js",
                                            "directives": [
                                                "collapse"
                                            ],
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": true,
                                            "source": {
                                                "attrs": {},
                                                "lang": "txt",
                                                "filename": "unist-util-select-position.js",
                                                "isOutput": false,
                                                "hasOutput": false,
                                                "hasSource": false,
                                                "raw": "txt unist-util-select-position.js"
                                            },
                                            "raw": "js !collapse < unist-util-select-position.js",
                                            "fromSource": "unist-util-select-position.js"
                                        },
                                        "hProperties": {
                                            "className": "",
                                            "meta": {
                                                "attrs": {},
                                                "lang": "js",
                                                "directives": [
                                                    "collapse"
                                                ],
                                                "isOutput": false,
                                                "hasOutput": false,
                                                "hasSource": true,
                                                "source": {
                                                    "attrs": {},
                                                    "lang": "txt",
                                                    "filename": "unist-util-select-position.js",
                                                    "isOutput": false,
                                                    "hasOutput": false,
                                                    "hasSource": false,
                                                    "raw": "txt unist-util-select-position.js"
                                                },
                                                "raw": "js !collapse < unist-util-select-position.js",
                                                "fromSource": "unist-util-select-position.js"
                                            },
                                            "data": {
                                                "originalSource": ""
                                            }
                                        },
                                        "originalSource": ""
                                    }
                                }
                            ]
                        }
                    ],
                    "position": {
                        "start": {
                            "line": 14,
                            "column": 1,
                            "offset": 265
                        },
                        "end": {
                            "line": 22,
                            "column": 4,
                            "offset": 502
                        }
                    }
                }
            ],
            "position": {
                "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                },
                "end": {
                    "line": 22,
                    "column": 4,
                    "offset": 502
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "filesystem-utils",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 24,
                            "column": 1,
                            "offset": 504
                        },
                        "end": {
                            "line": 26,
                            "column": 136,
                            "offset": 660
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 24,
                                    "column": 1,
                                    "offset": 504
                                },
                                "end": {
                                    "line": 36,
                                    "column": 115,
                                    "offset": 919
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Filesystem utils",
                                    "position": {
                                        "start": {
                                            "line": 24,
                                            "column": 4,
                                            "offset": 507
                                        },
                                        "end": {
                                            "line": 24,
                                            "column": 20,
                                            "offset": 523
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 24,
                                    "column": 1,
                                    "offset": 504
                                },
                                "end": {
                                    "line": 26,
                                    "column": 136,
                                    "offset": 660
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "filesystem-utils"
                                },
                                "id": "filesystem-utils"
                            },
                            "processed": true
                        },
                        {
                            "type": "paragraph",
                            "children": [
                                {
                                    "type": "text",
                                    "value": "The raw [lightning-fs] object is available as ",
                                    "position": {
                                        "start": {
                                            "line": 26,
                                            "column": 1,
                                            "offset": 525
                                        },
                                        "end": {
                                            "line": 26,
                                            "column": 47,
                                            "offset": 571
                                        }
                                    }
                                },
                                {
                                    "type": "inlineCode",
                                    "value": "lit.lfs",
                                    "position": {
                                        "start": {
                                            "line": 26,
                                            "column": 47,
                                            "offset": 571
                                        },
                                        "end": {
                                            "line": 26,
                                            "column": 56,
                                            "offset": 580
                                        }
                                    }
                                },
                                {
                                    "type": "text",
                                    "value": " while the extended and customised wrapper used throughout ",
                                    "position": {
                                        "start": {
                                            "line": 26,
                                            "column": 56,
                                            "offset": 580
                                        },
                                        "end": {
                                            "line": 26,
                                            "column": 115,
                                            "offset": 639
                                        }
                                    }
                                },
                                {
                                    "type": "inlineCode",
                                    "value": ".lit",
                                    "position": {
                                        "start": {
                                            "line": 26,
                                            "column": 115,
                                            "offset": 639
                                        },
                                        "end": {
                                            "line": 26,
                                            "column": 121,
                                            "offset": 645
                                        }
                                    }
                                },
                                {
                                    "type": "text",
                                    "value": " is at ",
                                    "position": {
                                        "start": {
                                            "line": 26,
                                            "column": 121,
                                            "offset": 645
                                        },
                                        "end": {
                                            "line": 26,
                                            "column": 128,
                                            "offset": 652
                                        }
                                    }
                                },
                                {
                                    "type": "inlineCode",
                                    "value": "lit.fs",
                                    "position": {
                                        "start": {
                                            "line": 26,
                                            "column": 128,
                                            "offset": 652
                                        },
                                        "end": {
                                            "line": 26,
                                            "column": 136,
                                            "offset": 660
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 26,
                                    "column": 1,
                                    "offset": 525
                                },
                                "end": {
                                    "line": 26,
                                    "column": 136,
                                    "offset": 660
                                }
                            }
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 28,
                            "column": 1,
                            "offset": 662
                        },
                        "end": {
                            "line": 29,
                            "column": 4,
                            "offset": 704
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "js",
                            "meta": "!collapse < fs-promises-utils.js",
                            "value": "import path from \"path\";\nimport { ghWriteFile, ghReadFile, ghDeleteFile } from \"../utils/fs-promises-gh-utils\";\nimport { getConsoleForNamespace } from './console'\n\nconst console = getConsoleForNamespace('fs')\n\nconst passThroughRead = (origReadFile, litroot) => {\n  \n  return async (...args) => {\n    console.log('fs.passThroughRead', args[0])\n    try {\n      return await origReadFile(...args);\n    } catch (err) {\n      const filePath = path.join(litroot, args[0])\n      console.log('fs.passThroughRead passing through to fetch', filePath)\n      const resp = await fetch(filePath)\n      if (resp.status === 404) throw new Error(`404 File ${filePath} not found.`)\n      return await resp.text();\n    }\n  };\n}\n\nconst passThroughReadWithStat = (origReadFile, origStat, litroot, ghOpts, noPassthrough) => {\n\n  return async (...args) => {\n    console.log('fs.passThroughReadWithStat', litroot, args[0])\n\n    const resp = {\n      local: { stat: undefined, value: undefined },\n      remote: { stat: undefined, value: undefined },\n    }\n    const filePath = args[0] = path.join(litroot, args[0])\n    try {\n      try {\n        resp.local.stat = await origStat(...args)\n      } catch(err){\n        console.log(\"fs.passThoughReadWithStat no stat on local file\")\n      }\n      const value = await origReadFile(...args)\n      resp.local.value = value\n    } catch (err) { \n      console.log('fs.passThoughReadWithStat no local file', err)\n    }\n\n    \n\n    let remoteResp\n    if (ghOpts) {\n        console.log(\"fs.passThroughtReadWithStat passing through to GitHub\", filePath)\n        const ghrf = ghReadFile(ghOpts)\n        try {\n             remoteResp = await ghrf(filePath)\n        } catch(err){\n             console.log(\"fs.passThroughtReadWithStat GitHub read failed\", err) \n        }\n    } else if (noPassthrough) {\n      return resp\n    } else {\n        console.log('fs.passThroughReadWithStat passing through to fetch', filePath)\n        remoteResp = await fetch(filePath)\n    }\n\n    if (!remoteResp || remoteResp.status < 200 || remoteResp.status >= 400) {\n      if (!resp.local.stat && !resp.local.value) {\n        console.log('fs.passThroughReadWithStat failed local and remote read')\n        throw new Error(`${remoteResp?.status || \"Request\"} Error. Fetching File.`)\n      }\n    } else {\n      console.log(\"fs.passThroughReadWithStat found remote file\")\n      const value = await remoteResp.text()\n      const lastModified = remoteResp.headers && remoteResp.headers.get('last-modified')\n      const contentLength = remoteResp.headers && remoteResp.headers.get('content-length')\n      const stat = {\n        dev: 1,\n        gid: 1,\n        ino: 1,\n        uid: 1,\n        mtimeMs: lastModified && (new Date(lastModified)).getTime(),\n        size: contentLength,\n      }\n      resp.remote = {stat,value}\n    }\n\n    return resp\n  };\n}\n\nconst writeFileP = (fs, litroot) => {\n  const wf = fs.writeFile\n  return async (...args) => {\n    console.log(\"fs.writeFileP \", args[0])\n    const filepath = (args[0] = litroot + args[0]);\n    const p = path.parse(filepath);\n    const parts = p.dir.split(path.sep);\n    // console.log(`\"Parts for \"${filepath}\"`, parts);\n    for (var i = 0; i < parts.length; i++) {\n      // console.log(`[${i}] <--- \"${parts[i]}\"`);\n      if (i === 0) {\n      } else {\n        const subPath = parts.slice(0, i + 1).join(path.sep);\n        // console.log(`\"${subPath}\" Sub path`);\n        try {\n          await fs.stat(subPath);\n          // console.log(`[fs.writeFileP] \"${subPath}\" Existed, skipping`);\n        } catch (err) {\n          console.log(`[fs.writeFileP] \"${subPath}\" Didn't exist, creating...`);\n          await fs.mkdir(subPath);\n        }\n      }\n    }\n    // console.log(\"[fs.writeFileP] Writing file\", ...args);\n    return wf(...args);\n  };\n}\n\nconst passThroughWrite = (fs,litroot, ghOpts) => {\n  const wf = fs.writeFile\n  return async (...args) => {\n    console.log('fs.passThroughWrite')\n    await wf(...args);\n    if (ghOpts) {\n      const ghwf = ghWriteFile(ghOpts);\n      try {\n        const ghResp = await ghwf(...args);\n        console.log(\"GitHub write resp\", ghResp);\n      } catch (err) {\n        console.error(\"GitHub write threw\", err);\n      }\n    }\n  };\n}\n\nconst passThroughUnlink = (fs,litroot, ghOpts) => {\n  const uf = fs.unlink\n  return async (filepath, localOnly) => {\n    console.log('fs.passThroughUnlink')\n    let local\n    try {\n        local = await uf(filepath, localOnly)\n    } catch (err) {\n        console.log(\"fs.passThroughUnlink didn't unlink local file\", err)\n    }\n    if (localOnly) return local;\n    if (ghOpts) {\n      const ghdf = ghDeleteFile(ghOpts);\n      let ghResp\n      try {\n        ghResp = await ghdf(filepath.slice(1));\n        console.log(\"GitHub delete resp\", ghResp);\n      } catch (err) {\n        console.error(\"GitHub delete threw\", err.message, err);\n      }\n      return ghResp\n    } else {\n      return local\n    }\n  };\n}\n\nexport const extendFs = (fs, litroot = \"\", ghOpts, noPassthrough) => {\n  const clonedfs = {...fs}\n  const origReadFile = clonedfs.readFile\n  const origStat = clonedfs.stat\n  \n  \n  if (!noPassthrough) clonedfs.readFile = passThroughRead(origReadFile,litroot);\n  clonedfs.writeFile = writeFileP(clonedfs, litroot);\n  clonedfs.readStat = passThroughReadWithStat(clonedfs.readFile, origStat, litroot, ghOpts, noPassthrough)\n\n  if(ghOpts) clonedfs.writeFile = passThroughWrite(clonedfs, litroot, ghOpts);\n  if(ghOpts) clonedfs.unlink = passThroughUnlink(clonedfs, litroot, ghOpts);\n\n  return clonedfs\n};\n",
                            "position": {
                                "start": {
                                    "line": 28,
                                    "column": 1,
                                    "offset": 662
                                },
                                "end": {
                                    "line": 29,
                                    "column": 4,
                                    "offset": 704
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "js",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "fs-promises-utils.js",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt fs-promises-utils.js"
                                    },
                                    "raw": "js !collapse < fs-promises-utils.js",
                                    "fromSource": "fs-promises-utils.js"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "js",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "fs-promises-utils.js",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt fs-promises-utils.js"
                                        },
                                        "raw": "js !collapse < fs-promises-utils.js",
                                        "fromSource": "fs-promises-utils.js"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 31,
                            "column": 1,
                            "offset": 706
                        },
                        "end": {
                            "line": 32,
                            "column": 4,
                            "offset": 751
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "js",
                            "meta": "!collapse < fs-promises-gh-utils.js",
                            "value": "import { b64EncodeUnicode, b64DecodeUnicode } from './safe-encoders'\nimport { getConsoleForNamespace } from './console'\n\nconst console = getConsoleForNamespace('fs/gh')\n\nconst getEndpoint = (opts,file) => `https://api.github.com/repos/${opts.username}/${opts.repository}/contents/${file}`\n\nexport const ghReadFile = opts => async (...args) => {\n    const file = (opts.prefix || '') + args[0]\n    const params = {\n        method: \"GET\",\n        headers: {\n            \"Authorization\": `token ${opts.token}`,\n            'Content-Type': 'application/json'\n        },\n    }\n    const resp = await fetch(getEndpoint(opts,file), params)\n    // resp.origJson = resp.json\n    resp.text = async () => {\n        console.log(\"ghReadFile text()...\")\n        const data = await resp.json()\n        console.log(\"ghReadFile data\", data)\n        const content = b64DecodeUnicode(data.content)\n        console.log(\"ghReadFile decoded\", content)\n        return content\n    }\n    console.log(\"ghReadFile\", file, resp)\n    return resp\n}\n\nexport const ghWriteFile = (opts) => async (...args) => {\n   \n    const file = (opts.prefix || '') + args[0]\n    const content = args[1].toString()\n    console.log(\"ghWriteFile\", file)\n    const endpoint = getEndpoint(opts, file)\n    const resp1 = await fetch(endpoint)\n    const json1 = await resp1.json()\n    console.log(endpoint, json1.sha ? \"Exists, updating...\":\"Dosn't exist, creating...\")\n    const params = {\n        method: \"PUT\",\n        headers: {\n            \"Authorization\": `token ${opts.token}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            sha: json1.sha,\n            message: opts.commitMessage || `Updated ${file}`,\n            content: b64EncodeUnicode(content)\n        })\n    }\n    console.log(\"ghWriteFile params\", params)\n    let resp2;\n    try {\n      resp2 = await fetch(endpoint, params)\n    } catch(err) {\n      console.log(\"ghWriteFile PUT failed\", err)\n    }\n    return resp2 && resp2.status\n}\n\nexport const ghDeleteFile = opts => async (...args) => {\n    const file = (opts.prefix || '') + args[0]\n    console.log(\"ghDeleteFile\", file)\n    const endpoint = getEndpoint(opts, file)\n    const resp1 = await fetch(endpoint)\n    const json1 = await resp1.json()\n    console.log(endpoint, json1.sha ? \"Exists, deleting...\":\"Dosn't exist\")\n    const params = {\n        method: \"DELETE\",\n        headers: {\n            \"Authorization\": `token ${opts.token}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            sha: json1.sha,\n            message: opts.commitMessage || `Deleted ${file}`,\n        })\n    }\n    console.log(\"ghDeleteFile params\", params)\n    let resp2;\n    try {\n      resp2 = await fetch(endpoint, params)\n      const json = await resp2.json()\n      console.log(\"ghDeleteFile DELETE response\", resp2, json)\n    } catch(err) {\n      console.log(\"ghDeleteFile DELETE failed\", err.message, err)\n    }\n    return resp2 && resp2.status\n}\n",
                            "position": {
                                "start": {
                                    "line": 31,
                                    "column": 1,
                                    "offset": 706
                                },
                                "end": {
                                    "line": 32,
                                    "column": 4,
                                    "offset": 751
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "js",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "fs-promises-gh-utils.js",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt fs-promises-gh-utils.js"
                                    },
                                    "raw": "js !collapse < fs-promises-gh-utils.js",
                                    "fromSource": "fs-promises-gh-utils.js"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "js",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "fs-promises-gh-utils.js",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt fs-promises-gh-utils.js"
                                        },
                                        "raw": "js !collapse < fs-promises-gh-utils.js",
                                        "fromSource": "fs-promises-gh-utils.js"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 33,
                            "column": 1,
                            "offset": 752
                        },
                        "end": {
                            "line": 34,
                            "column": 4,
                            "offset": 803
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "js",
                            "meta": "!collapse #notyetused < git-commit-all.js",
                            "value": "\n// initially, because it's on every change \n// a commit will mostly be for a single\n// file at a time the immediate exception \n// being when a file with output files \n// is edited, in which case the commit \n// includes those files.\n\nexport const onSave = async (filename) => {\n  const now = (new Date()).toISOString()\n\n  const fs = lit.lfs \n  const dir = lit.location.root\n  const git = lit.git\n  const FILE = 0, WORKDIR = 2, STAGE = 3\n\n  const unstaged = row => {\n    return row[WORKDIR] !== row[STAGE]\n  }\n\n  // get/list unstaged files\n  const status = await git.statusMatrix({ fs,dir})\n  const files = status\n                .filter( unstaged )\n                .map(row => row[FILE])\n\n  // stage everything\n  await git.add({fs, dir, filepath: '.'})\n\n  // message \n  const message = `Auto commit ${filename}\n\nat ${now} includes the following ${files.length} files:\n${files.map(f=> \"- \" + f).join('\\n')}`\n\n  // commit\n  const sha = await git.commit({fs, dir,\n    message,\n    author: {\n      name: 'dotlit',\n      email: 'bit@dotlit.org'\n    }\n  })\n  return `Committed ${sha.slice(0,6)} \n${message}`\n}\n\n// return onSave(lit.location.src)\n",
                            "position": {
                                "start": {
                                    "line": 33,
                                    "column": 1,
                                    "offset": 752
                                },
                                "end": {
                                    "line": 34,
                                    "column": 4,
                                    "offset": 803
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "js",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "tags": [
                                        "notyetused"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "git-commit-all.js",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt git-commit-all.js"
                                    },
                                    "raw": "js !collapse #notyetused < git-commit-all.js",
                                    "fromSource": "git-commit-all.js"
                                },
                                "hProperties": {
                                    "className": "tag-notyetused",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "js",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "tags": [
                                            "notyetused"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "git-commit-all.js",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt git-commit-all.js"
                                        },
                                        "raw": "js !collapse #notyetused < git-commit-all.js",
                                        "fromSource": "git-commit-all.js"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 36,
                            "column": 1,
                            "offset": 805
                        },
                        "end": {
                            "line": 36,
                            "column": 115,
                            "offset": 919
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 24,
                                    "column": 1,
                                    "offset": 504
                                },
                                "end": {
                                    "line": 36,
                                    "column": 115,
                                    "offset": 919
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "paragraph",
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Some additional utils include ",
                                    "position": {
                                        "start": {
                                            "line": 36,
                                            "column": 1,
                                            "offset": 805
                                        },
                                        "end": {
                                            "line": 36,
                                            "column": 31,
                                            "offset": 835
                                        }
                                    }
                                },
                                {
                                    "type": "inlineCode",
                                    "value": "lit.delete()",
                                    "position": {
                                        "start": {
                                            "line": 36,
                                            "column": 31,
                                            "offset": 835
                                        },
                                        "end": {
                                            "line": 36,
                                            "column": 45,
                                            "offset": 849
                                        }
                                    }
                                },
                                {
                                    "type": "text",
                                    "value": " and ",
                                    "position": {
                                        "start": {
                                            "line": 36,
                                            "column": 45,
                                            "offset": 849
                                        },
                                        "end": {
                                            "line": 36,
                                            "column": 50,
                                            "offset": 854
                                        }
                                    }
                                },
                                {
                                    "type": "inlineCode",
                                    "value": "lit.read()",
                                    "position": {
                                        "start": {
                                            "line": 36,
                                            "column": 50,
                                            "offset": 854
                                        },
                                        "end": {
                                            "line": 36,
                                            "column": 62,
                                            "offset": 866
                                        }
                                    }
                                },
                                {
                                    "type": "text",
                                    "value": " these were used during testing but will likely move.",
                                    "position": {
                                        "start": {
                                            "line": 36,
                                            "column": 62,
                                            "offset": 866
                                        },
                                        "end": {
                                            "line": 36,
                                            "column": 115,
                                            "offset": 919
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 36,
                                    "column": 1,
                                    "offset": 805
                                },
                                "end": {
                                    "line": 36,
                                    "column": 115,
                                    "offset": 919
                                }
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 24,
                    "column": 1,
                    "offset": 504
                },
                "end": {
                    "line": 36,
                    "column": 115,
                    "offset": 919
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "momento",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 38,
                            "column": 1,
                            "offset": 921
                        },
                        "end": {
                            "line": 40,
                            "column": 91,
                            "offset": 1024
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 38,
                                    "column": 1,
                                    "offset": 921
                                },
                                "end": {
                                    "line": 40,
                                    "column": 91,
                                    "offset": 1024
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Momento",
                                    "position": {
                                        "start": {
                                            "line": 38,
                                            "column": 4,
                                            "offset": 924
                                        },
                                        "end": {
                                            "line": 38,
                                            "column": 11,
                                            "offset": 931
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 38,
                                    "column": 1,
                                    "offset": 921
                                },
                                "end": {
                                    "line": 40,
                                    "column": 91,
                                    "offset": 1024
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "momento"
                                },
                                "id": "momento"
                            },
                            "processed": true
                        },
                        {
                            "type": "paragraph",
                            "children": [
                                {
                                    "type": "text",
                                    "value": "A basic [moment.js] alternative, for displaying user friendly times. See ",
                                    "position": {
                                        "start": {
                                            "line": 40,
                                            "column": 1,
                                            "offset": 934
                                        },
                                        "end": {
                                            "line": 40,
                                            "column": 74,
                                            "offset": 1007
                                        }
                                    }
                                },
                                {
                                    "type": "link",
                                    "data": {
                                        "isAbsolute": false,
                                        "isFragment": false,
                                        "isRelative": true,
                                        "canonical": "utils/momento.lit",
                                        "wikilink": true,
                                        "hProperties": {
                                            "wikilink": true,
                                            "data": {
                                                "base": "utils/momento.html",
                                                "isAbsolute": false,
                                                "isFragment": false,
                                                "isRelative": true,
                                                "canonical": "utils/momento.lit",
                                                "wikilink": true
                                            }
                                        }
                                    },
                                    "position": {
                                        "start": {
                                            "line": 40,
                                            "column": 74,
                                            "offset": 1007
                                        },
                                        "end": {
                                            "line": 40,
                                            "column": 91,
                                            "offset": 1024
                                        }
                                    },
                                    "url": "utils/momento.html?file=utils/momento.lit",
                                    "title": "utils/momento",
                                    "children": [
                                        {
                                            "position": {
                                                "start": {
                                                    "line": 40,
                                                    "column": 74,
                                                    "offset": 1007
                                                },
                                                "end": {
                                                    "line": 40,
                                                    "column": 91,
                                                    "offset": 1024
                                                }
                                            },
                                            "type": "text",
                                            "value": "utils/momento"
                                        }
                                    ]
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 40,
                                    "column": 1,
                                    "offset": 934
                                },
                                "end": {
                                    "line": 40,
                                    "column": 91,
                                    "offset": 1024
                                }
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 38,
                    "column": 1,
                    "offset": 921
                },
                "end": {
                    "line": 40,
                    "column": 91,
                    "offset": 1024
                }
            }
        }
    ],
    "position": {
        "start": {
            "line": 1,
            "column": 1,
            "offset": 0
        },
        "end": {
            "line": 40,
            "column": 91,
            "offset": 1024
        }
    }
}