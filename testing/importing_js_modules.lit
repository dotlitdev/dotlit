# Importing JS Modules

References:

- https://github.com/WICG/import-maps
- https://github.com/tc39/proposal-import-meta

```js #destructuring
const x = {
  default: "a",
  b: "42",
  c: () => {},
};
const { default: y, b: z } = x;
return { y, z };

```
```>txt attached=true updated=1621550583088
{ y: 'a', z: '42' }
```





```js #skypack
const skypack = (pkg) => import(`https://cdn.skypack.dev/${pkg}`);
return skypack("canvas-confetti");

```
```>txt attached=true updated=1621550294972
{ create: [Function: confettiCannon],
  default: { [Function: fire] reset: [Function], create: [Function: confettiCannon] } }
```
```js #skypack
const skypack = (pkg) => import(`https://cdn.skypack.dev/${pkg}`);

return skypack("canvas-confetti").then((pkg) => {
  const { default: fire } = pkg;
  return fire();
});

```
```>txt attached=true updated=1621551049304
undefined
```
```js #skypack
const skypack = (pkg) => import(`https://cdn.skypack.dev/${pkg}`);

// I like async await
return (async (fn) => {
  const { default: fire } = await skypack("canvas-confetti");
  return fire();
})();

```
```>txt attached=true updated=1621551042809
undefined
```



```js #unpkg
const unpkg = (pkg) => import(`https://unpkg.com/${pkg}?module`);
return unpkg("canvas-confetti");

```
```>txt attached=true updated=1621550434223
{ create: [Function: confettiCannon],
  default: { [Function: fire] reset: [Function], create: [Function: confettiCannon] } }
```
```js #unpkg
const unpkg = (pkg) => import(`https://unpkg.com/${pkg}?module`);
return unpkg("canvas-confetti").then((pkg) => {
  return pkg.default();
});

```
```>txt attached=true updated=1621583914027
undefined
```

```js > txt !collapse
return lit.utils;

```
```>txt !collapse attached=true updated=1621552210678
{ inspect: 
   { [Function: inspect]
     colors: 
      { bold: [Object],
        italic: [Object],
        underline: [Object],
        inverse: [Object],
        white: [Object],
        grey: [Object],
        black: [Object],
        blue: [Object],
        cyan: [Object],
        green: [Object],
        magenta: [Object],
        red: [Object],
        yellow: [Object] },
     styles: 
      { special: 'cyan',
        number: 'yellow',
        boolean: 'yellow',
        undefined: 'grey',
        null: 'bold',
        string: 'green',
        date: 'magenta',
        regexp: 'red' } },
  diff: 
   { Diff: [Getter],
     diffChars: [Getter],
     diffWords: [Getter],
     diffWordsWithSpace: [Getter],
     diffLines: [Getter],
     diffTrimmedLines: [Getter],
     diffSentences: [Getter],
     diffCss: [Getter],
     diffJson: [Getter],
     canonicalize: [Getter],
     diffArrays: [Getter],
     applyPatch: [Getter],
     applyPatches: [Getter],
     parsePatch: [Getter],
     merge: [Getter],
     structuredPatch: [Getter],
     createTwoFilesPatch: [Getter],
     createPatch: [Getter],
     convertChangesToDMP: [Getter],
     convertChangesToXML: [Getter] },
  React: 
   { Fragment: {},
     StrictMode: {},
     Profiler: {},
     Suspense: {},
     Children: 
      { map: [Function: mapChildren],
        forEach: [Function: forEachChildren],
        count: [Function: countChildren],
        toArray: [Function: toArray],
        only: [Function: onlyChild] },
     Component: [Function: Component],
     PureComponent: [Function: PureComponent],
     __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: 
      { ReactCurrentDispatcher: [Object],
        ReactCurrentBatchConfig: [Object],
        ReactCurrentOwner: [Object],
        IsSomeRendererActing: [Object],
        assign: [Function: assign],
        ReactDebugCurrentFrame: [Object] },
     cloneElement: [Function: cloneElementWithValidation],
     createContext: [Function: createContext],
     createElement: [Function: createElementWithValidation],
     createFactory: [Function: createFactoryWithValidation],
     createRef: [Function: createRef],
     forwardRef: [Function: forwardRef],
     isValidElement: [Function: isValidElement],
     lazy: [Function: lazy],
     memo: [Function: memo],
     useCallback: [Function: useCallback],
     useContext: [Function: useContext],
     useDebugValue: [Function: useDebugValue],
     useEffect: [Function: useEffect],
     useImperativeHandle: [Function: useImperativeHandle],
     useLayoutEffect: [Function: useLayoutEffect],
     useMemo: [Function: useMemo],
     useReducer: [Function: useReducer],
     useRef: [Function: useRef],
     useState: [Function: useState],
     version: '17.0.1' },
  ReactDOM: 
   { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { Events: [Object] },
     createPortal: [Function: createPortal$1],
     findDOMNode: [Function: findDOMNode],
     flushSync: [Function: flushSync],
     hydrate: [Function: hydrate],
     render: [Function: render],
     unmountComponentAtNode: [Function: unmountComponentAtNode],
     unstable_batchedUpdates: [Function: batchedUpdates$1],
     unstable_createPortal: [Function: unstable_createPortal],
     unstable_renderSubtreeIntoContainer: [Function: renderSubtreeIntoContainer],
     version: '17.0.1' },
  PrismReactRenderer: { Prism: [Getter], default: [Getter], defaultProps: [Getter] },
  ReactEditor: { default: { [Function: Editor] defaultProps: [Object] } },
  unist: 
   { select: 
      { matches: [Function: matches],
        selectAll: [Function: selectAll],
        select: [Function: select] },
     source: [Function: source],
     filter: [Function: filter],
     visit: { [Function: visit] CONTINUE: true, SKIP: 'skip', EXIT: false },
     patchSource: { default: [Getter] },
     selectPosition: { atPos: [Getter], selectAll: [Getter] } },
  mdast: { to_string: [Function: to_string] },
  momento: { MsToRelative: [Getter], DatesToRelativeDelta: [Getter] },
  colors: { pickTextColorBasedOnBgColor: [Getter], stringToHex: [Getter] },
  safeEncoders: 
   { btoa: [Getter],
     atob: [Getter],
     b64EncodeUnicode: [Getter],
     b64DecodeUnicode: [Getter] },
  fns: 
   { NoOp: [Getter],
     Identity: [Getter],
     AsInt: [Getter],
     Undef: [Getter],
     getMeta: [Getter],
     posstr: [Getter],
     wait: [Getter],
     template: [Getter] },
  path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: null,
     posix: [Circular] },
  querystring: 
   { parse: [Function],
     decode: [Function],
     stringify: [Function],
     encode: [Function] },
  vfile: [Function: VFile],
  delete: [Function: _delete],
  read: [Function: read] }
```
```js !plugin type=repl of=module
export const repl = async (src, meta) => {
  const { btoa } = lit.utils.safeEncoders;
  const { transform } = lit.utils;
  const filename = (meta && meta.filename) || "untitled.js";
  let babel;
  try {
    babel = transform(filename, src);
  } catch (err) {
    return err.message;
  }
  const s = `/*${Date.now()}*/` + babel.code;
  const console = "fake me";
  const m = await import(`data:text/javascript;base64,${btoa(s)}`);
  return lit.utils.inspect(m);
};

```
```es repl=module
import fire from 'https://cdn.skypack.dev/canvas-confetti'

export const success = "yes"
export const issue = "module caching means it only executes once, had to add a cachebusting comment."

export default "Default export for output?"
export const cons = typeof console !== 'undefined' ? console : null
fire()
```
```>txt attached=true updated=1621583301540
{ cons: 
   { debug: [Function],
     error: [Function],
     log: [Function],
     info: [Function],
     warn: [Function],
     clear: [Function],
     dir: [Function],
     dirxml: [Function: dirxml],
     table: [Function],
     trace: [Function: trace],
     assert: [Function],
     count: [Function],
     countReset: [Function],
     profile: [Function: profile],
     profileEnd: [Function: profileEnd],
     time: [Function],
     timeLog: [Function],
     timeEnd: [Function],
     timeStamp: [Function: timeStamp],
     takeHeapSnapshot: [Function: takeHeapSnapshot],
     group: [Function],
     groupCollapsed: [Function],
     groupEnd: [Function],
     record: [Function: record],
     recordEnd: [Function: recordEnd],
     screenshot: [Function: screenshot] },
  default: 'Default export for output?',
  issue: 'module caching means it only executes once, had to add a cachebusting comment.',
  success: 'yes' }
```

```lang

```









