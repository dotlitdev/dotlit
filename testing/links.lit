# Links

Links in `.lit` are comprised of two main types **Standard** and **wiki-links**.
much of the complexity is a result of considering the second type.

[Standard](index.lit) and [Anchored/Section](#standard-links), [[wiki-links]], inline [references] and [undefined refs], footnotes[^1] and [external](https://exqmple.com) links


[references]: https://example.com "Example"
[^1]: footnote 
    With multi line `content`

## Standard links 

Should for the most part behave as expected, with the recommendation being that you should link to the source for other `.lit`/Mardown documents and the resultant `html` should convert to `.html` extention automatically for you.

For most sub types (I.e relative links, fragments, and external links) this introduces no additional complexity but for absolute links an assumption has to be made that either a. the file is served from the root of the host domain ie `/example/absolute.md` or b. that the rendered page includes a `baseUrl` mechanism.

## WikiLinks

These are a [convention introduced by Wiki](https://en.m.wikipedia.org/wiki/Help:Link) and rely on a few assumptions.

1. There is a canonical item to link to
2. Or a system for handling disambiguation

Many Markdown implementations tackle this by either

1. assuming an entirely Flat directory structure 
2. or providing a set of known permalinks to the resolver 

Interesting alternative solutions

1. [Describe [[Agora]].org approach]
2. behave as search links [find reference]


### To Do

- [x] with slashes: [[utils/fs]] 
- [ ] with fragments: [[utils/uri#fragments]]
  - [ ] only fragments like [[#Wikilinks]]
  - [ ] Hoist fragment
#### Bonus

- [ ] Resolve index file links without the need for excessive duplication. ie [[parser/parser]] or [[testing/index]] instead should just be able to write [[parser]] and [[testing]].



## Testing

Implementation is at [[../parser/parser]]



```js
return lit.parser.utils.links;
```
```>txt attached=true updated=1622634801996
{ resolveLinks: [Function: resolveLinks],
  wikiLinkOptions: [Function: wikiLinkOptions],
  resolver: [Function: p],
  linkToUrl: [Function: h],
  decorateLinkNode: [Function: m] }
```

```js babel=true
const { wikiLinkOptions, linkToUrl, decorateLinkNode } = lit.parser.utils.links

const resolve = wikiLinkOptions().pageResolver;

// console.info(resolve.toString())
// console.info(linkToUrl.toString())

const root = "/";
const type = "wikiLink";
const example = "testing/Links?foo=bar#baz|Title";
const resolved = resolve(example);
const link = {
  type,
  data: { permalink: resolved[0] },
  url: example,
  value: example,
};

const url = linkToUrl(link, root);

console.log({ root, example, resolved, link , url});

const decorated = decorateLinkNode(link);
return JSON.stringify(decorated, null, 2);

```
```>txt attached=true updated=1622634838851
{ root: '/',
  example: 'testing/Links?foo=bar#baz|Title',
  resolved: [ '/testing/links.lit', '/testing/links.md', '/testing/links' ],
  link: 
   { type: 'wikiLink',
     data: { permalink: '/testing/links.lit' },
     url: 'testing/Links?foo=bar#baz|Title',
     value: 'testing/Links?foo=bar#baz|Title' },
  url: '/testing/links.lit' }
{
  "type": "link",
  "data": {
    "external": false,
    "absolute": true,
    "fragment": false,
    "relative": false,
    "canonical": "/testing/links.lit",
    "wikilink": true,
    "hProperties": {
      "wikilink": true,
      "filepath": "",
      "root": "",
      "data": {
        "base": "/testing/links.lit",
        "external": false,
        "absolute": true,
        "fragment": false,
        "relative": false,
        "canonical": "/testing/links.lit",
        "wikilink": true
      }
    }
  },
  "url": "testing/links.html",
  "title": "testing/Links?foo=bar#baz|Title",
  "children": [
    {
      "type": "text",
      "value": "testing/Links?foo=bar#baz|Title"
    }
  ]
}
```






