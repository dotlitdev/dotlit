# Web Workers

## Table of Contents 

## References 
[Using Web Workers on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)

## Support



```js
return `Worker supported: ${!!window.Worker}`
```
```>txt attached=true updated=1619650950719
Worker supported: true
```

## Implementation
```>js worker.js #implementation
// postMessage("hi")
console.log("anyone here?")
```
```>js worker2.js #implementation
postMessage("hi")
console.log("anyone here?")
```
Check if web server has up to date content yet?

```js
return (async fn => {
  const resp = await fetch('./worker.js')
  return resp.status + "\n" + (await resp.text())
})()
```
```>txt attached=true updated=1619554600648
200
// postMessage("hi")
console.log("anyone here?")
```
### Testing

~Current REPL results in script execution from cross-origin? Due to data:uri~ was resolving the raw event from postMessage not `ev.data` which is necessary.

```js
return new Promise((resolve,reject) => {
  let myWorker;
  try {
    myWorker = new Worker('worker2.js')
    myWorker.onmessage = (ev) => resolve(ev.data)
    myWorker.onerror = (err) => {
      resolve({msg: "worker.onerror", err})
    }
  } catch(err) {
    resolve({msg: "Caught err", err})
  }
  
})
```
```>txt attached=true updated=1619651153720
hi
```
```js !viewer of=esm2
export const viewer = ({node, React}) => {
  const rce = React.createElement
  const {useState, useEffect} = React
  const [resp, setResp] = useState(null)
  const [run, setRun] = useState(0)
  
  const exec = ev => {
    ev && ev.stopPropagation()
    setRun(run+1)
    load(node.data.value)
    return false
  }

  useEffect( args => {
    if(run===0 && node.properties.meta.exec==="onload")
       exec()
  },[])

  async function load(src) {
     alert("running Web worker ")
     const p = new Promise((resolve,reject) => {
  let myWorker;
  try {
    alert("in promise")
    myWorker = new Worker('worker2.js')
    myWorker.onmessage = (msg) => {
       console.log("WORKER MSG", msg)
       resolve("received msg")
    }
    myWorker.onerror = (err) => {
      alert("onerror")
      resolve({msg: "worker.onerror", err})
    }
  } catch(err) {
    alert("catch")
    resolve({msg: "Caught err", err})
  }
   alert("end")
  })
  p.then( res => {
    alert("reslved")
    setResp(res.msg)
  }).catch( err => alert(err))
  }

  const btn = rce('button', {onClick: exec}, "Run " + run)
  const t = rce('div', null, [btn, resp])
  return t
}
if(typeof module !== "undefined") module.exports.viewer = viewer
```
```>txt attached=true updated=1619649298683 !error
undefined
```

```esm2 !below
A hack
````
