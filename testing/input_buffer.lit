# Input Buffer

```js !collapse exec=onload < log/checkforinput.js > md !info
```
```>md !warn attached=true updated=1620508210977
Checking for input...
```




## Table of Contents
## About

*Inspired by [mymind](https://twitter.com/mymind) iOS app, [Blackbox](https://twitter.com/BlackboxPuzzles) ios game and terrible ios clipboards.*

**aka:** [Peripheral](https://en.m.wikipedia.org/wiki/Peripheral), Input, AUX (Auxiliary)

- https://www.electronics-tutorials.ws/logic/logic_9.html

> A peripheral or peripheral device is ancillary device used to put information into and get information out of the computer.

> peripheria, from Ancient Greek περιφέρεια (periphéreia, “the line around the circle, circumference, part of a circle, an arc, the outer surface”)

Universal ios sharesheet ~~app~~webapp, anything shared to the app is stored, catelogued, linked and editable, sortable, searchable and explorable offline in the app.

> I'm prepared to wait as long as needed for Elon Musks NeuraLink to reach primetime but, We cant afford to sit around till then, we need incremental improvements of our Peripherals, over the Keyboard, Mouse and Touch Screens we have today.

## To Do

- [x] On load check for url query string `input`.
  - [x] If `input` is available, decode markdown.
  - [ ] Check document for section corresponding to current date, if available append `input` other wise create with `input`.

## Implementation

### Core


```js log/checkforinput.js !collapse
const checkForInput = () => {
  const insp = lit.utils.inspect
  const qs = lit.utils.querystring

  const search = location.search
  const query = search
              && qs.parse(search.slice(1))

  if (query?.input) {
    const input = query.input
    delete query.input
    const qsWoInput = qs.stringify(query)
    window.history.replaceState(null,null,'?' + qsWoInput)
    return `***Captured Input:***

${input}`
    } else {
      return "*No input detected.*"
  }
}
return checkForInput()
```

```js !collapse > md #mockinput
const qs = location.search.slice(1)
return `[Mock Input](?${qs + (qs ? '&' : '')}input=${encodeURIComponent("- [ ] some **Input**")})`
```
```>md #mockinput attached=true updated=1620508006145
[Mock Input](?file=testing/input_buffer.lit&input=-%20%5B%20%5D%20some%20**Input**)
```

```js exec=onload !collapse > md
const today = (new Date()).toISOString().split("T")[0]

const checkForTodayFile = async () => { 
  let stat
  try {
  stat = await lit.fs.readStat(`testing/log/${today}.lit`)
  } catch(err) {}
  const msg = `*Today* is **${today}**, exists: *${!!stat && !!(stat.local.stat || stat.remote.stat)}*`
  lit.file.message(msg, this.position)
  return msg + `

Create it now? [[testing/log/${today}]]
`
}

return checkForTodayFile()
```
```>md attached=true updated=1620564557770
### Today is 2021-05-09
```

### Bookmarklet

```js !plugin type=viewer of=bookmarklet
export const viewer = ({node, React}) => {
  const rc = React.createElement
  const meta = node.properties.meta
  return rc('span', null, ['Bookmarklet: ', rc('a', {href: `javascript:(function(){${node.data.value}})()`}, `Run ${meta && meta.id ? meta.id: "bookmarklet"}` )])
}
```

```js !below viewer=bookmarklet id=Input
alert("Success!")
```

### iOS shortcut

...

















