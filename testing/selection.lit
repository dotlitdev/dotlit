# More powerful selection

Ie multi cell and section selection.

```js !plugin type=data id=fakePos
export const data = {
  start: {
    line: 1,
    column: 1,
    offset: 0
  },
  end: {
    line: 99,
    column: 99,
    offset: 999999
  }
}
```

```js !plugin id=selection type=menu

export const menu = (ctx, {React, Menu}) => {
  const pos = lit.file.data.plugins.data.fakePos
  const {filter, select, selectPosition} = lit.utils.unist
  const rc = React.createElement

  const secFromCell = (pos) => {
    const secs = selectPosition.selectAll('section', ctx.selectedCell, lit.ast)
   const last = secs.slice(-1)[0]
   console.log("Sections", secs, last)
   ctx.setSelectedCell(last.position)
  }

  const selectAll = rc('span', {onClick: () => ctx.setSelectedCell(lit.ast.position)}, 'Select All')

  const selectSec = rc('span', {onClick: () => ctx.setSelectedCell(lit.ast.position)}, 'Select Section')

  return rc( Menu, {
    title:"Selection",
    disabled: false,
  }, [selectAll, selectSec])
}
```

```js
const {filter, select, selectPosition} = lit.utils.unist
const is = t => node => {
  console.log(node.type)
  return node.type === t
}

// return lit.ast
// return filter.toString()
// filter(lit.ast, {cascade: false } , is('heading'))
return selectPosition
```
```>txt attached=true updated=1620345671136
{ '$$typeof': {},
  type: [Function: App],
  key: null,
  ref: null,
  props: 
   { root: '/',
     fs: 
      { init: [Function: bound init],
        readFile: [Function],
        writeFile: [Function],
        unlink: [Function],
        readdir: [Function],
        mkdir: [Function],
        rmdir: [Function],
        rename: [Function],
        stat: [Function],
        lstat: [Function],
        readlink: [Function],
        symlink: [Function],
        backFile: [Function],
        du: [Function],
        _deactivationPromise: {},
        _deactivationTimeout: 213,
        _activationPromise: null,
        _operations: {},
        _initPromise: {},
        readStat: [Function],
        _backend: [Object] },
     file: 
      { data: [Object],
        messages: [],
        history: [Object],
        cwd: '/',
        contents: '# More powerful selection\n\nIe multi cell and section selection.\n\n```js !plugin type=data id=fakePos\nexport const data = {\n  start: {\n    line: 1,\n    column: 1,\n    offset: 0\n  },\n  end: {\n    line: 99,\n    column: 99,\n    offset: 999999\n  }\n}\n```\n\n```js !plugin id=selection type=menu\nexport const menu = (ctx, {React, Menu}) => {\n  const pos = lit.file.data.plugins.data.fakePos\n  const rc = React.createElement\n\n  const selectAll = rc(\'span\', {onClick: () => ctx.setSelectedCell(lit.ast.position)}, \'Select All\')\n\n  return rc( Menu, {\n    title:"Selection",\n    disabled: false,\n  }, [selectAll])\n}\n```\n\n```js\nconst {filter, select, selectPosition} = lit.utils.unist\nconst is = t => node => {\n  console.log(node.type)\n  return node.type === t\n}\n\n// return lit.ast\n// return filter.toString()\n// filter(lit.ast, {cascade: false } , is(\'heading\'))\nreturn lit.notebook\n```\n```>txt attached=true updated=1620345651577\nundefined\n```\n',
        result: [Object] },
     result: 
      { '$$typeof': {},
        type: {},
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
```
