# Compact Manifest

Reducing the serialised size of a manifest of all files in a `.lit` notebook.

## Exploring

Trying out [compact-prefix-tree](https://github.com/sidvishnoi/compact-prefix-tree)
```js
return (async fn => {
  const {CompactPrefixTree} = await import('https://cdn.skypack.dev/compact-prefix-tree')

  const manifest = await fetch('/manifest.json').then(res => res.json())
  const keys = manifest.nodes.map(n=>n.id)
  const trie = new CompactPrefixTree(keys)

  const before = JSON.stringify(manifest.nodes.reduce((m,n)=>{m[n.id] = null; return m }, {}))
  //console.log(before)
  const after = JSON.stringify(trie.T)
  // console.log(trie.T)
  await lit.fs.writeFile('/testing/compactManifest1.json', after, 'utf8')
  return `${before.length}->${after.length}. A ${100-(after.length/before.length*100)}% reduction in size.`
})()
```
```>txt attached=true updated=1622980171980
{"/404.lit":null,"/an_acceptable_development_evironment.lit":null,"/articles/ideas_for.lit":null,"/cli/cli.lit":null,"/client/client.lit":null,"/components/components.lit":null,"/config.lit":null,"/digital_gardens.lit":null,"/divergence_from_markdown.lit":null,"/dummy/ðŸ”¥.lit":null,"/execute_code_cells.lit":null,"/filesystem/index.lit":null,"/index.lit":null,"/literate_programming.lit":null,"/meta.lit":null,"/meta/files_and_links.lit":null,"/meta/github_workflows.lit":null,"/meta/styling_and_themes.lit":null,"/meta/the_bazaar.lit":null,"/parser/parser.lit":null,"/persist_to_github.lit":null,"/plugin_system.lit":null,"/plugins/viewers/md/admonitions.lit":null,"/plugins/viewers/plantuml/plantuml.lit":null,"/prismjs_and_a_simple_editor.lit":null,"/renderer/renderer.lit":null,"/repl/index.lit":null,"/repls.lit":null,"/scratch_pad.lit":null,"/seedling.lit":null,"/taking_notes.lit":null,"/testing/autoformatting_cell_source.lit":null,"/testing/compact_manifest.lit":null,"/testing/cors_proxy.lit":null,"/testing/esm_viewer_repl.lit":null,"/testing/fuzzy_text_search.lit":null,"/testing/importing_js_modules.lit":null,"/testing/index.lit":null,"/testing/input_buffer.lit":null,"/testing/isomorphic_git.lit":null,"/testing/lightningfs.lit":null,"/testing/links.lit":null,"/testing/local_remote_files.lit":null,"/testing/log/2021-05-09.lit":null,"/testing/log/2021-05-11.lit":null,"/testing/log/2021-05-12.lit":null,"/testing/log/2021-05-13.lit":null,"/testing/log/2021-05-15.lit":null,"/testing/log/2021-05-16.lit":null,"/testing/log/2021-05-17.lit":null,"/testing/log/2021-05-18.lit":null,"/testing/log/2021-05-19.lit":null,"/testing/log/2021-05-20.lit":null,"/testing/log/2021-05-21.lit":null,"/testing/log/2021-05-23.lit":null,"/testing/log/2021-05-25.lit":null,"/testing/log/2021-05-27.lit":null,"/testing/log/2021-05-29.lit":null,"/testing/log/2021-05-30.lit":null,"/testing/log/2021-05.lit":null,"/testing/log/2021-06-01.lit":null,"/testing/log/2021-06-02.lit":null,"/testing/log/2021-06-04.lit":null,"/testing/log/2021-06-05.lit":null,"/testing/log/2021-w20.lit":null,"/testing/log/2021-w21.lit":null,"/testing/log/2021.lit":null,"/testing/log/day.lit":null,"/testing/paths.lit":null,"/testing/private_files.lit":null,"/testing/runkit.lit":null,"/testing/selection.lit":null,"/testing/serviceworker.lit":null,"/testing/web_workers.lit":null,"/throwaway/codevaluebug.lit":null,"/time_to_pudding.lit":null,"/utils/index.lit":null,"/utils/momento.lit":null,"/viewers.lit":null,"/wiki-links.lit":null,"client/index.jsx":null,"components/Document.jsx":null,"components/Header.jsx":null,"components/App.jsx":null,"components/SelectionContext.jsx":null,"components/Cell.jsx":null,"components/CellMenu.jsx":null,"components/Editor.jsx":null,"components/CodeMeta.jsx":null,"components/base/Codeblock.jsx":null,"components/base/Link.jsx":null,"components/Backlinks.jsx":null,"../plugins/viewers/esm.js":null,"../plugins/transformers/prettier.js":null,"../manifest.json":null,"plugins/other/cors-proxy.js":null,"testing/repl-output.svg":null,"/transfomers.lit":null,"/renderer/viewers.lit":null,"test.js":null,"test.ts":null,"test.jsx":null,"overview.svg":null,"/interactive_notebooks.lit":null,"/wiki.lit":null,"/guided_learning.lit":null,"/rapid_prototyping.lit":null,"/transformers.lit":null,"influences.svg":null,"manifest.json":null,"/divergence_from_markdown.html":null,"/dummy/ðŸ”¥.html":null,"/index.html":null,"/meta/the_bazaar.html":null,"/plugins/viewers/plantuml/plantuml.html":null,"/testing/log/2021-05-29.html":null,"/testing/log/2021-06-01.html":null,"/testing/log/2021-06-02.html":null,"/testing/log/day.html":null,"/throwaway/codevaluebug.html":null,"../.github/workflows/generate.yaml":null,"meta/.github/workflows/npm-publish.yaml":null,"client/style.styl":null,"client/styles/cell.styl":null,"client/styles/codecell.styl":null,"client/styles/cellmenu.styl":null,"client/styles/viewers.styl":null,"/unified.lit":null,"/remark.lit":null,"/markdown.lit":null,"/utils/unist-patch-source.lit":null,"parser/index.js":null,"parser/frontmatter.js":null,"parser/sections.js":null,"parser/codeblocks.js":null,"parser/mdblocks.js":null,"parser/links.js":null,"/config.lit#github":null,"utils/fs-promises-gh-utils.js":null,"plugins/viewers/meta.js":null,"/meta/settings.lit#plantuml-viewer--repl":null,"plugins/repls/module.js":null,"/components.lit":null,"renderer/index.jsx":null,"renderer/extractPlugins.js":null,"renderer/transcludeCode.js":null,"index.js":null,"/index":null,"/utils/fs.lit":null,"/utils/uri.lit":null,"/undefined.lit":null,"filename":null,"dummy/ðŸ”¥.lit":null,"dummy/example.svg":null,"dummy/plain.txt":null,"dummy/data.csv":null,"runkit-express-cors-proxy.js":null,"../plugins/other/cors-proxy.js":null,"repl-output.svg":null,"testing/testing/repl-output.svg":null,"../plugins/viewers/search.js":null,"../plugins/repls/search.js":null,"../plugins/repls/module.js":null,"custom-module.mjs":null,"/testing/log/2021-w23.lit":null,"testing/log/checkforinput.js":null,"testing/log/today.js":null,"log/checkforinput.js":null,"log/today.js":null,"testing/log/day.lit":null,"../utils/git-commit-all.js":null,"gitworker.js":null,"fsviewer.jsx":null,"/agora.lit":null,"/testing/undefined.lit":null,"/parser.lit":null,"testing/test.txt":null,"/testing/log/2021-w22.lit":null,"/distributed_knowledge_graph.lit":null,"/experimental_social_network.lit":null,"/testing/log/2021-06.lit":null,"/testing/log/2021-w24.lit":null,"rk.jsx":null,"runkit-repl-endpoint.js":null,"../plugins/repls/node.js":null,"testing/getserviceworker--sw":null,"../serviceworker.js":null,"worker.js":null,"worker2.js":null,"utils/functions.js":null,"utils/console.js":null,"utils/colors.js":null,"utils/safe-encoders.js":null,"utils/unist-util-patch-source.js":null,"utils/unist-util-select-position.js":null,"utils/fs-promises-utils.js":null,"utils/git-commit-all.js":null,"utils/momento.js":null,"plugins/viewers/md/index.jsx":null,"viewers/meta.js":null,"plugins/viewers/diff.js":null}
5978->4663. A 21.997323519571765% reduction in size.
```



Looking up a file, check for existence:
```js
return (async (fn) => {
  const { CompactPrefixTree, getWordsFromTrie } = await import(
    "https://cdn.skypack.dev/compact-prefix-tree"
  );

  const json = await fetch("/testing/compactManifest1.json").then((res) =>
    res.json()
  );
  // return json
  const keys = getWordsFromTrie(json);
  const trie = new CompactPrefixTree(Array.from(keys));
  return trie.prefix("testing/log/");
})();

```
```>txt  updated=1621380328935
{ prefix: 'testing/log/day.lit', isProper: true }
```
```>txt updated=1621380061074
{ prefix: '', isProper: false }
```

## A Start

```js
return (async (fn) => {
  const { CompactPrefixTree, getWordsFromTrie } = lit.utils.compactPrefixTree;

  const resp = await fetch("/compactManifest.json");
  const data = await resp.json();
  const keyset = getWordsFromTrie(data);
  const list = Array.from(keyset).map(k=>`/${k}`)
  console.log(list[50])
  return list.length
})();

```
```>txt attached=true updated=1622379267444
/parser/frontmatter.js
159
```

- [ ] Use the above to sync local file system instead of manifest.
```js #sync !collapse
// fetch all remote files and store
// locally if they don't already exist

const getList = async () => {
  const { CompactPrefixTree, getWordsFromTrie } = lit.utils.compactPrefixTree;

  const resp = await fetch("/compactManifest.json");
  const data = await resp.json();
  const keyset = getWordsFromTrie(data);
  const list = Array.from(keyset).map((k) => `/${k}`);
  return list;
};

return (async (fn) => {
  const t = Date.now();
  const p = lit.utils.path;
  const writePLocal = async (...args) => {};

  const list = await getList();

  const existed = []
  const duds = [];
  const synced = [];
  const errors = [];
  const res = await Promise.all(
    list.map(async (n) => {
      try {
        const stats = await lit.fs
          .readStat(n)
          .then((x) => x)
          .catch((err) => {
            duds.push(n);
            return { local: {}, remote: {} };
          });
        if (stats.local.stat) {
          existed.push(n)
        }
        else if (stats.remote.stat) {
          await lit.fs.writeFile(n, stats.remote.value, {
            localOnly: true,
            encoding: "utf8",
          });
          synced.push(n);
        } else {
          errors.push(n)
        }

        return n;
      } catch (err) {
        errors.push(n + " : " + err.message);
      }
    })
  );
  console.log(
    `Synced ${synced.length + existed.length}/${list.length} files in ${
      (Date.now() - t) / 1000
    } seconds. Fetched: ${synced.length} Duds: ${duds.length} Errors: ${errors.length} Skipped: ${existed.length}`
  );
  return { duds, errors };
})();

```
```>txt attached=true updated=1622380268774
Synced 156/159 files in 3.242 seconds. Fetched: 0 Duds: 0 Errors: 3 Skipped: 156
{ duds: [],
  errors: 
   [ '/testing/uploads/B98FC982-EB37-427B-A7D7-D872628323C0.png',
     '/testing/uploads/graph.png',
     '/testing/uploads/EC0FF74E-93A5-496D-A5A7-1F2FC1885F77.png.png' ] }
```


