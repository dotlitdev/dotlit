# Fuzzy text search

Related

- [[testing/compact_manifest]]

## Fuse.js

https://fusejs.io/

https://dev.to/noclat/using-fuse-js-with-react-to-build-an-advanced-search-with-highlighting-4b93

```js !collapse #intro
return (async (fn) => {
  const { default: Fuse } = await import(
    "https://cdn.jsdelivr.net/npm/fuse.js@6.4.6/dist/fuse.esm.js"
  );
  const manifest = await fetch("/manifest.json").then((res) => res.json());
  const fuse = new Fuse(manifest.nodes, {
    includeScore: true,
    keys: ["title", "id"],
  });

  // 3. Now search!
  return fuse.search("../../..",{limit:5});
})();

```
```js !plugin !collapse type=repl of=search
export const repl = async (src, meta) => {
  const t = Date.now();

  const { default: Fuse } = await import(
    "https://cdn.jsdelivr.net/npm/fuse.js@6.4.6/dist/fuse.esm.js"
  );
  // const manifest = await fetch("/manifest.json").then((res) => res.json());
  // Recursively builds JSX output adding `<mark>` tags around matches
  const highlight = (value, indices = [], i = 1) => {
    const pair = indices[indices.length - i];
    return !pair
      ? value
      : `${highlight(
          value.substring(0, pair[0]),
          indices,
          i + 1
        )}***${value.substring(pair[0], pair[1] + 1)}***${value.substring(
          pair[1] + 1
        )}`;
  };
  const fullLocal = await (async (fn) => {
    const path = lit.utils.path;
    const all = [];
    const visit = async (root) => {
      try {
        const list = await lit.fs.readdir(root);
        return Promise.all(
          list.map(async (key) => {
            const pathname = path.join(root, key);
            const stat = await lit.fs.stat(pathname);
            let contents;
            if (key === ".git" || !key) {
            } else if (stat.type === "dir") await visit(pathname);
            else if (pathname.endsWith(".lit"))
              contents = await lit.fs.readFile(pathname, {
                encoding: "utf8",
                localOnly: true,
              }); //.slice(0,10);
            const item = { pathname, type: stat.type, contents };
            all.push(item);
            return item;
          })
        );
      } catch (err) {
        alert(err.message);
      }
    };

    await visit("/");
    return all;
  })();

  // return fullLocal

  const fuse = new Fuse(fullLocal, {
    ignoreLocation: true,
    includeScore: true,
    includeMatches: true,
    ignoreFieldNorm: true,
    minMatchCharLength: 4,
    keys: ["pathname", "contents"],
  });

  // 3. Now search!
  const query = src.trim();
  const msg = `Results for search "**${query}**". In **${
    (Date.now() - t) / 1000
  }** seconds.\n\n`;

  return (
    msg +
    fuse
      .search(query, { limit: 10 })
      //.map(x=>x.matches.map(x=>x.indices))
      .map((x) => [x.score, x.item.pathname, x.refIndex, x.matches])
      .map(
        ([score, pathname, index, matches]) => `1. [${pathname}](${pathname}) 

    > ${matches
      .map(({ indices, value }) => highlight(value, indices))
      .join(" ... ")}`
      )
      .join("\n")
  );
};

```
```js search.jsx !plugin !collapse type=viewer Babel=true of=search2
import Fuse from "https://cdn.jsdelivr.net/npm/fuse.js@6.4.6/dist/fuse.esm.js";
export const viewer = ({ node, React }) => {

  const {useEffect,useState} = React
  const [msg, setMsg] = useState('Searching...')
  // const manifest = await fetch("/manifest.json").then((res) => res.json());

  // Recursively builds JSX output adding `<mark>` tags around matches
  const highlight = (value, indices = [], i = 1) => {
    const pair = indices[indices.length - i];
    return !pair ? (
      value
    ) : (
      <>
        {highlight(value.substring(0, pair[0]), indices, i + 1)}
        <mark>{value.substring(pair[0], pair[1] + 1)}</mark>
        {value.substring(pair[1] + 1)}
      </>
    );
  };

  const fullLocal = async (fn) => {
    const path = lit.utils.path;
    const all = [];
    const visit = async (root) => {
      try {
        const list = await lit.fs.readdir(root);
        return Promise.all(
          list.map(async (key) => {
            const pathname = path.join(root, key);
            const stat = await lit.fs.stat(pathname);
            let contents;
            if (key === ".git" || !key) {
            } else if (stat.type === "dir") await visit(pathname);
            else if (pathname.endsWith(".lit"))
              contents = await lit.fs.readFile(pathname, {
                encoding: "utf8",
                localOnly: true,
              }); //.slice(0,10);
            const item = { pathname, type: stat.type, contents };
            all.push(item);
            return item;
          })
        );
      } catch (err) {
        alert(err.message);
      }
    };

    await visit("/");
    return all;
  };

  // return fullLocal

  useEffect(async fn => {
     const t = Date.now();
const fuse = new Fuse(await fullLocal(), {
    ignoreLocation: true,
    includeScore: true,
    includeMatches: true,
    ignoreFieldNorm: true,
    minMatchCharLength: 4,
    keys: ["pathname", "contents"],
  });

  // 3. Now search!
  const query = node.data.value.trim();

  return (
    <div>
      <span>{msg}</span>
    </div>
  );
};

```



```text repl=search > md
test
```
```>md attached=true updated=1621893672161
Results for search "**test**". In **0.07** seconds.

1. [/testing/lightningfs.lit](/testing/lightningfs.lit) 
1. [/testing/isomorphic_git.lit](/testing/isomorphic_git.lit) 
1. [/testing/fuzzy_text_search.lit](/testing/fuzzy_text_search.lit) 
1. [/testing/serviceworker.lit](/testing/serviceworker.lit) 
1. [/testing/importing_js_modules.lit](/testing/importing_js_modules.lit) 
1. [/testing/input_buffer.lit](/testing/input_buffer.lit) 
1. [/testing/local_remote_files.lit](/testing/local_remote_files.lit) 
1. [/testing/autoformatting_cell_source.lit](/testing/autoformatting_cell_source.lit) 
1. [/testing/runkit.lit](/testing/runkit.lit) 
1. [/testing/compact_manifest.lit](/testing/compact_manifest.lit) 
```

```>md updated=1621870142091
Results for search "**fuzz**". In **0.074** seconds.

1. [/testing/fuzzy_text_search.lit](/testing/fuzzy_text_search.lit) 0.000001
1. [/testing/log/2021-05-23.lit](/testing/log/2021-05-23.lit) 0.001
1. [/functions.lit](/functions.lit) 0.25
1. [/testing/input_buffer.lit](/testing/input_buffer.lit) 0.25
1. [/testing/full.json](/testing/full.json) 0.5
1. [/utils/functions.js](/utils/functions.js) 0.5
1. [/index.lit](/index.lit) 0.5
1. [/execute_code_cells.lit](/execute_code_cells.lit) 0.5
1. [/plugin_system.lit](/plugin_system.lit) 0.5
1. [/scratch_pad.lit](/scratch_pad.lit) 0.5
1. [/prismjs_and_a_simple_editor.lit](/prismjs_and_a_simple_editor.lit) 0.5
1. [/testing/lightningfs.lit](/testing/lightningfs.lit) 0.5
1. [/testing/isomorphic_git.lit](/testing/isomorphic_git.lit) 0.5
1. [/testing/runkit.lit](/testing/runkit.lit) 0.5
1. [/testing/selection.lit](/testing/selection.lit) 0.5
```





## FuzzySet

https://github.com/Glench/fuzzyset.js

```js
return import('https://cdn.skypack.dev/fuzzyset').then( FuzzySet => {

  const f = new FuzzySet.default()
  f.add("the text of mine")
  f.add("the text of someone else")
  f.add("other texts")
  return f.get("text of")
})

```
```>txt attached=true updated=1621778112764
[ [ 0.4375, 'the text of mine' ] ]
```
