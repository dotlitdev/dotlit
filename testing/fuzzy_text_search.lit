# Fuzzy text search

Related

- [[testing/compact_manifest]]

## Fuse.js

https://fusejs.io/

https://dev.to/noclat/using-fuse-js-with-react-to-build-an-advanced-search-with-highlighting-4b93

https://fusejs.io/examples.html#extended-search

```js !collapse #intro
return (async (fn) => {
  const { default: Fuse } = await import(
    "https://cdn.jsdelivr.net/npm/fuse.js@6.4.6/dist/fuse.esm.js"
  );
  const manifest = await fetch("/manifest.json").then((res) => res.json());
  const fuse = new Fuse(manifest.nodes, {
    includeScore: true,
    keys: ["title", "id"],
  });

  // 3. Now search!
  return fuse.search("../../..",{limit:5});
})();

```
```>js ../plugins/viewers/search.js !plugin !collapse type=Viewer of=search2
export const viewer = ({ node, React }) => {
  const { useState } = React;
  const meta = node?.properties?.meta || {};

  const [results, setResults] = useState(null);

  const search = async (src) => {
    const t = Date.now();

    const { default: Fuse } = await import(
      "https://cdn.jsdelivr.net/npm/fuse.js@6.4.6/dist/fuse.esm.js"
    );
    const manifest = meta.manifest
      ? await fetch("/manifest.json").then((res) => res.json())
      : {};
    // Recursively builds JSX output adding `<mark>` tags around matches
    const highlight = (value, indices = [], i = 1) => {
      const pair = indices[indices.length - i];
      return !pair ? (
        value
      ) : (
        <>
          {highlight(value.substring(0, pair[0]), indices, i + 1)}
          <mark>{value.substring(pair[0], pair[1] + 1)}</mark>
          {value.substring(pair[1] + 1)}
        </>
      );
    };
    const fullLocal = await (async (fn) => {
      const path = lit.utils.path;
      const all = [];
      const visit = async (root) => {
        try {
          const list = await lit.fs.readdir(root);
          return Promise.all(
            list.map(async (key) => {
              const pathname = path.join(root, key);
              const stat = await lit.fs.stat(pathname);
              let contents;
              if (
                key === ".git" ||
                !key ||
                pathname.endsWith(lit.location.src)
              ) {
              } else if (stat.type === "dir") await visit(pathname);
              else if (pathname.endsWith(".lit")) {
                contents = await lit.fs.readFile(pathname, {
                  encoding: "utf8",
                  localOnly: true,
                }); //.slice(0,10);
                contents.split("\n").map((line, index) =>
                  all.push({
                    pathname,
                    type: "line",
                    contents: line,
                    lineNo: index,
                  })
                );
              }
              const item = { pathname, type: stat.type, contents: pathname };
              all.push(item);
              return item;
            })
          );
        } catch (err) {
          alert(err.message);
        }
      };

      await visit(meta.ns || "/");
      return all;
    })();

    // return fullLocal

    const fuse = new Fuse(fullLocal, {
      ignoreLocation: true,
      includeScore: true,
      includeMatches: true,
      ignoreFieldNorm: true,
      minMatchCharLength: 4,
      useExtendedSearch: true,
      keys: ["contents"],
    });

    // 3. Now search!
    const query = src.trim();
    const msg = (
      <div>
        Results for <span>{query}</span>. In{" "}
        <span>{(Date.now() - t) / 1000}</span> seconds.
      </div>
    );
    const res = fuse
      .search(query, { limit: 10 })
      //.map(x=>x.matches.map(x=>x.indices))
      .map((x) => [
        x.score,
        x.item.pathname,
        x.refIndex,
        x.matches,
        x.item.type,
        x.item.lineNo,
        x.item.contents,
      ]);
    setResults({ msg, results: res });
  };

  return (
    <div>
      <input onChange={(ev) => search(ev.target.value, meta)} />
      <div>{results && results.msg}</div>
      <div>
        {results &&
          results.results.map((res) => {
            const [score, pathname, index, matches, type, lineNo, val] = res;
            return (
              <div>
                <div>{pathname}</div>
                <span>{(1 - score) * 100}</span>{" "}
                <span>
                  {false &&
                    matches.map(({ indices, value }) =>
                      highlight(value, indices)
                    )}
                </span>
              </div>
            );
          })}
      </div>
    </div>
  );
};

```

```>search2 ns=/testing/log

```
```>js ../plugins/repls/search.js !plugin !collapse type=repl of=search
export const repl = async (src, meta) => {
  const t = Date.now();

  const { default: Fuse } = await import(
    "https://cdn.jsdelivr.net/npm/fuse.js@6.4.6/dist/fuse.esm.js"
  );
  const manifest = meta.manifest
    ? await fetch("/manifest.json").then((res) => res.json())
    : {};
  // Recursively builds JSX output adding `<mark>` tags around matches
  const highlight = (value, indices = [], i = 1) => {
    const pair = indices[indices.length - i];
    return !pair
      ? value
      : `${highlight(
          value.substring(0, pair[0]),
          indices,
          i + 1
        )}***${value.substring(pair[0], pair[1] + 1)}***${value.substring(
          pair[1] + 1
        )}`;
  };
  const fullLocal = await (async (fn) => {
    const path = lit.utils.path;
    const all = [];
    const visit = async (root) => {
      try {
        const list = await lit.fs.readdir(root);
        return Promise.all(
          list.map(async (key) => {
            const pathname = path.join(root, key);
            const stat = await lit.fs.stat(pathname);
            let contents;
            if (key === ".git" || !key || pathname.endsWith(lit.location.src)) {
            } else if (stat.type === "dir") await visit(pathname);
            else if (pathname.endsWith(".lit")) {
              contents = await lit.fs.readFile(pathname, {
                encoding: "utf8",
                localOnly: true,
              }); //.slice(0,10);
              contents.split("\n").map((line, index) =>
                all.push({
                  pathname,
                  type: "line",
                  contents: line,
                  lineNo: index,
                })
              );
            }
            const item = { pathname, type: stat.type, contents: pathname };
            all.push(item);
            return item;
          })
        );
      } catch (err) {
        alert(err.message);
      }
    };

    await visit(meta.ns || "/");
    return all;
  })();

  // return fullLocal

  const fuse = new Fuse(fullLocal, {
    ignoreLocation: true,
    includeScore: true,
    includeMatches: true,
    ignoreFieldNorm: true,
    minMatchCharLength: 4,
    useExtendedSearch: true,
    keys: ["contents"],
  });

  // 3. Now search!
  const query = src.trim();
  const msg = `Results for search "**${query}**". In **${
    (Date.now() - t) / 1000
  }** seconds.\n\n`;

  return (
    msg +
    fuse
      .search(query, { limit: 10 })
      //.map(x=>x.matches.map(x=>x.indices))
      .map((x) => [
        x.score,
        x.item.pathname,
        x.refIndex,
        x.matches,
        x.item.type,
        x.item.lineNo,
        x.item.contents,
      ])
      .map(
        ([score, pathname, index, matches, type, lineNo, val]) =>
          `1. **[${pathname}](${pathname})** *${(1 - score).toFixed(2) * 100}*

      ${type} ${lineNo} ${val}`
      )
      .join("\n")
  );
};

```


```text repl=search > md
plugin !plugins
```
```>md attached=true updated=1621900017253
Results for search "**plugin !plugins**". In **0.093** seconds.

1. **[/scratch_pad.lit](/scratch_pad.lit)** *100*

      line 111 - [x] plugin 
1. **[/scratch_pad.lit](/scratch_pad.lit)** *100*

      line 140 **Plugin attributes**
1. **[/scratch_pad.lit](/scratch_pad.lit)** *100*

      line 261 ```js !plugin of=foo
1. **[/scratch_pad.lit](/scratch_pad.lit)** *100*

      line 281 - [ ] UML: See [custom plugin](/meta/settings.lit#plantuml-viewer--repl)
1. **[/plugin_system.lit](/plugin_system.lit)** *100*

      line 0 # ðŸ”Œ Plugin system
1. **[/plugin_system.lit](/plugin_system.lit)** *100*

      line 2 `.lit` has a flexible Plugin system, primarily to allow the author to create custom [[Viewers]] and [[REPLs]] but also includes various other types.
1. **[/plugin_system.lit](/plugin_system.lit)** *100*

      line 6 ## Anatomy of a plugin 
1. **[/plugin_system.lit](/plugin_system.lit)** *100*

      line 10     ```js !plugin id=foo type=bar
1. **[/plugin_system.lit](/plugin_system.lit)** *100*

      line 12     export const bar = (...args) => "I'm a plugin"
1. **[/plugin_system.lit](/plugin_system.lit)** *100*

      line 15 Initially it is assumed that a plugin is implemented in `js` but due to the flexibility this likely won't remain the case for long.
```
```>md updated=1621898267030
Results for search "**'Digital 'Gardens**". In **0.071** seconds.

1. [/articles/ideas_for.lit](/articles/ideas_for.lit) *100*

      line 8 - Digital Gardens
1. [/testing/log/2021-05-12.lit](/testing/log/2021-05-12.lit) *100*

      line 12 - [ ] [Digital gardens let you cultivate your own little bit of the internet | MIT Technology Review](https://www.technologyreview.com/2020/09/03/1007716/digital-gardens-let-you-cultivate-your-own-little-bit-of-the-internet/) 
1. [/testing/log/2021-05-12.lit](/testing/log/2021-05-12.lit) *100*

      line 14     > Digital gardens let you cultivate your own little bit of the internet
```
```>md updated=1621898052787
Results for search "**'MIT 'garden**". In **0.077** seconds.

1. [/testing/log/2021-05-12.lit](/testing/log/2021-05-12.lit) *100*

      line 12 - [ ] [Digital gardens let you cultivate your own little bit of the internet | MIT Technology Review](https://www.technologyreview.com/2020/09/03/1007716/digital-gardens-let-you-cultivate-your-own-little-bit-of-the-internet/) 
```
```>md updated=1621896023488
Results for search "**Git**". In **0.072** seconds.

1. [/testing/isomorphic_git.lit](/testing/isomorphic_git.lit) *100*
1. [/articles/ideas_for.lit](/articles/ideas_for.lit) *100*
1. [/renderer/viewers.lit](/renderer/viewers.lit) *100*
1. [/testing/log/2021-05-12.lit](/testing/log/2021-05-12.lit) *100*
```
```>md updated=1621895718912
Results for search "**Douglas englebart [sic]**". In **0.057** seconds.

1. [/testing/log/2021-05-23.lit](/testing/log/2021-05-23.lit) *56.99999999999999*
1. [/testing/importing_js_modules.lit](/testing/importing_js_modules.lit) *43*
```





```>md updated=1621870142091
Results for search "**fuzz**". In **0.074** seconds.

1. [/testing/fuzzy_text_search.lit](/testing/fuzzy_text_search.lit) 0.000001
1. [/testing/log/2021-05-23.lit](/testing/log/2021-05-23.lit) 0.001
1. [/functions.lit](/functions.lit) 0.25
1. [/testing/input_buffer.lit](/testing/input_buffer.lit) 0.25
1. [/testing/full.json](/testing/full.json) 0.5
1. [/utils/functions.js](/utils/functions.js) 0.5
1. [/index.lit](/index.lit) 0.5
1. [/execute_code_cells.lit](/execute_code_cells.lit) 0.5
1. [/plugin_system.lit](/plugin_system.lit) 0.5
1. [/scratch_pad.lit](/scratch_pad.lit) 0.5
1. [/prismjs_and_a_simple_editor.lit](/prismjs_and_a_simple_editor.lit) 0.5
1. [/testing/lightningfs.lit](/testing/lightningfs.lit) 0.5
1. [/testing/isomorphic_git.lit](/testing/isomorphic_git.lit) 0.5
1. [/testing/runkit.lit](/testing/runkit.lit) 0.5
1. [/testing/selection.lit](/testing/selection.lit) 0.5
```





## FuzzySet

https://github.com/Glench/fuzzyset.js

```js
return import('https://cdn.skypack.dev/fuzzyset').then( FuzzySet => {

  const f = new FuzzySet.default()
  f.add("the text of mine")
  f.add("the text of someone else")
  f.add("other texts")
  return f.get("text of")
})

```
```>txt attached=true updated=1621778112764
[ [ 0.4375, 'the text of mine' ] ]
```
