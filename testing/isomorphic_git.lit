# Isomorphic Git


Since `.lit` already uses [[testing/LightningFS]] for the local filesystem we can easily use https://isomorphic-git.org/docs/en/quickstart to manage versioning...


```js
console.log(lit.location)
return typeof lit.git
```
```>txt attached=true updated=1619352756655
{ src: 'testing/isomorphic_git.lit',
  root: '/',
  base: 'https://dotlit.org/',
  query: { file: 'testing/isomorphic_git.lit' } }
object
```
```js
return (async () => {
  return await lit.git.init({
    fs: lit.lfs, 
    dir: lit.location.root
  })
})()
```
```>txt attached=true updated=1619357634909
undefined
```
```js
return (async () => {
  return lit.location.src + " : " + await lit.git.status({
    fs: lit.lfs, 
    dir: lit.location.root, 
    filepath: lit.location.src 
  })
})()
```
```>txt attached=true updated=1619352769657
testing/isomorphic_git.lit : *added
```
```js
return (async () => {
  return await lit.git.statusMatrix({
    fs: lit.lfs, 
    dir: lit.location.root, 
  })
})()
```
```>txt attached=true updated=1619357639792
[ [ 'index.lit', 0, 2, 0 ],
  [ 'renderer/viewers.lit', 0, 2, 0 ],
  [ 'testing/isomorphic_git.lit', 0, 2, 0 ],
  [ 'testing/lightningfs.lit', 0, 2, 0 ] ]
```
```js
return (async () => {
  return lit.location.src + " : " + await lit.git.status({
    fs: lit.lfs, 
    dir: lit.location.root, 
    filepath: lit.location.src 
  })
})()
```
```>txt attached=true updated=1619357568294
testing/isomorphic_git.lit : *added
```


```js

const fs = lit.lfs
const dir = lit.location.root
return (async ()=> {
await lit.git.add({fs,dir, filepath: '.'})
let sha = await lit.git.commit({
  fs,
  dir,
  message: 'Commit All!!!',
  author: {
    name: 'Mr. Test',
    email: 'mrtest@example.com'
  }
})

console.log(sha)

})()
```
```>txt attached=true updated=1619304235264
26a1551feb2af962bde2beac1d7a6d86fe10f138
undefined
```

```js
return (async ()=> {
  let commits = await lit.git.log({
     fs: lit.lfs, 
     dir: lit.location.root, 
     depth: 1
  })
  return commits
})()
```
```>txt attached=true updated=1619304488781
{ oid: '26a1551feb2af962bde2beac1d7a6d86fe10f138',
  commit: 
   { message: 'Commit!!!\n',
     parent: [],
     tree: '4b825dc642cb6eb9a060e54bf8d69288fbee4904',
     author: 
      { name: 'Mr. Test',
        email: 'mrtest@example.com',
        timestamp: 1619304232,
        timezoneOffset: -60 },
     committer: 
      { name: 'Mr. Test',
        email: 'mrtest@example.com',
        timestamp: 1619304232,
        timezoneOffset: -60 } },
  payload: 'tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\nauthor Mr. Test <mrtest@example.com> 1619304232 +0100\ncommitter Mr. Test <mrtest@example.com> 1619304232 +0100\n\nCommit!!!\n' }
undefined
```

## Diff

```js
return (async function getFileStateChanges() {
  const commitHash1 = '26a1551feb2af962bde2beac1d7a6d86fe10f138'
  const commitHash2
  return lit.git.walk({
    lit.lfs,
    lit.location.root,
    trees: [git.TREE({ ref: commitHash1 }), git.TREE({ ref: commitHash2 })],
    map: async function(filepath, [A, B]) {
      // ignore directories
      if (filepath === '.') {
        return
      }
      if ((await A.type()) === 'tree' || (await B.type()) === 'tree') {
        return
      }

      // generate ids
      const Aoid = await A.oid()
      const Boid = await B.oid()

      // determine modification type
      let type = 'equal'
      if (Aoid !== Boid) {
        type = 'modify'
      }
      if (Aoid === undefined) {
        type = 'add'
      }
      if (Boid === undefined) {
        type = 'remove'
      }
      if (Aoid === undefined && Boid === undefined) {
        console.log('Something weird happened:')
        console.log(A)
        console.log(B)
      }

      return {
        path: `/${filepath}`,
        type: type,
      }
    },
  })
})()
```