# Isomorphic Git


Since `.lit` already uses [[testing/LightningFS]] for the local filesystem we can easily use https://isomorphic-git.org/docs/en/quickstart to manage versioning...


```js
console.log(lit.location)
return typeof lit.git
```
```>txt attached=true updated=1619352756655
{ src: 'testing/isomorphic_git.lit',
  root: '/',
  base: 'https://dotlit.org/',
  query: { file: 'testing/isomorphic_git.lit' } }
object
```
```js
return (async () => {
  return await lit.git.init({
    fs: lit.lfs, 
    dir: lit.location.root
  })
})()
```
```>txt attached=true updated=1619357634909
undefined
```
```js
return (async () => {
  return lit.location.src + " : " + await lit.git.status({
    fs: lit.lfs, 
    dir: lit.location.root, 
    filepath: lit.location.src 
  })
})()
```
```>txt attached=true updated=1619352769657
testing/isomorphic_git.lit : *added
```
```js
return (async () => {
  return await lit.git.statusMatrix({
    fs: lit.lfs, 
    dir: lit.location.root, 
  })
})()
```
```>txt attached=true updated=1619386281990
[ [ 'index.lit', 1, 2, 2 ],
  [ 'renderer/viewers.lit', 1, 1, 1 ],
  [ 'testing/isomorphic_git.lit', 1, 2, 3 ],
  [ 'testing/lightningfs.lit', 1, 2, 2 ],
  [ 'testing/local_remote_files.lit', 0, 2, 2 ],
  [ 'wiki-links.lit', 0, 2, 2 ] ]
```
```>txt updated=1619385923826
[ [ 'index.lit', 1, 2, 1 ],
  [ 'renderer/viewers.lit', 1, 1, 1 ],
  [ 'testing/isomorphic_git.lit', 1, 2, 1 ],
  [ 'testing/lightningfs.lit', 1, 2, 1 ],
  [ 'testing/local_remote_files.lit', 0, 2, 0 ],
  [ 'wiki-links.lit', 0, 2, 0 ] ]
```
```js

const fs = lit.lfs
const dir = lit.location.root

return (async ()=> {
  return await lit.git.add({
    fs,
    dir,
    filepath: '.'
  })
})()
```
```>txt attached=true updated=1619386257605
undefined
```



```js

const fs = lit.lfs
const dir = lit.location.root

return (async ()=> {

let sha = await lit.git.commit({
  fs,
  dir,
  message: 'Commit All!!!',
  author: {
    name: 'Mr. Test',
    email: 'mrtest@example.com'
  }
})

console.log(sha)

})()
```
```>txt attached=true updated=1619386340270
74737c752556c126a62230a34b0708ec9f41382a
undefined
```

```js
return (async ()=> {
  let commits = await lit.git.log({
     fs: lit.lfs, 
     dir: lit.location.root, 
     depth: 10
  })
  return commits
})()
```
```>txt attached=true updated=1619358507647
[ { oid: 'a90dc673477235cd4eaf207ae5a437dc7b6d8f03',
    commit: 
     { message: 'Commit All!!!\n',
       parent: [Object],
       tree: 'f62f4fa51e5f32fc8f4f4257b545337e59a3bddd',
       author: [Object],
       committer: [Object] },
    payload: 'tree f62f4fa51e5f32fc8f4f4257b545337e59a3bddd\nparent b081f51cd27f54cf58915512006838d4eb67716b\nauthor Mr. Test <mrtest@example.com> 1619358474 +0100\ncommitter Mr. Test <mrtest@example.com> 1619358474 +0100\n\nCommit All!!!\n' },
  { oid: 'b081f51cd27f54cf58915512006838d4eb67716b',
    commit: 
     { message: 'Commit All!!!\n',
       parent: [Object],
       tree: '6ee762da2c9fd4fc3a0132f8d0bd51e0f3f96751',
       author: [Object],
       committer: [Object] },
    payload: 'tree 6ee762da2c9fd4fc3a0132f8d0bd51e0f3f96751\nparent 0c40ed746ebe53cf744d78191d0bbc2941537280\nauthor Mr. Test <mrtest@example.com> 1619358363 +0100\ncommitter Mr. Test <mrtest@example.com> 1619358363 +0100\n\nCommit All!!!\n' },
  { oid: '0c40ed746ebe53cf744d78191d0bbc2941537280',
    commit: 
     { message: 'Commit All!!!\n',
       parent: [],
       tree: '4b825dc642cb6eb9a060e54bf8d69288fbee4904',
       author: [Object],
       committer: [Object] },
    payload: 'tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\nauthor Mr. Test <mrtest@example.com> 1619358324 +0100\ncommitter Mr. Test <mrtest@example.com> 1619358324 +0100\n\nCommit All!!!\n' } ]
```

## Diff

```js
return (async function getFileStateChanges() {
  const commitHash1 = '0c40ed746ebe53cf744d78191d0bbc2941537280'
  const commitHash2 = 'b081f51cd27f54cf58915512006838d4eb67716b'
  return lit.git.walk({
    lit.lfs,
    lit.location.root,
    trees: [git.TREE({ ref: commitHash1 }), git.TREE({ ref: commitHash2 })],
    map: async function(filepath, [A, B]) {
      // ignore directories
      if (filepath === '.') {
        return
      }
      if ((await A.type()) === 'tree' || (await B.type()) === 'tree') {
        return
      }

      // generate ids
      const Aoid = await A.oid()
      const Boid = await B.oid()

      // determine modification type
      let type = 'equal'
      if (Aoid !== Boid) {
        type = 'modify'
      }
      if (Aoid === undefined) {
        type = 'add'
      }
      if (Boid === undefined) {
        type = 'remove'
      }
      if (Aoid === undefined && Boid === undefined) {
        console.log('Something weird happened:')
        console.log(A)
        console.log(B)
      }

      return {
        path: `/${filepath}`,
        type: type,
      }
    },
  })
})()
```
```>txt attached=true updated=1619383639367 !error
undefined
```