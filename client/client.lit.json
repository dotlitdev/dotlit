{
    "type": "root",
    "children": [
        {
            "type": "section",
            "data": {
                "name": "client",
                "hName": "section",
                "hProperties": {
                    "depth": 1
                }
            },
            "depth": 1,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 9,
                            "offset": 8
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 1,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Client",
                                    "position": {
                                        "start": {
                                            "line": 1,
                                            "column": 3,
                                            "offset": 2
                                        },
                                        "end": {
                                            "line": 1,
                                            "column": 9,
                                            "offset": 8
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 1,
                                    "column": 1,
                                    "offset": 0
                                },
                                "end": {
                                    "line": 1,
                                    "column": 9,
                                    "offset": 8
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "client"
                                },
                                "id": "client"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 3,
                            "column": 1,
                            "offset": 10
                        },
                        "end": {
                            "line": 97,
                            "column": 4,
                            "offset": 2887
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "remote=true < index.jsx",
                            "value": "const React = require('react')\nconst ReactDOM = require('react-dom')\nconst vfile = require('vfile')\nconst path = require('path')\nconst qs = require('querystring-es3')\nconst FS = require('@isomorphic-git/lightning-fs')\nconst select = require('unist-util-select')\n\nconst parser = require('../parser')\nconst renderer = require('../renderer')\nconst App = require('../components/App').default\nconst { Header } = require('../components/Header')\nconst { extendFs } = require('../utils/fs-promises-utils')\n\nconst { getMeta } = require('../utils/functions')\nimport { getConsoleForNamespace } from '../utils/console'\n\nconst console = getConsoleForNamespace('client')\n\nconst query = qs.parse(location.search.slice(1))\nconst litsrc = getMeta('src', '')\nconst litroot = getMeta('root', '')\nconst litbase = getMeta('base', '/')\nconst baseUrl =`${location.protocol}//${location.host}${litroot ? path.join(path.dirname(location.pathname), litroot) : litbase}`\n\nconst lfs = (new FS(baseUrl)).promises \nconst fs = extendFs(lfs, litroot)\n\n\nconst lit = {\n    location: {\n        src: litsrc,\n        root: litroot,\n        base: baseUrl,\n        query: query,\n    },\n    parser,\n    renderer,\n    fs,\n    utils: {\n        select,\n        path,\n        vfile,\n    }\n}\n\nif (typeof window !== 'undefined') window.lit = lit\nconsole.log('.lit Notebook client initializing...')\nconsole.log(`lit:`, lit)\n\n;(async () => {\n    let src = litsrc\n    if (src === '404.lit' && query.file) src = query.file\n    console.log(`Checking local (${baseUrl}) filesystem for: ${src}`)\n    let contents, file, stat;\n    try { stat = await lit.fs.stat('/' + src) } catch(err) {}\n    if (stat) {\n        console.log(`Local file \"${ '/' + src}\" exists, loading that instead.`, stat)\n        contents = await lit.fs.readFile('/' +  src, {encoding: 'utf8'})\n    } else {\n        console.log(\"Fetching file content\", litroot, litsrc, path.join(litroot, litsrc))\n       Â const resp = await fetch(path.join(litroot, litsrc))\n        console.log(\"Fetch resp\", resp)\n        contents = await resp.text()\n    }\n    console.log(contents)\n    file = await vfile({path: src, contents})\n\n    \n    const processedFile = await renderer.processor(fs).process(file)\n    console.log(\"Processed client\", processedFile)\n    window.lit.ast = processedFile.data.ast\n\n    try {\n        lit.notebook = <App \n            fs={lit.fs}\n            file={processedFile}\n            result={processedFile.result}\n        />\n    } catch(err) {\n        console.error(\"Error instantiating App\", err)\n    }\n    console.log('notebook', window.lit.notebook)\n    \n    try {\n        ReactDOM.hydrate(window.lit.notebook, document.getElementById('app'))\n        ReactDOM.hydrate(<Header root={litroot} />, document.getElementById('header'))\n    } catch (err) {\n        console.error(\"Error hydrating App\", err)\n    }\n\n   \n})()",
                            "position": {
                                "start": {
                                    "line": 3,
                                    "column": 1,
                                    "offset": 10
                                },
                                "end": {
                                    "line": 97,
                                    "column": 4,
                                    "offset": 2887
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {
                                        "remote": "true"
                                    },
                                    "lang": "jsx",
                                    "remote": "true",
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "index.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt index.jsx"
                                    },
                                    "raw": "jsx remote=true < index.jsx",
                                    "fromSource": "index.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {
                                            "remote": "true"
                                        },
                                        "lang": "jsx",
                                        "remote": "true",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "index.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt index.jsx"
                                        },
                                        "raw": "jsx remote=true < index.jsx",
                                        "fromSource": "index.jsx"
                                    },
                                    "data": {
                                        "originalSource": "const React = require('react')\nconst ReactDOM = require('react-dom')\nconst vfile = require('vfile')\nconst path = require('path')\nconst qs = require('querystring-es3')\nconst FS = require('@isomorphic-git/lightning-fs')\nconst select = require('unist-util-select')\n\nconst parser = require('../parser')\nconst renderer = require('../renderer')\nconst App = require('../components/App').default\nconst { Header } = require('../components/Header')\nconst { extendFs } = require('../utils/fs-promises-utils')\n\nconst { getMeta } = require('../utils/functions')\nimport { getConsoleForNamespace } from '../utils/console'\n\nconst console = getConsoleForNamespace('client')\n\nconst query = qs.parse(location.search.slice(1))\nconst litsrc = getMeta('src', '')\nconst litroot = getMeta('root', '')\nconst litbase = getMeta('base', '/')\nconst baseUrl =`${location.protocol}//${location.host}${litroot ? path.join(path.dirname(location.pathname), litroot) : litbase}`\n\nconst lfs = (new FS(baseUrl)).promises \nconst fs = extendFs(lfs, litroot)\n\n\nconst lit = {\n    location: {\n        src: litsrc,\n        root: litroot,\n        base: baseUrl,\n        query: query,\n    },\n    parser,\n    renderer,\n    fs,\n    utils: {\n        select,\n        path,\n        vfile,\n    }\n}\n\nif (typeof window !== 'undefined') window.lit = lit\nconsole.log('.lit Notebook client initializing...')\nconsole.log(`lit:`, lit)\n\n;(async () => {\n    let src = litsrc\n    if (src === '404.lit' && query.file) src = query.file\n    console.log(`Checking local (${baseUrl}) filesystem for: ${src}`)\n    let contents, file, stat;\n    try { stat = await lit.fs.stat('/' + src) } catch(err) {}\n    if (stat) {\n        console.log(`Local file \"${ '/' + src}\" exists, loading that instead.`, stat)\n        contents = await lit.fs.readFile('/' +  src, {encoding: 'utf8'})\n    } else {\n        console.log(\"Fetching file content\", litroot, litsrc, path.join(litroot, litsrc))\n       Â const resp = await fetch(path.join(litroot, litsrc))\n        console.log(\"Fetch resp\", resp)\n        contents = await resp.text()\n    }\n    console.log(contents)\n    file = await vfile({path: src, contents})\n\n    \n    const processedFile = await renderer.processor(fs).process(file)\n    console.log(\"Processed client\", processedFile)\n    window.lit.ast = processedFile.data.ast\n\n    try {\n        lit.notebook = <App \n            fs={lit.fs}\n            file={processedFile}\n            result={processedFile.result}\n        />\n    } catch(err) {\n        console.error(\"Error instantiating App\", err)\n    }\n    console.log('notebook', window.lit.notebook)\n    \n    try {\n        ReactDOM.hydrate(window.lit.notebook, document.getElementById('app'))\n        ReactDOM.hydrate(<Header root={litroot} />, document.getElementById('header'))\n    } catch (err) {\n        console.error(\"Error hydrating App\", err)\n    }\n\n   \n})()"
                                    }
                                },
                                "originalSource": "const React = require('react')\nconst ReactDOM = require('react-dom')\nconst vfile = require('vfile')\nconst path = require('path')\nconst qs = require('querystring-es3')\nconst FS = require('@isomorphic-git/lightning-fs')\nconst select = require('unist-util-select')\n\nconst parser = require('../parser')\nconst renderer = require('../renderer')\nconst App = require('../components/App').default\nconst { Header } = require('../components/Header')\nconst { extendFs } = require('../utils/fs-promises-utils')\n\nconst { getMeta } = require('../utils/functions')\nimport { getConsoleForNamespace } from '../utils/console'\n\nconst console = getConsoleForNamespace('client')\n\nconst query = qs.parse(location.search.slice(1))\nconst litsrc = getMeta('src', '')\nconst litroot = getMeta('root', '')\nconst litbase = getMeta('base', '/')\nconst baseUrl =`${location.protocol}//${location.host}${litroot ? path.join(path.dirname(location.pathname), litroot) : litbase}`\n\nconst lfs = (new FS(baseUrl)).promises \nconst fs = extendFs(lfs, litroot)\n\n\nconst lit = {\n    location: {\n        src: litsrc,\n        root: litroot,\n        base: baseUrl,\n        query: query,\n    },\n    parser,\n    renderer,\n    fs,\n    utils: {\n        select,\n        path,\n        vfile,\n    }\n}\n\nif (typeof window !== 'undefined') window.lit = lit\nconsole.log('.lit Notebook client initializing...')\nconsole.log(`lit:`, lit)\n\n;(async () => {\n    let src = litsrc\n    if (src === '404.lit' && query.file) src = query.file\n    console.log(`Checking local (${baseUrl}) filesystem for: ${src}`)\n    let contents, file, stat;\n    try { stat = await lit.fs.stat('/' + src) } catch(err) {}\n    if (stat) {\n        console.log(`Local file \"${ '/' + src}\" exists, loading that instead.`, stat)\n        contents = await lit.fs.readFile('/' +  src, {encoding: 'utf8'})\n    } else {\n        console.log(\"Fetching file content\", litroot, litsrc, path.join(litroot, litsrc))\n       Â const resp = await fetch(path.join(litroot, litsrc))\n        console.log(\"Fetch resp\", resp)\n        contents = await resp.text()\n    }\n    console.log(contents)\n    file = await vfile({path: src, contents})\n\n    \n    const processedFile = await renderer.processor(fs).process(file)\n    console.log(\"Processed client\", processedFile)\n    window.lit.ast = processedFile.data.ast\n\n    try {\n        lit.notebook = <App \n            fs={lit.fs}\n            file={processedFile}\n            result={processedFile.result}\n        />\n    } catch(err) {\n        console.error(\"Error instantiating App\", err)\n    }\n    console.log('notebook', window.lit.notebook)\n    \n    try {\n        ReactDOM.hydrate(window.lit.notebook, document.getElementById('app'))\n        ReactDOM.hydrate(<Header root={litroot} />, document.getElementById('header'))\n    } catch (err) {\n        console.error(\"Error hydrating App\", err)\n    }\n\n   \n})()"
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                },
                "end": {
                    "line": 97,
                    "column": 4,
                    "offset": 2887
                }
            }
        }
    ],
    "position": {
        "start": {
            "line": 1,
            "column": 1,
            "offset": 0
        },
        "end": {
            "line": 97,
            "column": 4,
            "offset": 2887
        }
    }
}