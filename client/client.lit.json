{
    "type": "root",
    "children": [
        {
            "type": "section",
            "data": {
                "name": "client",
                "hName": "section",
                "hProperties": {
                    "depth": 1
                }
            },
            "depth": 1,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "column": 9,
                            "offset": 8
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 1,
                                    "column": 1,
                                    "offset": 0
                                },
                                "end": {
                                    "line": 5,
                                    "column": 4,
                                    "offset": 59
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 1,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Client",
                                    "position": {
                                        "start": {
                                            "line": 1,
                                            "column": 3,
                                            "offset": 2
                                        },
                                        "end": {
                                            "line": 1,
                                            "column": 9,
                                            "offset": 8
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 1,
                                    "column": 1,
                                    "offset": 0
                                },
                                "end": {
                                    "line": 1,
                                    "column": 9,
                                    "offset": 8
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "client"
                                },
                                "id": "client"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 3,
                            "column": 1,
                            "offset": 10
                        },
                        "end": {
                            "line": 5,
                            "column": 4,
                            "offset": 59
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "#implementation !collapse < index.jsx",
                            "value": "const React = require('react')\nconst ReactDOM = require('react-dom')\nconst vfile = require('vfile')\nconst path = require('path')\nconst qs = require('querystring-es3')\nconst FS = require('@isomorphic-git/lightning-fs')\nconst git = require('isomorphic-git')\n\nconst select = require('unist-util-select')\nconst source = require('unist-util-source')\nconst filter = require('unist-util-filter')\nconst visit = require('unist-util-visit')\nconst patchSource = require('../utils/unist-util-patch-source')\nconst selectPosition = require('../utils/unist-util-select-position')\n\nconst { to_string } = require('../parser/utils/mdast-util-to-string')\n\nconst parser = require('../parser')\nconst renderer = require('../renderer')\nconst { Repl } = require('../repl')\n\nconst { Header } = require('../components/Header')\nconst { extendFs } = require('../utils/fs-promises-utils')\nconst momento = require('../utils/momento')\nconst colors = require('../utils/colors')\nconst safeEncoders = require('../utils/safe-encoders')\n\nconst { inspect } = require('util')\nconst diff = require('diff')\nconst fns = require('../utils/functions')\nimport { getConsoleForNamespace } from '../utils/console'\n\nconst console = getConsoleForNamespace('client')\n\nconst  { DatesToRelativeDelta, MsToRelative } = momento\n\nconst hasLocation = typeof location !== \"undefined\"\n\nconst query = hasLocation ? qs.parse(location.search.slice(1)) : {}\nconst litsrcMeta = fns.getMeta('src', '')\nconst litsrc = (litsrcMeta === '404.lit')\n                ? (query.file || location.pathname.replace(/\\.html$/, '.lit').slice(1))\n                : litsrcMeta\nconst litroot = fns.getMeta('root', '/')\n// const litbase = getMeta('base', '/')\nconst litbase = (!hasLocation || litroot === '/')\n                 ? litroot \n                 : path.join(path.dirname(location.pathname), litroot)\nconst baseUrl = hasLocation && `${location.protocol}//${location.host}${litbase}`\n\nconst lfs = new FS(baseUrl, {\n    wipe: query.__lfs_wipe===\"true\" ? confirm(\"Are you sure you want to wipe the local file system: \" + baseUrl) : undefined,\n    url: baseUrl,\n})\nconst fs = extendFs(lfs.promises, litroot, !query.__no_gh && typeof localStorage !== \"undefined\" && localStorage.getItem(\"ghToken\") && {\n    username: \"dotlitdev\",\n    repository: \"dotlit\", \n    prefix: \"src\",\n    token: localStorage.getItem(\"ghToken\"),\n})\n\nexport const lit = {\n    location: {\n        src: litsrc,\n        root: litroot,\n        base: baseUrl,\n        query: query,\n    },\n    parser,\n    renderer,\n    Repl,\n    fs, lfs, git,\n    utils: {\n        inspect,\n        diff,\n        React,\n        unist: {\n            select,\n            source,\n            filter,\n            visit,\n            patchSource,\n            selectPosition,\n        },\n        mdast: {\n            to_string,\n        },\n        momento,\n        colors,\n        safeEncoders,\n        fns,\n        path,\n        querystring: qs,\n        vfile,\n        delete: async (fp) => {\n            const f = fp || litsrc\n            const filepath = f[0] === '/' ? f : ('/' + f)\n            console.log(`Removing local file: \"${filepath}\"`)\n            await lit.fs.unlink(filepath)\n            console.log(`Unlinked: \"${filepath}\"`)\n        },\n        read: async (fp) => {\n            const f = fp || litsrc\n            const filepath = f[0] === '/' ? f : ('/' + f)\n            const resp = await lit.fs.readStat(filepath, {encoding: 'utf8'})\n            console.log(`Loaded file: ${filepath} local: ${!!resp.local.stat} remote: ${!!resp.remote.stat} resp: `, resp)\n\n            if (resp.local.stat && resp.remote.stat) {\n                const ageMessage = DatesToRelativeDelta(resp.local.stat.mtimeMs, resp.remote.stat.mtimeMs)\n                console.log(`Local file is ${ageMessage} than remote file.`)\n            }\n        },\n    }\n}\n\nlit.u = lit.utils\n\nif (typeof window !== 'undefined') window.lit = lit\n\nconsole.log(`lit:`, lit)\n\nexport const init = async () => {\n    if(query.__lit_no_client===\"true\") return;\n\n    console.log('.lit Notebook client initializing...')\n\n    const App = require('../components/App').default\n\n    const filepath = `/${lit.location.src}`\n    console.log(`Checking local (${baseUrl}) filesystem for: ${filepath}`)\n    let contents, times = {local: null, remote: null}\n    try {\n        const resp = await lit.fs.readStat(filepath, {encoding: 'utf8'})\n        console.log(`Loaded file: ${filepath} local: ${!!resp.local.stat} remote: ${!!resp.remote.stat} resp: `, resp)\n        times.local = resp.local.stat && MsToRelative(resp.local.stat.mtimeMs - Date.now())\n        times.remote = resp.remote.stat && MsToRelative(resp.remote.stat.mtimeMs - Date.now())\n\n        if (resp.local.stat && resp.remote.stat) {\n            const ageMessage = DatesToRelativeDelta(resp.local.stat.mtimeMs, resp.remote.stat.mtimeMs)\n            times.ageMessage = ageMessage\n            console.log(`Local file is ${ageMessage} than remote file.`)\n        }\n        \n        contents = resp.local.value || resp.remote.value\n    } catch(err) {\n        console.error(`Error fetching local and remote file`, err)\n\n        \n        if (query.template) {\n            console.log(`Loading template (${query.template}) for 404 file \"${lit.location.src}\".`)\n            try {\n                const template = await lit.fs.readStat(`/${query.template}`, {encoding: 'utf8'})\n                contents = lit.utils.fns.template(template.local.value || template.remote.value, window)\n            } catch (err) {\n                console.error(`Failed to load template: ${query.template}`, err)\n            }\n        }\n        \n        console.log(`Showing 404 page`)\n        // const resp404 = await lit.fs.readStat( '/' + path.join(litroot, \"404.lit\") )\n        // contents = resp404.value\n        const filename = lit.utils.path.basename(lit.location.src).slice(0, 0-lit.utils.path.extname(lit.location.src).length)\n        if (!contents) contents = `# ${lit.location.src}\\n\\nFile not *yet* found, edit this to change that.`\n    }\n    \n    let settings\n    try {\n        const settingsPath = '/meta/settings.lit'\n        const settingsFile = await vfile({ path: settingsPath, contents: await lit.fs.readFile(settingsPath, {encoding: 'utf8'}) })\n        settings = await renderer.processor({fs,litroot}).process(settingsFile)\n    } catch(err) { console.log('Failed to load settings', err) }\n\n    const file = await vfile({path: filepath, contents})\n    file.data = file.data || {}\n    file.data.plugins = (settings && settings.data && settings.data.plugins) || {}\n    file.data.times = times\n    \n    const processedFile = await renderer.processor({fs,litroot}).process(file)\n    console.log(\"Processed client\", processedFile)\n    window.lit.ast = processedFile.data.ast\n    window.lit.file = processedFile\n    window.lit.settings = settings\n\n    try {\n        lit.notebook = <App\n            root={litroot}\n            fs={lit.fs}\n            file={processedFile}\n            result={processedFile.result}\n        />\n    } catch(err) {\n        console.error(\"Error instantiating App\", err)\n    }\n    console.log('notebook', window.lit.notebook)\n    \n    try {\n        ReactDOM.render(window.lit.notebook, document.getElementById('lit-app'))\n        // ReactDOM.hydrate(window.lit.notebook, document.getElementById('app'))\n        // ReactDOM.hydrate(<Header root={litroot} />, document.getElementById('header'))\n    } catch (err) {\n        console.error(\"Error hydrating App\", err)\n    }\n}\n\nif (typeof WorkerGlobalScope !== 'undefined'\n    && self instanceof WorkerGlobalScope) {\n   // inside worker as lib, don't init.\n} else {\n   init()\n}\n",
                            "position": {
                                "start": {
                                    "line": 3,
                                    "column": 1,
                                    "offset": 10
                                },
                                "end": {
                                    "line": 5,
                                    "column": 4,
                                    "offset": 59
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "tags": [
                                        "implementation"
                                    ],
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "index.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt index.jsx"
                                    },
                                    "raw": "jsx #implementation !collapse < index.jsx",
                                    "fromSource": "index.jsx"
                                },
                                "hProperties": {
                                    "className": "tag-implementation",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "tags": [
                                            "implementation"
                                        ],
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "index.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt index.jsx"
                                        },
                                        "raw": "jsx #implementation !collapse < index.jsx",
                                        "fromSource": "index.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                },
                "end": {
                    "line": 5,
                    "column": 4,
                    "offset": 59
                }
            }
        }
    ],
    "position": {
        "start": {
            "line": 1,
            "column": 1,
            "offset": 0
        },
        "end": {
            "line": 5,
            "column": 4,
            "offset": 59
        }
    }
}