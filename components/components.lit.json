{
    "type": "root",
    "children": [
        {
            "type": "section",
            "data": {
                "name": "components",
                "hName": "section",
                "hProperties": {
                    "depth": 1
                }
            },
            "depth": 1,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 3,
                            "column": 1,
                            "offset": 2
                        },
                        "end": {
                            "line": 5,
                            "column": 64,
                            "offset": 79
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 3,
                                    "column": 1,
                                    "offset": 2
                                },
                                "end": {
                                    "line": 7,
                                    "column": 21,
                                    "offset": 101
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 1,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Components",
                                    "position": {
                                        "start": {
                                            "line": 3,
                                            "column": 3,
                                            "offset": 4
                                        },
                                        "end": {
                                            "line": 3,
                                            "column": 13,
                                            "offset": 14
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 3,
                                    "column": 1,
                                    "offset": 2
                                },
                                "end": {
                                    "line": 5,
                                    "column": 64,
                                    "offset": 79
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "components"
                                },
                                "id": "components"
                            },
                            "processed": true
                        },
                        {
                            "type": "paragraph",
                            "children": [
                                {
                                    "type": "text",
                                    "value": "A list of the main components used to render a ",
                                    "position": {
                                        "start": {
                                            "line": 5,
                                            "column": 1,
                                            "offset": 16
                                        },
                                        "end": {
                                            "line": 5,
                                            "column": 48,
                                            "offset": 63
                                        }
                                    }
                                },
                                {
                                    "type": "inlineCode",
                                    "value": ".lit",
                                    "position": {
                                        "start": {
                                            "line": 5,
                                            "column": 48,
                                            "offset": 63
                                        },
                                        "end": {
                                            "line": 5,
                                            "column": 54,
                                            "offset": 69
                                        }
                                    }
                                },
                                {
                                    "type": "text",
                                    "value": " document.",
                                    "position": {
                                        "start": {
                                            "line": 5,
                                            "column": 54,
                                            "offset": 69
                                        },
                                        "end": {
                                            "line": 5,
                                            "column": 64,
                                            "offset": 79
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 5,
                                    "column": 1,
                                    "offset": 16
                                },
                                "end": {
                                    "line": 5,
                                    "column": 64,
                                    "offset": 79
                                }
                            }
                        }
                    ]
                },
                {
                    "type": "section",
                    "data": {
                        "name": "table-of-contents",
                        "hName": "section",
                        "hProperties": {
                            "depth": 2
                        }
                    },
                    "depth": 2,
                    "children": [
                        {
                            "type": "cell",
                            "position": {
                                "start": {
                                    "line": 7,
                                    "column": 1,
                                    "offset": 81
                                },
                                "end": {
                                    "line": 7,
                                    "column": 21,
                                    "offset": 101
                                }
                            },
                            "data": {
                                "hName": "cell",
                                "hProperties": {
                                    "class": "cell"
                                },
                                "section": {
                                    "position": {
                                        "start": {
                                            "line": 7,
                                            "column": 1,
                                            "offset": 81
                                        },
                                        "end": {
                                            "line": 7,
                                            "column": 21,
                                            "offset": 101
                                        }
                                    }
                                }
                            },
                            "children": [
                                {
                                    "type": "heading",
                                    "depth": 2,
                                    "children": [
                                        {
                                            "type": "text",
                                            "value": "Table of Contents",
                                            "position": {
                                                "start": {
                                                    "line": 7,
                                                    "column": 4,
                                                    "offset": 84
                                                },
                                                "end": {
                                                    "line": 7,
                                                    "column": 21,
                                                    "offset": 101
                                                }
                                            }
                                        }
                                    ],
                                    "position": {
                                        "start": {
                                            "line": 7,
                                            "column": 1,
                                            "offset": 81
                                        },
                                        "end": {
                                            "line": 7,
                                            "column": 21,
                                            "offset": 101
                                        }
                                    },
                                    "data": {
                                        "hProperties": {
                                            "id": "table-of-contents"
                                        },
                                        "id": "table-of-contents"
                                    },
                                    "processed": true
                                },
                                {
                                    "type": "list",
                                    "ordered": false,
                                    "spread": true,
                                    "children": [
                                        {
                                            "type": "listItem",
                                            "spread": false,
                                            "children": [
                                                {
                                                    "type": "paragraph",
                                                    "children": [
                                                        {
                                                            "type": "link",
                                                            "url": "#document",
                                                            "children": [
                                                                {
                                                                    "type": "text",
                                                                    "value": "Document"
                                                                }
                                                            ],
                                                            "data": {
                                                                "isAbsolute": false,
                                                                "isFragment": true,
                                                                "isRelative": false,
                                                                "canonical": "#document",
                                                                "wikilink": false,
                                                                "hProperties": {
                                                                    "wikilink": false,
                                                                    "data": {
                                                                        "base": "",
                                                                        "frag": "#",
                                                                        "isAbsolute": false,
                                                                        "isFragment": true,
                                                                        "isRelative": false,
                                                                        "canonical": "#document",
                                                                        "wikilink": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "listItem",
                                            "spread": false,
                                            "children": [
                                                {
                                                    "type": "paragraph",
                                                    "children": [
                                                        {
                                                            "type": "link",
                                                            "url": "#header",
                                                            "children": [
                                                                {
                                                                    "type": "text",
                                                                    "value": "Header"
                                                                }
                                                            ],
                                                            "data": {
                                                                "isAbsolute": false,
                                                                "isFragment": true,
                                                                "isRelative": false,
                                                                "canonical": "#header",
                                                                "wikilink": false,
                                                                "hProperties": {
                                                                    "wikilink": false,
                                                                    "data": {
                                                                        "base": "",
                                                                        "frag": "#",
                                                                        "isAbsolute": false,
                                                                        "isFragment": true,
                                                                        "isRelative": false,
                                                                        "canonical": "#header",
                                                                        "wikilink": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "listItem",
                                            "spread": false,
                                            "children": [
                                                {
                                                    "type": "paragraph",
                                                    "children": [
                                                        {
                                                            "type": "link",
                                                            "url": "#app",
                                                            "children": [
                                                                {
                                                                    "type": "text",
                                                                    "value": "App"
                                                                }
                                                            ],
                                                            "data": {
                                                                "isAbsolute": false,
                                                                "isFragment": true,
                                                                "isRelative": false,
                                                                "canonical": "#app",
                                                                "wikilink": false,
                                                                "hProperties": {
                                                                    "wikilink": false,
                                                                    "data": {
                                                                        "base": "",
                                                                        "frag": "#",
                                                                        "isAbsolute": false,
                                                                        "isFragment": true,
                                                                        "isRelative": false,
                                                                        "canonical": "#app",
                                                                        "wikilink": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "listItem",
                                            "spread": false,
                                            "children": [
                                                {
                                                    "type": "paragraph",
                                                    "children": [
                                                        {
                                                            "type": "link",
                                                            "url": "#selection-context",
                                                            "children": [
                                                                {
                                                                    "type": "text",
                                                                    "value": "Selection Context"
                                                                }
                                                            ],
                                                            "data": {
                                                                "isAbsolute": false,
                                                                "isFragment": true,
                                                                "isRelative": false,
                                                                "canonical": "#selection-context",
                                                                "wikilink": false,
                                                                "hProperties": {
                                                                    "wikilink": false,
                                                                    "data": {
                                                                        "base": "",
                                                                        "frag": "#",
                                                                        "isAbsolute": false,
                                                                        "isFragment": true,
                                                                        "isRelative": false,
                                                                        "canonical": "#selection-context",
                                                                        "wikilink": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "listItem",
                                            "spread": true,
                                            "children": [
                                                {
                                                    "type": "paragraph",
                                                    "children": [
                                                        {
                                                            "type": "link",
                                                            "url": "#cell",
                                                            "children": [
                                                                {
                                                                    "type": "text",
                                                                    "value": "Cell"
                                                                }
                                                            ],
                                                            "data": {
                                                                "isAbsolute": false,
                                                                "isFragment": true,
                                                                "isRelative": false,
                                                                "canonical": "#cell",
                                                                "wikilink": false,
                                                                "hProperties": {
                                                                    "wikilink": false,
                                                                    "data": {
                                                                        "base": "",
                                                                        "frag": "#",
                                                                        "isAbsolute": false,
                                                                        "isFragment": true,
                                                                        "isRelative": false,
                                                                        "canonical": "#cell",
                                                                        "wikilink": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "list",
                                                    "ordered": false,
                                                    "spread": false,
                                                    "children": [
                                                        {
                                                            "type": "listItem",
                                                            "spread": false,
                                                            "children": [
                                                                {
                                                                    "type": "paragraph",
                                                                    "children": [
                                                                        {
                                                                            "type": "link",
                                                                            "url": "#cellmenu",
                                                                            "children": [
                                                                                {
                                                                                    "type": "text",
                                                                                    "value": "CellMenu"
                                                                                }
                                                                            ],
                                                                            "data": {
                                                                                "isAbsolute": false,
                                                                                "isFragment": true,
                                                                                "isRelative": false,
                                                                                "canonical": "#cellmenu",
                                                                                "wikilink": false,
                                                                                "hProperties": {
                                                                                    "wikilink": false,
                                                                                    "data": {
                                                                                        "base": "",
                                                                                        "frag": "#",
                                                                                        "isAbsolute": false,
                                                                                        "isFragment": true,
                                                                                        "isRelative": false,
                                                                                        "canonical": "#cellmenu",
                                                                                        "wikilink": false
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "listItem",
                                            "spread": false,
                                            "children": [
                                                {
                                                    "type": "paragraph",
                                                    "children": [
                                                        {
                                                            "type": "link",
                                                            "url": "#editor",
                                                            "children": [
                                                                {
                                                                    "type": "text",
                                                                    "value": "Editor"
                                                                }
                                                            ],
                                                            "data": {
                                                                "isAbsolute": false,
                                                                "isFragment": true,
                                                                "isRelative": false,
                                                                "canonical": "#editor",
                                                                "wikilink": false,
                                                                "hProperties": {
                                                                    "wikilink": false,
                                                                    "data": {
                                                                        "base": "",
                                                                        "frag": "#",
                                                                        "isAbsolute": false,
                                                                        "isFragment": true,
                                                                        "isRelative": false,
                                                                        "canonical": "#editor",
                                                                        "wikilink": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "listItem",
                                            "spread": false,
                                            "children": [
                                                {
                                                    "type": "paragraph",
                                                    "children": [
                                                        {
                                                            "type": "link",
                                                            "url": "#icons",
                                                            "children": [
                                                                {
                                                                    "type": "text",
                                                                    "value": "Icons"
                                                                }
                                                            ],
                                                            "data": {
                                                                "isAbsolute": false,
                                                                "isFragment": true,
                                                                "isRelative": false,
                                                                "canonical": "#icons",
                                                                "wikilink": false,
                                                                "hProperties": {
                                                                    "wikilink": false,
                                                                    "data": {
                                                                        "base": "",
                                                                        "frag": "#",
                                                                        "isAbsolute": false,
                                                                        "isFragment": true,
                                                                        "isRelative": false,
                                                                        "canonical": "#icons",
                                                                        "wikilink": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "listItem",
                                            "spread": true,
                                            "children": [
                                                {
                                                    "type": "paragraph",
                                                    "children": [
                                                        {
                                                            "type": "link",
                                                            "url": "#code",
                                                            "children": [
                                                                {
                                                                    "type": "text",
                                                                    "value": "Code"
                                                                }
                                                            ],
                                                            "data": {
                                                                "isAbsolute": false,
                                                                "isFragment": true,
                                                                "isRelative": false,
                                                                "canonical": "#code",
                                                                "wikilink": false,
                                                                "hProperties": {
                                                                    "wikilink": false,
                                                                    "data": {
                                                                        "base": "",
                                                                        "frag": "#",
                                                                        "isAbsolute": false,
                                                                        "isFragment": true,
                                                                        "isRelative": false,
                                                                        "canonical": "#code",
                                                                        "wikilink": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "list",
                                                    "ordered": false,
                                                    "spread": false,
                                                    "children": [
                                                        {
                                                            "type": "listItem",
                                                            "spread": false,
                                                            "children": [
                                                                {
                                                                    "type": "paragraph",
                                                                    "children": [
                                                                        {
                                                                            "type": "link",
                                                                            "url": "#code-meta",
                                                                            "children": [
                                                                                {
                                                                                    "type": "text",
                                                                                    "value": "Code Meta"
                                                                                }
                                                                            ],
                                                                            "data": {
                                                                                "isAbsolute": false,
                                                                                "isFragment": true,
                                                                                "isRelative": false,
                                                                                "canonical": "#code-meta",
                                                                                "wikilink": false,
                                                                                "hProperties": {
                                                                                    "wikilink": false,
                                                                                    "data": {
                                                                                        "base": "",
                                                                                        "frag": "#",
                                                                                        "isAbsolute": false,
                                                                                        "isFragment": true,
                                                                                        "isRelative": false,
                                                                                        "canonical": "#code-meta",
                                                                                        "wikilink": false
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "listItem",
                                                            "spread": false,
                                                            "children": [
                                                                {
                                                                    "type": "paragraph",
                                                                    "children": [
                                                                        {
                                                                            "type": "link",
                                                                            "url": "#codeblock",
                                                                            "children": [
                                                                                {
                                                                                    "type": "text",
                                                                                    "value": "Codeblock"
                                                                                }
                                                                            ],
                                                                            "data": {
                                                                                "isAbsolute": false,
                                                                                "isFragment": true,
                                                                                "isRelative": false,
                                                                                "canonical": "#codeblock",
                                                                                "wikilink": false,
                                                                                "hProperties": {
                                                                                    "wikilink": false,
                                                                                    "data": {
                                                                                        "base": "",
                                                                                        "frag": "#",
                                                                                        "isAbsolute": false,
                                                                                        "isFragment": true,
                                                                                        "isRelative": false,
                                                                                        "canonical": "#codeblock",
                                                                                        "wikilink": false
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "listItem",
                                            "spread": false,
                                            "children": [
                                                {
                                                    "type": "paragraph",
                                                    "children": [
                                                        {
                                                            "type": "link",
                                                            "url": "#link",
                                                            "children": [
                                                                {
                                                                    "type": "text",
                                                                    "value": "Link"
                                                                }
                                                            ],
                                                            "data": {
                                                                "isAbsolute": false,
                                                                "isFragment": true,
                                                                "isRelative": false,
                                                                "canonical": "#link",
                                                                "wikilink": false,
                                                                "hProperties": {
                                                                    "wikilink": false,
                                                                    "data": {
                                                                        "base": "",
                                                                        "frag": "#",
                                                                        "isAbsolute": false,
                                                                        "isFragment": true,
                                                                        "isRelative": false,
                                                                        "canonical": "#link",
                                                                        "wikilink": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "listItem",
                                            "spread": false,
                                            "children": [
                                                {
                                                    "type": "paragraph",
                                                    "children": [
                                                        {
                                                            "type": "link",
                                                            "url": "#backlinks",
                                                            "children": [
                                                                {
                                                                    "type": "text",
                                                                    "value": "Backlinks"
                                                                }
                                                            ],
                                                            "data": {
                                                                "isAbsolute": false,
                                                                "isFragment": true,
                                                                "isRelative": false,
                                                                "canonical": "#backlinks",
                                                                "wikilink": false,
                                                                "hProperties": {
                                                                    "wikilink": false,
                                                                    "data": {
                                                                        "base": "",
                                                                        "frag": "#",
                                                                        "isAbsolute": false,
                                                                        "isFragment": true,
                                                                        "isRelative": false,
                                                                        "canonical": "#backlinks",
                                                                        "wikilink": false
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "position": {
                        "start": {
                            "line": 7,
                            "column": 1,
                            "offset": 81
                        },
                        "end": {
                            "line": 7,
                            "column": 21,
                            "offset": 101
                        }
                    }
                }
            ],
            "position": {
                "start": {
                    "line": 3,
                    "column": 1,
                    "offset": 2
                },
                "end": {
                    "line": 7,
                    "column": 21,
                    "offset": 101
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "document",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 9,
                            "column": 1,
                            "offset": 103
                        },
                        "end": {
                            "line": 9,
                            "column": 12,
                            "offset": 114
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 9,
                                    "column": 1,
                                    "offset": 103
                                },
                                "end": {
                                    "line": 13,
                                    "column": 4,
                                    "offset": 152
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Document",
                                    "position": {
                                        "start": {
                                            "line": 9,
                                            "column": 4,
                                            "offset": 106
                                        },
                                        "end": {
                                            "line": 9,
                                            "column": 12,
                                            "offset": 114
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 9,
                                    "column": 1,
                                    "offset": 103
                                },
                                "end": {
                                    "line": 9,
                                    "column": 12,
                                    "offset": 114
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "document"
                                },
                                "id": "document"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 11,
                            "column": 1,
                            "offset": 116
                        },
                        "end": {
                            "line": 13,
                            "column": 4,
                            "offset": 152
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "!collapse < Document.jsx",
                            "value": "import React, {useState} from 'react'\nimport path from 'path'\nimport App from './App'\nimport Backlinks from './Backlinks'\nimport { getConsoleForNamespace } from '../utils/console'\n\nconst console = getConsoleForNamespace('Document')\n\nconst Document = props => {\n\n    const result = props.file.result\n    const title = props.file.data.frontmatter.title || props.file.stem\n    const theme = props.file.data.frontmatter.theme \n                  || \"https://highlightjs.org/static/demo/styles/railscasts.css\"\n\n    return <html>\n        <head>\n            <title>{title}</title>\n            <meta name=\"litsrc\" value={props.file.path}/>\n            <meta name=\"litroot\" value={props.root}/>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\"/>\n            <link rel=\"stylesheet\" href={theme}/>\n            <link rel=\"stylesheet\" href={path.join(props.root, 'style.css')}/>\n        </head>\n        <body>\n            <div id=\"lit-app\"><App root={props.root} file={props.file} fs={props.fs} result={result}/></div>\n            <div id=\"backlinks\"><Backlinks root={props.root} links={props.backlinks || []}/></div>\n            <script src=\"//cdn.jsdelivr.net/npm/eruda\"></script>\n            <script>eruda.init();</script>\n            <script src={path.join(props.root, 'web.bundle.js')}/>\n        </body>\n    </html>\n}\n\nexport default Document\n",
                            "position": {
                                "start": {
                                    "line": 11,
                                    "column": 1,
                                    "offset": 116
                                },
                                "end": {
                                    "line": 13,
                                    "column": 4,
                                    "offset": 152
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "Document.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt Document.jsx"
                                    },
                                    "raw": "jsx !collapse < Document.jsx",
                                    "fromSource": "Document.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "Document.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt Document.jsx"
                                        },
                                        "raw": "jsx !collapse < Document.jsx",
                                        "fromSource": "Document.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 9,
                    "column": 1,
                    "offset": 103
                },
                "end": {
                    "line": 13,
                    "column": 4,
                    "offset": 152
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "header",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 15,
                            "column": 1,
                            "offset": 154
                        },
                        "end": {
                            "line": 15,
                            "column": 10,
                            "offset": 163
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 15,
                                    "column": 1,
                                    "offset": 154
                                },
                                "end": {
                                    "line": 19,
                                    "column": 4,
                                    "offset": 199
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Header",
                                    "position": {
                                        "start": {
                                            "line": 15,
                                            "column": 4,
                                            "offset": 157
                                        },
                                        "end": {
                                            "line": 15,
                                            "column": 10,
                                            "offset": 163
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 15,
                                    "column": 1,
                                    "offset": 154
                                },
                                "end": {
                                    "line": 15,
                                    "column": 10,
                                    "offset": 163
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "header"
                                },
                                "id": "header"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 17,
                            "column": 1,
                            "offset": 165
                        },
                        "end": {
                            "line": 19,
                            "column": 4,
                            "offset": 199
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "!collapse < Header.jsx",
                            "value": "import React, { useState } from 'react'\nimport * as clipboard from \"clipboard-polyfill\"\nimport source from 'unist-util-source'\nimport SelectionContext from './SelectionContext'\nimport { Identity } from '../utils/functions'\nimport { getConsoleForNamespace } from '../utils/console'\nimport { ErrorBoundary } from './ErrorBoundry'\nimport {version} from '../../package.json'\n\n\nconst console = getConsoleForNamespace('Header')\n\nconst setDebug = ev => {\n  ev.preventDefault()\n  const key = 'litDebug'\n  const example = 'All,fs,client,Cell,sections,etc...'\n  const storage = typeof localStorage !== 'undefined' && localStorage\n  const val = prompt(\"Set debug mask\", storage.getItem(key) || example)\n  storage.setItem( key, val )\n  console.log(`Set ${key} to \"${val}\"`)\n  return false\n}\n\nconst showInspector = ev => {\n  console.log('Show mobile inspector')\n  if (typeof eruda !== 'undefined' && eruda) eruda.show()\n  else alert(\"🚨 Eruda console not available\")\n}\n\nconst LED = ({color,status}) => {\n  return <span title={status} className={`led led-${color}`}></span>\n}\n\nconst Status = ({local, remote}) => {\n  const color = (typeof window === 'undefined' || typeof window.localStorage === 'undefined)')\n    ? 'grey'\n    : (local && !remote)\n      ? 'orange'\n      : (remote && !local) \n        ? 'blue'\n        : (!remote && !local)\n          ? 'red'\n          : 'green'\n  return <LED color={color} title=\"Status\" />\n}\n\nconst Menu = props => {\n  // console.log('<Menu/>', props.title,)\n  const [open, setOpen] = useState(props.horizontal)\n  const toggleOpen = _ => setOpen(!open)\n  const disabled = props.disabled || (!props.onClick && !props.href && !props.children)\n\n  const handleClickTitle = ev => {\n    ev.stopPropagation()\n    if (disabled) return false\n\n    if (props.onClick) props.onClick()\n    else if (props.href) location.href = props.href\n    else toggleOpen()\n    return false\n  }\n\n  const catchClicks = ev => {\n    ev.stopPropagation()\n    if (!disabled && !props.horizontal) {\n      toggleOpen()\n    }\n    return false\n  }\n\n  const classes = [\n    props.horizontal ? 'horizontal' : null,\n    open ? 'open' : null,\n    props.children ? 'has-children' : null,\n    props.right ? 'right' : '',\n  ].filter(Identity).join(' ')\n\n  \n\n  return <menu className={classes} disabled={disabled} onClick={catchClicks}>\n    <li className={\"MenuTitle\"} key=\"menu-title\" onClick={handleClickTitle}>\n      { props.href\n        ? <a href={props.href}>{props.title}</a>\n        : props.title }\n    </li>\n    { !disabled && open && <li className=\"MenuItems\">{ props.children }</li> }\n  </menu>\n}\n\nconst Message = ({message, setSelectedCell}) => {\n  \n  const scroll = ev => {\n    console.log('[Message] ', message)\n    setSelectedCell(message.location, true) \n    return false\n  }\n\n  const [showAll, setShowAll] = useState(false)\n  const toggleShowAll = ev => {\n    setShowAll(!showAll)\n    return false\n  }\n\n  const classes = [\n    'lit-message',\n    showAll && 'showall',\n  ].filter(Identity).join(' ')\n\n  return <div className={classes}>\n    <span className=\"message\" onClick={toggleShowAll}>{message.message}</span>\n    <span className=\"name\" onClick={scroll}>\n      {message.name.split(':').slice(1).join(':')}\n    </span>\n  </div>\n}\n\nexport const Header = (props) => {\n  console.log('<Header/>', props)\n  const { root, toggleViewSource } = props\n\n  const resetFile = (ctx, localOnly) => async ev => {\n    console.log(\"Reset File:\", ctx.file.path)\n    const qualifier = localOnly ? \"local\" : \"local And remote\"\n    if (confirm(`Are you sure you want to delete the ${qualifier} copy of \"${ctx.file.path}\"`)) {\n      await ctx.fs.unlink('/' + ctx.file.path, localOnly)\n      console.log(\"Deleted \", ctx.file.path, \"reload page\")\n      // location.reload()\n    }\n  }\n\n  const copyToClipboard = ctx => ev => {\n    clipboard.writeText(ctx.src)\n    console.log(\"Copied src to clipboard\")\n  }\n\n  const ghToken = typeof localStorage !== 'undefined' && localStorage.getItem('ghToken')\n  const setGhToken = (ev) => {\n    localStorage.setItem('ghToken', prompt(\"GitHub personal access token\"))\n  }\n  \n  const copyCell = ctx => ev => {\n    const src = source(ctx.selectedCell,ctx.src)\n    clipboard.writeText(src)\n    console.log(\"Copied cell src to clipboard\")\n  }\n  \n  const deleteCell = ctx => ev => {\n    console.log('Deleting cell at pos:', ctx.selectedCell)\n    ctx.setSrc(ctx.selectedCell, '')\n    ctx.selectCell(null)\n  }\n\n  const cutCell = ctx => ev => {\n    console.log('Cutting cell at pos:', ctx.selectedCell)\n    const src = source(ctx.selectedCell,ctx.src)\n    clipboard.writeText(src)\n    ctx.setSrc(ctx.selectedCell, '')\n    ctx.selectCell(null)\n  }\n\n  const pasteAfterCell = ctx => async ev => {\n    console.log('Pasting after cell at pos:', ctx.selectedCell)\n    const src = source(ctx.selectedCell, ctx.src)\n    const add = await clipboard.readText()\n    ctx.setSrc(ctx.selectedCell, `${src}\\n${add}`)\n    ctx.selectCell(null)\n  }\n\n  const addCodeCell = ctx => ev => {\n    console.log('Adding code cell after cell at pos:', ctx.selectedCell)\n    const src = source(ctx.selectedCell, ctx.src)\n    const add = \"```lang\\n\\n```\"\n    ctx.setSrc(ctx.selectedCell, `${src}\\n\\n${add}`)\n    ctx.selectCell(null)\n  }\n\n  const clearCodeCell = ctx => ev => {\n    console.log('Clearing code cell at pos:', ctx.selectedCell)\n    const meta = source(ctx.selectedCell, ctx.src).split('\\n')[0]\n    const end = '```'\n\n    ctx.setSrc(ctx.selectedCell, `${meta}\\n${end}`)\n  }\n\n  return <SelectionContext.Consumer>{(ctx) => {\n\n    const cellSelected = (ctx.selectedCell && ctx.selectedCell.start) || false\n\n    const local = ctx.file && ctx.file.data && ctx.file.data.times && ctx.file.data.times.local\n    const remote = ctx.file && ctx.file.data && ctx.file.data.times && ctx.file.data.times.remote\n    const ageMessage = ctx.file && ctx.file.data && ctx.file.data.times && ctx.file.data.times.ageMessage\n\n    const menuPlugins = ctx?.file?.data?.plugins?.menu\n    const fileMenuPlugins = ctx?.file?.data?.plugins?.[\"filemenu\"]\n    const cellMenuPlugins = ctx?.file?.data?.plugins?.[\"cellmenu\"]\n    const sectionMenuPlugins = ctx?.file?.data?.plugins?.[\"sectionmenu\"]\n    const helpMenuPlugins = ctx?.file?.data?.plugins?.[\"helpmenu\"]\n\n    console.log('<Header/> plugins?', menuPlugins)\n\n    return <div id=\"lit-header\">\n      <Menu title=\"Home\" horizontal href={root}>\n      <Menu title=\"File\">\n        <span disabled className=\"meta\">{ageMessage}</span>\n        <span disabled>New</span>\n        <span disabled>Open</span>\n        <span disabled>Save</span>\n        <span onClick={toggleViewSource}>View Source</span>\n        <span onClick={copyToClipboard(ctx)}>Copy</span>\n        <span onClick={resetFile(ctx, true)}>Reset</span>\n        <span onClick={resetFile(ctx)}>Delete</span>\n\n        { !fileMenuPlugins ? null : fileMenuPlugins && Object.keys(fileMenuPlugins).map( key => <ErrorBoundary>{fileMenuPlugins[key](ctx, {React, Menu})}</ErrorBoundary>) }\n\n      </Menu>\n      <Menu title=\"Cell\" disabled={!cellSelected}>\n        <span disabled className=\"meta\">\n          {cellSelected && `Lines ${ctx.selectedCell.start.line}-${ctx.selectedCell.end.line}`}\n        </span>\n        <span disabled={!cellSelected} onClick={addCodeCell(ctx)}>Add Code</span>\n        <span disabled={!cellSelected} onClick={deleteCell(ctx)}>Remove</span>\n        <span disabled={!cellSelected} onClick={clearCodeCell(ctx)}>Empty Code</span>\n        <span disabled>Edit</span>\n        <span disabled>Execute</span>\n        <Menu title=\"Move\" disabled={!cellSelected}>\n          <span disabled>Up</span>\n          <span disabled>Down</span>\n        </Menu>\n        <span disabled={!cellSelected} onClick={copyCell(ctx)}>Copy</span>\n        <span disabled={!cellSelected} onClick={cutCell(ctx)}>Cut</span>\n        <span disabled={!cellSelected} onClick={pasteAfterCell(ctx)}>Paste After</span>\n\n        { !cellMenuPlugins ? null : cellMenuPlugins && Object.keys(cellMenuPlugins).map( key => <ErrorBoundary>{cellMenuPlugins[key](ctx, {React, Menu})}</ErrorBoundary>) }\n      </Menu>\n      <Menu title=\"Section\" disabled={!cellSelected}>\n        <span disabled>Collapse</span>\n        <span disabled>Remove</span>\n        <Menu title=\"Move\">\n          <span disabled>Up</span>\n          <span disabled>Down</span>\n        </Menu>\n\n        { !sectionMenuPlugins ? null : sectionMenuPlugins && Object.keys(sectionMenuPlugins).map( key => <ErrorBoundary>{sectionMenuPlugins[key](ctx, {React, Menu})}</ErrorBoundary>) }\n\n      </Menu>\n      \n      { !menuPlugins ? null : menuPlugins && Object.keys(menuPlugins).map( key => <ErrorBoundary>{menuPlugins[key](ctx, {React, Menu})}</ErrorBoundary>) }\n      \n      <Menu title=\"Help\">\n        <span disabled>{`v${version}`}</span>\n        <span disabled>About</span>\n        <span disabled>Documentation</span>\n        <span disabled={!ghToken} onClick={setGhToken}>GitHub Token</span>\n        <Menu title=\"Debug\">\n            <span onClick={setDebug}>Set Mask</span>\n            <span onClick={showInspector}>Show Inspector</span>\n        </Menu>\n                { !helpMenuPlugins ? null : helpMenuPlugins && Object.keys(helpMenuPlugins).map( key => <ErrorBoundary>{helpMenuPlugins[key](ctx, {React, Menu})}</ErrorBoundary>) }\n      </Menu>\n      <Menu right title={<Status local={local} remote={remote} />}>\n        {ctx.file && <span disabled>{`File: ${ctx.file.path}`}</span>}\n        {local && <span disabled>{`Local last updated ${local}`}</span> }\n        {remote && <span disabled>{`Remote last updated ${remote}`}</span> }\n        {ageMessage && <span disabled>{`Local is ${ageMessage} than remote.`}</span> }\n        {cellSelected && <span disabled>{`Lines ${ctx.selectedCell.start.line}-${ctx.selectedCell.end.line}`}</span> }\n      </Menu>\n    </Menu>\n    <div className=\"lit-messages\">\n    { ctx.file.messages.map( m => {\n        return <Message key={m.name} message={m} setSelectedCell={ctx.setSelectedCell} />\n    } ) }\n    </div>\n  </div>\n  }}\n</SelectionContext.Consumer>\n}\n",
                            "position": {
                                "start": {
                                    "line": 17,
                                    "column": 1,
                                    "offset": 165
                                },
                                "end": {
                                    "line": 19,
                                    "column": 4,
                                    "offset": 199
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "Header.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt Header.jsx"
                                    },
                                    "raw": "jsx !collapse < Header.jsx",
                                    "fromSource": "Header.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "Header.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt Header.jsx"
                                        },
                                        "raw": "jsx !collapse < Header.jsx",
                                        "fromSource": "Header.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 15,
                    "column": 1,
                    "offset": 154
                },
                "end": {
                    "line": 19,
                    "column": 4,
                    "offset": 199
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "app",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 20,
                            "column": 1,
                            "offset": 200
                        },
                        "end": {
                            "line": 20,
                            "column": 7,
                            "offset": 206
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 20,
                                    "column": 1,
                                    "offset": 200
                                },
                                "end": {
                                    "line": 24,
                                    "column": 4,
                                    "offset": 239
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "App",
                                    "position": {
                                        "start": {
                                            "line": 20,
                                            "column": 4,
                                            "offset": 203
                                        },
                                        "end": {
                                            "line": 20,
                                            "column": 7,
                                            "offset": 206
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 20,
                                    "column": 1,
                                    "offset": 200
                                },
                                "end": {
                                    "line": 20,
                                    "column": 7,
                                    "offset": 206
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "app"
                                },
                                "id": "app"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 22,
                            "column": 1,
                            "offset": 208
                        },
                        "end": {
                            "line": 24,
                            "column": 4,
                            "offset": 239
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "!collapse < App.jsx",
                            "value": "import React, {useState, useEffect} from 'react'\nimport path from 'path'\nimport SelectionContext from './SelectionContext'\nimport { Header } from './Header'\nimport Editor from './Editor'\nimport Highlight from 'react-highlight.js'\nimport source from 'unist-util-source'\nimport patchSource from '../utils/unist-util-patch-source'\nimport { processor } from '../renderer'\nimport { getConsoleForNamespace } from '../utils/console'\nimport filter from 'unist-util-filter'\nimport { atPos } from '../utils/unist-util-select-position'\nimport { selectAll } from 'unist-util-select'\nimport { posstr } from '../utils/functions'\nimport { ErrorBoundary } from './ErrorBoundry'\n\nconst console = getConsoleForNamespace('App')\n\n\nconst ONLOAD = \"onload\"\nconst ONSAVE = \"onsave\"\nconst ONSELECT = \"onselect\"\n\nconst onLifecyclePlugins = async (file, type, ...args) => {\n    const plugins = file?.data?.plugins?.[type] || {}\n    const keys = Object.keys(plugins)\n    console.log(`[${type}] plugins: ${keys.length}`)\n    for (const key of keys) {\n        if (typeof plugins[key] === 'function') {\n            await plugins[key](...args)\n        }\n    }\n}\n\nconst App = ({root, file, fs, result}) => {\n\n    const [srcAndRes, setSrcAndRes] = useState({\n        src: file.contents.toString(),\n        res: result\n    })\n\n    const [res, setResult] = useState(result)\n    const [selectedCell, setSelectedCell] = useState(null)\n    const [viewSource, setViewSource] = useState(false)\n    const toggleViewSource = () => setViewSource(!viewSource)\n    \n    const setSrcWrapper = async (pos, cellSource) => {\n        console.log(\"<App/> Set src wrapper\", pos, cellSource)\n        const patchedSrc = patchSource(srcAndRes.src, pos, cellSource.trimEnd())\n        if (patchedSrc === srcAndRes.src) {\n            console.log(\"No Change to source of document. Not updating.\")\n            return;\n        }\n        \n        file.contents = patchedSrc\n        file.messages = []\n        const processedFile = await processor({fs}).process(file)\n        console.log(\"Processed client\", processedFile)\n\n        await onLifecyclePlugins(processedFile, ONSAVE, patchedSrc, processedFile, processedFile.data.ast)\n\n        if (typeof window !== 'undefined') {\n            window.lit.file = processedFile\n            window.lit.ast = processedFile.data.ast\n        }\n      \n        try {\n            await fs.writeFile(file.path, patchedSrc, {encoding: 'utf8'})\n        } catch (err) {\n            console.log(\"Failed to write file source to fs\", file.path, err)\n        }\n        \n        const tmpEnd = {line: pos.start.line + cellSource.split('\\n').length }\n        const tmpPos = {start: pos.start, end: tmpEnd }\n        const tree = filter(processedFile.data.ast, atPos(tmpPos))\n        const nodes = selectAll('code', tree)\n        console.log(\"[CodeCells in Change (pos)]\", tmpPos, file.path, tree, nodes)\n        for (const codeCell of nodes) {\n            const meta = codeCell.data && codeCell.data.meta && codeCell.data.meta\n            const filename = meta && meta.filename\n            const extract = filename && meta.isOutput && meta.extract !== 'false'\n            const content = source(codeCell.position, patchedSrc).split('\\n').slice(1,-1).join('\\n')\n            if (extract) {\n                const filepath = path.join( path.dirname(file.path), filename)\n                await fs.writeFile(filepath, content)\n                console.log(`Wrote codefile ${filename} to \"${filepath}\" on disk`)\n            }\n       }\n\n       setSrcAndRes({\n            src: patchedSrc,\n            res: processedFile.result\n       })\n    }\n\n    const setSelectedCellWrapper = async (pos, scroll) => {\n        console.log(\"Selected Cell:\", pos)\n        await onLifecyclePlugins(window.lit.file, ONSELECT, pos, scroll)\n        setSelectedCell(pos)\n        if (pos && scroll) {\n            document.querySelector(`[startpos=\"${posstr(pos.start)}\"]`).scrollIntoViewIfNeeded()\n        }\n    }\n\n    const state = {\n        fs: fs,\n        file: file,  \n        src: srcAndRes.src, \n        selectedCell, \n        setSelectedCell: setSelectedCellWrapper, \n        setSrc: setSrcWrapper\n    }\n\n    useEffect( async fn => {\n       await onLifecyclePlugins(file, ONLOAD, state)\n    },[])\n\n    console.log(`Render \"${file.path}\" (selected: ${selectedCell} `)\n\n    return <SelectionContext.Provider value={state}>\n        <ErrorBoundary><Header root={root} toggleViewSource={toggleViewSource}/></ErrorBoundary>\n        <div id=\"content\">\n          { viewSource \n            // ? <Editor src={srcAndRes.src} update={()=>{}} />\n            ? <ErrorBoundary><Highlight language=\"md\">{srcAndRes.src}</Highlight></ErrorBoundary>\n            : <ErrorBoundary>{srcAndRes.res}</ErrorBoundary> }\n        </div>\n    </SelectionContext.Provider>\n}\n\nexport default App\n",
                            "position": {
                                "start": {
                                    "line": 22,
                                    "column": 1,
                                    "offset": 208
                                },
                                "end": {
                                    "line": 24,
                                    "column": 4,
                                    "offset": 239
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "App.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt App.jsx"
                                    },
                                    "raw": "jsx !collapse < App.jsx",
                                    "fromSource": "App.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "App.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt App.jsx"
                                        },
                                        "raw": "jsx !collapse < App.jsx",
                                        "fromSource": "App.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 20,
                    "column": 1,
                    "offset": 200
                },
                "end": {
                    "line": 24,
                    "column": 4,
                    "offset": 239
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 25,
                            "column": 1,
                            "offset": 240
                        },
                        "end": {
                            "line": 25,
                            "column": 4,
                            "offset": 243
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 25,
                                    "column": 1,
                                    "offset": 240
                                },
                                "end": {
                                    "line": 25,
                                    "column": 4,
                                    "offset": 243
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [],
                            "position": {
                                "start": {
                                    "line": 25,
                                    "column": 1,
                                    "offset": 240
                                },
                                "end": {
                                    "line": 25,
                                    "column": 4,
                                    "offset": 243
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": ""
                                },
                                "id": ""
                            },
                            "processed": true
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 25,
                    "column": 1,
                    "offset": 240
                },
                "end": {
                    "line": 25,
                    "column": 4,
                    "offset": 243
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "selection-context",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 28,
                            "column": 1,
                            "offset": 246
                        },
                        "end": {
                            "line": 28,
                            "column": 21,
                            "offset": 266
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 28,
                                    "column": 1,
                                    "offset": 246
                                },
                                "end": {
                                    "line": 32,
                                    "column": 4,
                                    "offset": 312
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Selection Context",
                                    "position": {
                                        "start": {
                                            "line": 28,
                                            "column": 4,
                                            "offset": 249
                                        },
                                        "end": {
                                            "line": 28,
                                            "column": 21,
                                            "offset": 266
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 28,
                                    "column": 1,
                                    "offset": 246
                                },
                                "end": {
                                    "line": 28,
                                    "column": 21,
                                    "offset": 266
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "selection-context"
                                },
                                "id": "selection-context"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 30,
                            "column": 1,
                            "offset": 268
                        },
                        "end": {
                            "line": 32,
                            "column": 4,
                            "offset": 312
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "!collapse < SelectionContext.jsx",
                            "value": "import React from 'react'\n\n// SelectedCell is the hast node corresponding to the cell.\n\nexport default React.createContext({\n    fs: {},\n    file: {},\n    src: '',\n    selectedCell: null,\n    setSelectedCell: ()=>{},\n    setSrc: () => {},\n});\n",
                            "position": {
                                "start": {
                                    "line": 30,
                                    "column": 1,
                                    "offset": 268
                                },
                                "end": {
                                    "line": 32,
                                    "column": 4,
                                    "offset": 312
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "SelectionContext.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt SelectionContext.jsx"
                                    },
                                    "raw": "jsx !collapse < SelectionContext.jsx",
                                    "fromSource": "SelectionContext.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "SelectionContext.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt SelectionContext.jsx"
                                        },
                                        "raw": "jsx !collapse < SelectionContext.jsx",
                                        "fromSource": "SelectionContext.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 28,
                    "column": 1,
                    "offset": 246
                },
                "end": {
                    "line": 32,
                    "column": 4,
                    "offset": 312
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "cell",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 33,
                            "column": 1,
                            "offset": 313
                        },
                        "end": {
                            "line": 33,
                            "column": 8,
                            "offset": 320
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 33,
                                    "column": 1,
                                    "offset": 313
                                },
                                "end": {
                                    "line": 43,
                                    "column": 4,
                                    "offset": 406
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Cell",
                                    "position": {
                                        "start": {
                                            "line": 33,
                                            "column": 4,
                                            "offset": 316
                                        },
                                        "end": {
                                            "line": 33,
                                            "column": 8,
                                            "offset": 320
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 33,
                                    "column": 1,
                                    "offset": 313
                                },
                                "end": {
                                    "line": 33,
                                    "column": 8,
                                    "offset": 320
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "cell"
                                },
                                "id": "cell"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 35,
                            "column": 1,
                            "offset": 322
                        },
                        "end": {
                            "line": 37,
                            "column": 4,
                            "offset": 354
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "!collapse < Cell.jsx",
                            "value": "import React, {useState,useEffect} from \"react\"\nimport vfile from 'vfile'\nimport source from 'unist-util-source'\nimport filter from 'unist-util-filter'\nimport { atPos } from '../utils/unist-util-select-position'\nimport { selectAll } from 'unist-util-select'\n\nimport CellMenu from './CellMenu'\nimport SelectionContext from './SelectionContext'\nimport Editor from './Editor'\nimport {Repl} from '../repl'\nimport {processor} from '../renderer'\n\nimport { getConsoleForNamespace } from '../utils/console'\nimport { posstr } from '../utils/functions'\n\nconst console = getConsoleForNamespace('Cell')\n\nconst childIs = (node, nodeType) => (node && node.children \n    && node.children.length\n    && node.children[0] \n    && node.children[0].tagName === nodeType) ? node.children[0] : null\n\n\n\nconst Cell = props => {\n\n    const node = props.node\n    node.position = node.position || {}\n    const pos = node.position\n\n    const [src, setSrc] = useState('')\n    const [content, setContent] = useState(null)\n    // const content = props.children\n    const [editing, setEditing] = useState(false)\n    const [executing, setExecuting] = useState(false)\n    const toggleEditing = () => setEditing(!editing)\n    \n    const isSelected = ctx => {\n        return ctx.selectedCell\n            && ctx.selectedCell.start && ctx.selectedCell.end\n            && atPos(ctx.selectedCell)(node)\n            // && ctx.selectedCell.start.line === pos.start.line\n            // && ctx.selectedCell.end.line === pos.end.line\n    }\n    const toggleSelected = ctx => () => {\n        const selected = isSelected(ctx)\n        console.log(`Toggle selected (was ${selected})`, ctx.selectedCell)\n        ctx.setSelectedCell(selected ? null : pos)\n    }\n    \n\n    const isCodeCell = childIs(props.node, 'pre')\n    const codeNode = childIs(isCodeCell, 'code');\n    const meta = codeNode ? codeNode.properties.meta : null\n    const codeSource = codeNode && codeNode.data && codeNode.data.value\n    const rawSource = codeSource && (\"```\" + (meta.raw || '') + \"\\n\" + codeSource + \"```\")\n    const originalSource = codeSource \n             && codeNode.properties\n             && codeNode.properties.data\n             && codeNode.properties.data.originalSource\n    \n    const output = meta && meta.isOutput\n\n   \n\n    const save = ctx => args => {\n        console.log(\"Saving cell\", pos)\n        ctx.setSrc(pos, src)\n        setEditing(false)\n    }\n\n    const exec = ctx => async args => {\n        console.log('Executing cell', {pos, codeSource, rawSource, originalSource})\n        setExecuting(true)\n        const repl = meta.repl ? meta.repl : meta.lang\n        let result\n        let error\n        if (lit?.file?.data?.plugins?.repl?.[repl]) {\n            try { \n                 result = {stdout: await lit.file.data.plugins.repl[repl](codeSource, meta, node) } \n             } catch(err) { \n                 console.error(\"REPL plugin error\", err)\n                 error = true \n                 result = err\n             }\n        } else {\n        try {\n            const repl = new Repl()\n            result = await repl.exec(codeSource, meta, node)\n        } catch(res) {\n            error = true\n            console.log('REPL promise rejected', res)\n            result = res\n        }\n        }\n        console.log('Execution result', result)\n        setExecuting(false)\n        if (result && meta.react && result.resp && React.isValidElement(result.resp))\n            setContent(result.resp)\n        else if (result && meta.selfmutate && typeof result.resp === \"string\") {\n            console.log(\"Experimental!! Special setSrc as cell is self mutating\")\n            // assumes source has changed in the filesystem \n            // so re-render from that\n            if (ctx) ctx.setSrc(lit.ast.position, result.resp)\n        } else {\n            const outputMeta = (meta.hasOutput ? meta.output : 'txt').trim() + (\" attached=true updated=\" + Date.now()) + (error ? ' !error' : '')\n            const output = \"\\n```>\"+ outputMeta +\"\\n\" + result.stdout + \"\\n```\\n\"\n            if (ctx) ctx.setSrc(pos, rawSource + output)\n            else return rawSource + output\n        }\n    }\n\n    useEffect( async () => {\n        if (meta && meta.exec === 'onload') {\n            console.log(\"Onload execution\")\n            const output = await exec()()\n            console.log(\"produced output\", output)\n            const outputVFile = await vfile({ path: meta.filename || 'untitled.js', contents: output})\n            const result = await processor({fs: lit.fs,litroot: lit.location.root}).process(outputVFile)\n            console.log(\"Result\", result)\n            setContent(result.result)\n        }\n    },[props.children])\n\n    const getClasses = ctx => [\n        isSelected(ctx) ? 'selected' : '',\n        editing ? 'editing' : '',\n        isCodeCell ? 'code' : '',\n        output ? 'output' : '',\n        executing ? 'executing' :'',\n    ].join(' ').trim() || undefined\n\n    return <SelectionContext.Consumer>\n        { ctx => {\n            // console.log(\"[Cell] code: \", !!isCodeCell, meta && meta.raw )//, codeNode, {src: codeSource, orig: originalSource}, ctx ) // meta, codeSource)\n            const src = (meta && meta.remote && rawSource)\n                        || source(pos, ctx.src)\n            return <cell\n                onClick={toggleSelected(ctx)}\n                startpos={posstr(pos.start)}\n                endpos={posstr(pos.end)}\n                className={getClasses(ctx)}>\n                    { editing ? <Editor src={src} update={setSrc}/> : <div className=\"cell-content\">{content || props.children}</div> }\n                    { isSelected(ctx) && <CellMenu meta={meta} editing={editing} toggleEditing={toggleEditing} save={save(ctx)} exec={exec(ctx)}/>}\n            </cell>\n        }}\n    </SelectionContext.Consumer>\n}\n\nexport default Cell\n",
                            "position": {
                                "start": {
                                    "line": 35,
                                    "column": 1,
                                    "offset": 322
                                },
                                "end": {
                                    "line": 37,
                                    "column": 4,
                                    "offset": 354
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "Cell.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt Cell.jsx"
                                    },
                                    "raw": "jsx !collapse < Cell.jsx",
                                    "fromSource": "Cell.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "Cell.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt Cell.jsx"
                                        },
                                        "raw": "jsx !collapse < Cell.jsx",
                                        "fromSource": "Cell.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                },
                {
                    "type": "section",
                    "data": {
                        "name": "cellmenu",
                        "hName": "section",
                        "hProperties": {
                            "depth": 3
                        }
                    },
                    "depth": 3,
                    "children": [
                        {
                            "type": "cell",
                            "position": {
                                "start": {
                                    "line": 39,
                                    "column": 1,
                                    "offset": 356
                                },
                                "end": {
                                    "line": 39,
                                    "column": 13,
                                    "offset": 368
                                }
                            },
                            "data": {
                                "hName": "cell",
                                "hProperties": {
                                    "class": "cell"
                                },
                                "section": {
                                    "position": {
                                        "start": {
                                            "line": 39,
                                            "column": 1,
                                            "offset": 356
                                        },
                                        "end": {
                                            "line": 43,
                                            "column": 4,
                                            "offset": 406
                                        }
                                    }
                                }
                            },
                            "children": [
                                {
                                    "type": "heading",
                                    "depth": 3,
                                    "children": [
                                        {
                                            "type": "text",
                                            "value": "CellMenu",
                                            "position": {
                                                "start": {
                                                    "line": 39,
                                                    "column": 5,
                                                    "offset": 360
                                                },
                                                "end": {
                                                    "line": 39,
                                                    "column": 13,
                                                    "offset": 368
                                                }
                                            }
                                        }
                                    ],
                                    "position": {
                                        "start": {
                                            "line": 39,
                                            "column": 1,
                                            "offset": 356
                                        },
                                        "end": {
                                            "line": 39,
                                            "column": 13,
                                            "offset": 368
                                        }
                                    },
                                    "data": {
                                        "hProperties": {
                                            "id": "cellmenu"
                                        },
                                        "id": "cellmenu"
                                    },
                                    "processed": true
                                }
                            ]
                        },
                        {
                            "type": "cell",
                            "position": {
                                "start": {
                                    "line": 41,
                                    "column": 1,
                                    "offset": 370
                                },
                                "end": {
                                    "line": 43,
                                    "column": 4,
                                    "offset": 406
                                }
                            },
                            "data": {
                                "hName": "cell",
                                "hProperties": {
                                    "class": "cell"
                                }
                            },
                            "children": [
                                {
                                    "type": "code",
                                    "lang": "jsx",
                                    "meta": "!collapse < CellMenu.jsx",
                                    "value": "import React, {useState} from \"react\"\nimport { MenuIcon, EditIcon, ExecIcon, CloseIcon, SaveIcon } from './Icons'\nimport { getConsoleForNamespace } from '../utils/console'\n\nconst console = getConsoleForNamespace('CellMenu')\n\nconst wrapHandler = fn => ev => {\n    console.log(\"Cell menu wrapper\", fn, ev)\n    ev.preventDefault()\n    ev.stopPropagation()\n    if (typeof fn === 'function'){\n        const resp = fn(ev)\n        console.log(\"Cell menu wrapper fn executed\", resp)\n    }\n    return false\n}\n\n\nconst CellMenuItem = ({title, icon, handler}) => {\n    const Icon = icon\n    const onClick = handler ? wrapHandler(handler) : null\n    return <li title={title} key={title} onClick={onClick}>{<Icon/>}</li>\n}\n\nconst isExecutable = (meta) => {\n    return meta && (meta.repl || meta.lang === 'js')\n}\n\nconst CellMenu = ({meta, editing, toggleEditing, save, exec} = {}) => {\n\n    const [open, setOpen] = useState(false)\n    const toggleOpen = wrapHandler(ev => {\n        console.log(\"Toggle CellMenu\", open)\n        setOpen(!open)\n    })\n\n    return <menu>\n        <ul className=\"menu__items\">\n            { open && isExecutable(meta) && <CellMenuItem title=\"Execute\" icon={ExecIcon} handler={exec}/>}\n            { open && !editing && <CellMenuItem title=\"Edit\" icon={EditIcon} handler={toggleEditing}/>}\n            { open && editing && <CellMenuItem title=\"Cancel\" icon={CloseIcon} handler={toggleEditing}/>}\n            { open && editing && <CellMenuItem title=\"Save\" icon={SaveIcon} handler={save}/>}\n            { !open \n                ? <CellMenuItem title=\"Open\" icon={MenuIcon} handler={toggleOpen} />\n                : <CellMenuItem title=\"Close\" icon={CloseIcon} handler={toggleOpen} /> }\n        </ul>\n    </menu>\n}\n\nexport default CellMenu\n",
                                    "position": {
                                        "start": {
                                            "line": 41,
                                            "column": 1,
                                            "offset": 370
                                        },
                                        "end": {
                                            "line": 43,
                                            "column": 4,
                                            "offset": 406
                                        }
                                    },
                                    "data": {
                                        "meta": {
                                            "attrs": {},
                                            "lang": "jsx",
                                            "directives": [
                                                "collapse"
                                            ],
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": true,
                                            "source": {
                                                "attrs": {},
                                                "lang": "txt",
                                                "filename": "CellMenu.jsx",
                                                "isOutput": false,
                                                "hasOutput": false,
                                                "hasSource": false,
                                                "raw": "txt CellMenu.jsx"
                                            },
                                            "raw": "jsx !collapse < CellMenu.jsx",
                                            "fromSource": "CellMenu.jsx"
                                        },
                                        "hProperties": {
                                            "className": "",
                                            "meta": {
                                                "attrs": {},
                                                "lang": "jsx",
                                                "directives": [
                                                    "collapse"
                                                ],
                                                "isOutput": false,
                                                "hasOutput": false,
                                                "hasSource": true,
                                                "source": {
                                                    "attrs": {},
                                                    "lang": "txt",
                                                    "filename": "CellMenu.jsx",
                                                    "isOutput": false,
                                                    "hasOutput": false,
                                                    "hasSource": false,
                                                    "raw": "txt CellMenu.jsx"
                                                },
                                                "raw": "jsx !collapse < CellMenu.jsx",
                                                "fromSource": "CellMenu.jsx"
                                            },
                                            "data": {
                                                "originalSource": ""
                                            }
                                        },
                                        "originalSource": ""
                                    }
                                }
                            ]
                        }
                    ],
                    "position": {
                        "start": {
                            "line": 39,
                            "column": 1,
                            "offset": 356
                        },
                        "end": {
                            "line": 43,
                            "column": 4,
                            "offset": 406
                        }
                    }
                }
            ],
            "position": {
                "start": {
                    "line": 33,
                    "column": 1,
                    "offset": 313
                },
                "end": {
                    "line": 43,
                    "column": 4,
                    "offset": 406
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "editor",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 44,
                            "column": 1,
                            "offset": 407
                        },
                        "end": {
                            "line": 44,
                            "column": 10,
                            "offset": 416
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 44,
                                    "column": 1,
                                    "offset": 407
                                },
                                "end": {
                                    "line": 48,
                                    "column": 4,
                                    "offset": 452
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Editor",
                                    "position": {
                                        "start": {
                                            "line": 44,
                                            "column": 4,
                                            "offset": 410
                                        },
                                        "end": {
                                            "line": 44,
                                            "column": 10,
                                            "offset": 416
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 44,
                                    "column": 1,
                                    "offset": 407
                                },
                                "end": {
                                    "line": 44,
                                    "column": 10,
                                    "offset": 416
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "editor"
                                },
                                "id": "editor"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 46,
                            "column": 1,
                            "offset": 418
                        },
                        "end": {
                            "line": 48,
                            "column": 4,
                            "offset": 452
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "!collapse < Editor.jsx",
                            "value": "import React from 'react'\nimport {EditorState, EditorView, basicSetup} from \"@codemirror/basic-setup\"\nimport {Compartment} from '@codemirror/state'\n\n// import {html} from \"@codemirror/lang-html\"\n// import {oneDark} from \"@codemirror/theme-one-dark\"\n\n//import {esLint} from \"@codemirror/lang-javascript\"\n// @ts-ignore\n//import Linter from \"eslint4b-prebuilt\"\n//import {linter} from \"@codemirror/lint\"\n\n//import {StreamLanguage} from \"@codemirror/stream-parser\"\n//import {javascript} from \"@codemirror/legacy-modes/mode/javascript\"\n\nconst lineWrapping = new Compartment\n\nexport default class Editor extends React.Component {\n    constructor(props) {\n        super(props)\n        this.editorRef = React.createRef();\n        this.editorState = window.cms = EditorState.create({\n            doc: props.src, \n            extensions: [\n                basicSetup,\n                EditorView.lineWrapping,\n                EditorView.updateListener.of(this.onUpdate.bind(this))\n            //   html(),\n            //   oneDark\n            //  linter(esLint(new Linter)),\n            //  StreamLanguage.define(javascript),\n            ]\n        })\n    }\n\n    onUpdate(viewUpdate) {\n        if (this.props.update && typeof this.props.update === 'function') {\n            this.props.update(viewUpdate.state.doc.toString())\n        }\n    }\n\n    componentDidMount() {\n        this.view = window.cmv = new EditorView({\n            state: this.editorState, \n            parent: this.editorRef.current\n        })\n    }\n    render() {\n        return <div className=\"editor\" ref={this.editorRef}></div>\n    }\n}",
                            "position": {
                                "start": {
                                    "line": 46,
                                    "column": 1,
                                    "offset": 418
                                },
                                "end": {
                                    "line": 48,
                                    "column": 4,
                                    "offset": 452
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "Editor.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt Editor.jsx"
                                    },
                                    "raw": "jsx !collapse < Editor.jsx",
                                    "fromSource": "Editor.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "Editor.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt Editor.jsx"
                                        },
                                        "raw": "jsx !collapse < Editor.jsx",
                                        "fromSource": "Editor.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 44,
                    "column": 1,
                    "offset": 407
                },
                "end": {
                    "line": 48,
                    "column": 4,
                    "offset": 452
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "icons",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 50,
                            "column": 1,
                            "offset": 454
                        },
                        "end": {
                            "line": 50,
                            "column": 9,
                            "offset": 462
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 50,
                                    "column": 1,
                                    "offset": 454
                                },
                                "end": {
                                    "line": 54,
                                    "column": 4,
                                    "offset": 497
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Icons",
                                    "position": {
                                        "start": {
                                            "line": 50,
                                            "column": 4,
                                            "offset": 457
                                        },
                                        "end": {
                                            "line": 50,
                                            "column": 9,
                                            "offset": 462
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 50,
                                    "column": 1,
                                    "offset": 454
                                },
                                "end": {
                                    "line": 50,
                                    "column": 9,
                                    "offset": 462
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "icons"
                                },
                                "id": "icons"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 52,
                            "column": 1,
                            "offset": 464
                        },
                        "end": {
                            "line": 54,
                            "column": 4,
                            "offset": 497
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "!collapse < Icons.jsx",
                            "value": "import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBars, faPlay, faEdit, faExternalLinkAlt, faTimes, faSave, faAnchor } from '@fortawesome/free-solid-svg-icons'\n\n\nexport const Icon = (props) => <FontAwesomeIcon icon={props.icon} />\n\nexport const MenuIcon = props => (<FontAwesomeIcon icon={faBars} {...props} />)\nexport const EditIcon = props => (<FontAwesomeIcon icon={faEdit} {...props} />)\nexport const ExecIcon = props => (<FontAwesomeIcon icon={faPlay} {...props} />)\nexport const CloseIcon = props => (<FontAwesomeIcon icon={faTimes} {...props} />)\nexport const SaveIcon = props => (<FontAwesomeIcon icon={faSave} {...props} />)\n\nexport const ExternalLinkIcon = props => <Icon icon={faExternalLinkAlt}/>\nexport const AnchorIcon = props => <Icon icon={faAnchor}/>\n",
                            "position": {
                                "start": {
                                    "line": 52,
                                    "column": 1,
                                    "offset": 464
                                },
                                "end": {
                                    "line": 54,
                                    "column": 4,
                                    "offset": 497
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "Icons.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt Icons.jsx"
                                    },
                                    "raw": "jsx !collapse < Icons.jsx",
                                    "fromSource": "Icons.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "Icons.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt Icons.jsx"
                                        },
                                        "raw": "jsx !collapse < Icons.jsx",
                                        "fromSource": "Icons.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 50,
                    "column": 1,
                    "offset": 454
                },
                "end": {
                    "line": 54,
                    "column": 4,
                    "offset": 497
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "code",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 56,
                            "column": 1,
                            "offset": 499
                        },
                        "end": {
                            "line": 56,
                            "column": 8,
                            "offset": 506
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 56,
                                    "column": 1,
                                    "offset": 499
                                },
                                "end": {
                                    "line": 62,
                                    "column": 4,
                                    "offset": 559
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Code",
                                    "position": {
                                        "start": {
                                            "line": 56,
                                            "column": 4,
                                            "offset": 502
                                        },
                                        "end": {
                                            "line": 56,
                                            "column": 8,
                                            "offset": 506
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 56,
                                    "column": 1,
                                    "offset": 499
                                },
                                "end": {
                                    "line": 56,
                                    "column": 8,
                                    "offset": 506
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "code"
                                },
                                "id": "code"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "section",
                    "data": {
                        "name": "code-meta",
                        "hName": "section",
                        "hProperties": {
                            "depth": 3
                        }
                    },
                    "depth": 3,
                    "children": [
                        {
                            "type": "cell",
                            "position": {
                                "start": {
                                    "line": 58,
                                    "column": 1,
                                    "offset": 508
                                },
                                "end": {
                                    "line": 58,
                                    "column": 14,
                                    "offset": 521
                                }
                            },
                            "data": {
                                "hName": "cell",
                                "hProperties": {
                                    "class": "cell"
                                },
                                "section": {
                                    "position": {
                                        "start": {
                                            "line": 58,
                                            "column": 1,
                                            "offset": 508
                                        },
                                        "end": {
                                            "line": 62,
                                            "column": 4,
                                            "offset": 559
                                        }
                                    }
                                }
                            },
                            "children": [
                                {
                                    "type": "heading",
                                    "depth": 3,
                                    "children": [
                                        {
                                            "type": "text",
                                            "value": "Code Meta",
                                            "position": {
                                                "start": {
                                                    "line": 58,
                                                    "column": 5,
                                                    "offset": 512
                                                },
                                                "end": {
                                                    "line": 58,
                                                    "column": 14,
                                                    "offset": 521
                                                }
                                            }
                                        }
                                    ],
                                    "position": {
                                        "start": {
                                            "line": 58,
                                            "column": 1,
                                            "offset": 508
                                        },
                                        "end": {
                                            "line": 58,
                                            "column": 14,
                                            "offset": 521
                                        }
                                    },
                                    "data": {
                                        "hProperties": {
                                            "id": "code-meta"
                                        },
                                        "id": "code-meta"
                                    },
                                    "processed": true
                                }
                            ]
                        },
                        {
                            "type": "cell",
                            "position": {
                                "start": {
                                    "line": 60,
                                    "column": 1,
                                    "offset": 523
                                },
                                "end": {
                                    "line": 62,
                                    "column": 4,
                                    "offset": 559
                                }
                            },
                            "data": {
                                "hName": "cell",
                                "hProperties": {
                                    "class": "cell"
                                }
                            },
                            "children": [
                                {
                                    "type": "code",
                                    "lang": "jsx",
                                    "meta": "!collapse < CodeMeta.jsx",
                                    "value": "import React from 'react'\nimport {Time} from './Time'\nimport { stringToHex, pickTextColorBasedOnBgColor } from '../utils/colors'\n\nconst colorStyle = (val) => {\n    let bgColor = stringToHex(val)\n    let textColor = pickTextColorBasedOnBgColor(bgColor, 'white', 'black')\n\n    // Custom exceptions\n    if (val === 'error')  {\n        bgColor = 'red',\n        textColor = 'white'\n    }\n\n    return {\n        color: textColor,\n        backgroundColor: bgColor\n    }\n}\n\nexport const CodeMeta = ({meta, toggleFullscreen, toggleLocalRemote, toggleCollapsed}) => {\n\n        return <span className=\"meta\">\n            <span className=\"lang\" onClick={toggleCollapsed}>{meta.lang}</span>\n            {meta.repl && <span className=\"repl\">{meta.repl}</span> }\n            {meta.filename && <span className=\"filename\">{meta.filename}</span>}\n            {meta.directives && meta.directives.map( (dir, i) => {\n                const onClick = dir === 'inline' ? toggleFullscreen : null\n                return <span key={dir} onClick={onClick} style={colorStyle(dir)} className={`directive dir-${dir}`}>{dir}</span>\n            })}\n            { meta.attrs && Object.keys(meta.attrs).map(attr => {\n                const val = meta.attrs[attr]\n                // ignored attributes for display\n                if(val===true || val===\"true\" || attr===\"updated\" || attr===\"repl\") return null\n                return <span className={`attribute attr-${attr}`} key={attr} style={colorStyle(attr)}>{`${attr}=${val}`}</span>\n            })}\n            {meta.tags && meta.tags.map( (tag, i) => <span key={tag+i} style={colorStyle(tag)} className=\"tag\">{tag}</span>)}\n            {meta.fromSource && <span onClick={toggleLocalRemote} className=\"source\">{'< ' + meta.fromSource}</span> }\n            {meta.hasOutput && <span className=\"output\">{'> ' + meta.output}</span> }\n            {meta.updated && <span className=\"updatedAt\">Updated <Time ms={parseInt(meta.updated)} /></span> }\n        </span>\n}\n",
                                    "position": {
                                        "start": {
                                            "line": 60,
                                            "column": 1,
                                            "offset": 523
                                        },
                                        "end": {
                                            "line": 62,
                                            "column": 4,
                                            "offset": 559
                                        }
                                    },
                                    "data": {
                                        "meta": {
                                            "attrs": {},
                                            "lang": "jsx",
                                            "directives": [
                                                "collapse"
                                            ],
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": true,
                                            "source": {
                                                "attrs": {},
                                                "lang": "txt",
                                                "filename": "CodeMeta.jsx",
                                                "isOutput": false,
                                                "hasOutput": false,
                                                "hasSource": false,
                                                "raw": "txt CodeMeta.jsx"
                                            },
                                            "raw": "jsx !collapse < CodeMeta.jsx",
                                            "fromSource": "CodeMeta.jsx"
                                        },
                                        "hProperties": {
                                            "className": "",
                                            "meta": {
                                                "attrs": {},
                                                "lang": "jsx",
                                                "directives": [
                                                    "collapse"
                                                ],
                                                "isOutput": false,
                                                "hasOutput": false,
                                                "hasSource": true,
                                                "source": {
                                                    "attrs": {},
                                                    "lang": "txt",
                                                    "filename": "CodeMeta.jsx",
                                                    "isOutput": false,
                                                    "hasOutput": false,
                                                    "hasSource": false,
                                                    "raw": "txt CodeMeta.jsx"
                                                },
                                                "raw": "jsx !collapse < CodeMeta.jsx",
                                                "fromSource": "CodeMeta.jsx"
                                            },
                                            "data": {
                                                "originalSource": ""
                                            }
                                        },
                                        "originalSource": ""
                                    }
                                }
                            ]
                        }
                    ],
                    "position": {
                        "start": {
                            "line": 58,
                            "column": 1,
                            "offset": 508
                        },
                        "end": {
                            "line": 62,
                            "column": 4,
                            "offset": 559
                        }
                    }
                }
            ],
            "position": {
                "start": {
                    "line": 56,
                    "column": 1,
                    "offset": 499
                },
                "end": {
                    "line": 62,
                    "column": 4,
                    "offset": 559
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "codeblock",
                "hName": "section",
                "hProperties": {
                    "depth": 3
                }
            },
            "depth": 3,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 65,
                            "column": 1,
                            "offset": 562
                        },
                        "end": {
                            "line": 65,
                            "column": 14,
                            "offset": 575
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 65,
                                    "column": 1,
                                    "offset": 562
                                },
                                "end": {
                                    "line": 69,
                                    "column": 4,
                                    "offset": 619
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 3,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Codeblock",
                                    "position": {
                                        "start": {
                                            "line": 65,
                                            "column": 5,
                                            "offset": 566
                                        },
                                        "end": {
                                            "line": 65,
                                            "column": 14,
                                            "offset": 575
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 65,
                                    "column": 1,
                                    "offset": 562
                                },
                                "end": {
                                    "line": 65,
                                    "column": 14,
                                    "offset": 575
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "codeblock"
                                },
                                "id": "codeblock"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 67,
                            "column": 1,
                            "offset": 577
                        },
                        "end": {
                            "line": 69,
                            "column": 4,
                            "offset": 619
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "!collapse < base/Codeblock.jsx",
                            "value": "import React, { useState } from 'react'\nimport {log, level} from '../../utils/console'\nimport { getConsoleForNamespace } from '../../utils/console'\nimport { DatesToRelativeDelta } from '../../utils/momento'\nimport Highlight from 'react-highlight.js'\nimport SelectionContext from '../SelectionContext'\nimport {getViewer} from '../../renderer/Viewers'\nimport {CodeMeta} from '../CodeMeta'\n\nimport { Identity } from '../../utils/functions'\nimport { ErrorBoundary } from '../ErrorBoundry'\n\nconst console = getConsoleForNamespace('Codeblock')\n\nconst hasDirective = (meta, d) => {\n  return meta && meta.directives && meta.directives.length && meta.directives.indexOf(d) >= 0\n}\n\n\nexport const Codeblock = props => {\n        \n  const codeNode = props.node.children\n    && props.node.children.length == 1\n    && props.node.children[0].tagName === 'code'\n    ? props.node.children[0] \n    : null;\n\n  const meta = codeNode ? codeNode.properties.meta : null\n  const dirs = (meta && meta.directives) || []\n  const tags = (meta && meta.tags) || []\n  const attrs = (meta && meta.attrs) || {}\n  const id = attrs.id || (meta && meta.filename)\n  const dirClasses = dirs.map(d=>'dir-'+d)\n  const tagClasses = tags.map(t=>'tag-'+t)\n\n  const hasDirective = (d) => {\n    return meta && meta.directives && meta.directives.length && meta.directives.indexOf(d) >= 0\n  }\n\n  const [localRemote, setLocalRemote] = useState('local')\n  const toggleLocalRemote = (ev) => {\n    ev.stopPropagation()\n    ev.preventDefault()\n    setLocalRemote(localRemote === 'local' ? 'remote' : 'local')\n    return false\n  }\n  const [fullScreen, setFullScreen] = useState(false)\n  const toggleFullscreen = (ev) => {\n    ev.stopPropagation()\n    ev.preventDefault()\n    setFullScreen(!fullScreen)\n    return false\n  }\n\n  const [collapsed, setCollapsed] = useState(hasDirective('collapse') ? 'collapsed' :  '')\n  const toggleCollapsed = (ev) => {\n    ev.stopPropagation()\n    ev.preventDefault()\n    setCollapsed(collapsed === 'collapsed' ? 'uncollapsed' : 'collapsed')\n    return false\n  }\n  \n  const anchorClick = ev => {\n     // add #id to history silently\n     history.replaceState(undefined, undefined, `#${id || ''}`)\n  }\n\n  return <SelectionContext.Consumer>\n    { ctx => {\n\n      const Viewer = getViewer(meta, ctx.file.data && ctx.file.data.plugins &&  ctx.file.data.plugins.viewer && ctx.file.data.plugins.viewer)\n\n      const classes = [\n        ...dirClasses,\n        ...tagClasses,\n        meta && `lang-${meta.lang}`,\n        localRemote,\n        collapsed,\n        fullScreen && 'fullscreen',\n        meta && meta.isOutput && 'output'\n      ].filter(Identity).join(' ')\n      \n      if (codeNode) {\n        let source;\n        if (codeNode.data && codeNode.data.value) {\n          source = codeNode.data.value;\n        } else if (false && codeNode.children && codeNode.children[0]) {\n          source = codeNode.children[0].value\n        } else {\n          console.log('unknown source')\n          source = codeNode.value\n        }\n        codeNode.value = source\n\n        const above = Viewer && meta.directives && (meta.directives.indexOf('above') >= 0)\n        const below = Viewer && meta.directives && (meta.directives.indexOf('below') >= 0)\n\n        console.log(meta && meta.raw)\n        const highlighted = <Highlight language={(meta && meta.lang) || \"plaintext\"}>{source}</Highlight>\n        const metaView = meta && <CodeMeta meta={meta} toggleCollapsed={toggleCollapsed} toggleFullscreen={toggleFullscreen} toggleLocalRemote={toggleLocalRemote} />\n        return <codecell className={classes} onClick={anchorClick}>\n            { id && <a name={id}/> }\n            { meta && !above && metaView}\n            { Viewer \n              ? <ErrorBoundary>\n                  { below && highlighted }\n                  <Viewer children={props.children} node={codeNode} React={React} fullscreen={fullScreen}/>\n                </ErrorBoundary>\n              : meta && meta.isOutput\n                ? <output>\n                    {highlighted}\n                  </output>\n                : (!above && !below)\n                   ? highlighted \n                   : null }\n            { meta && above && metaView }\n            { above && highlighted }\n        </codecell>\n      } else {\n          console.log(\"Default codeblock\", this.props.node.children[0])\n          return <codecell><pre className=\"default\">{props.children}</pre></codecell>\n      }\n    }\n  }</SelectionContext.Consumer>\n}\n",
                            "position": {
                                "start": {
                                    "line": 67,
                                    "column": 1,
                                    "offset": 577
                                },
                                "end": {
                                    "line": 69,
                                    "column": 4,
                                    "offset": 619
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "base/Codeblock.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt base/Codeblock.jsx"
                                    },
                                    "raw": "jsx !collapse < base/Codeblock.jsx",
                                    "fromSource": "base/Codeblock.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "base/Codeblock.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt base/Codeblock.jsx"
                                        },
                                        "raw": "jsx !collapse < base/Codeblock.jsx",
                                        "fromSource": "base/Codeblock.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 65,
                    "column": 1,
                    "offset": 562
                },
                "end": {
                    "line": 69,
                    "column": 4,
                    "offset": 619
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "link",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 71,
                            "column": 1,
                            "offset": 621
                        },
                        "end": {
                            "line": 71,
                            "column": 8,
                            "offset": 628
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 71,
                                    "column": 1,
                                    "offset": 621
                                },
                                "end": {
                                    "line": 75,
                                    "column": 4,
                                    "offset": 667
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Link",
                                    "position": {
                                        "start": {
                                            "line": 71,
                                            "column": 4,
                                            "offset": 624
                                        },
                                        "end": {
                                            "line": 71,
                                            "column": 8,
                                            "offset": 628
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 71,
                                    "column": 1,
                                    "offset": 621
                                },
                                "end": {
                                    "line": 71,
                                    "column": 8,
                                    "offset": 628
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "link"
                                },
                                "id": "link"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 73,
                            "column": 1,
                            "offset": 630
                        },
                        "end": {
                            "line": 75,
                            "column": 4,
                            "offset": 667
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "!collapse < base/Link.jsx",
                            "value": "import React from 'react'\nimport { ExternalLinkIcon, AnchorIcon } from '../Icons'\nimport { getConsoleForNamespace } from '../../utils/console'\n\nconst console = getConsoleForNamespace('Link')\n\nconst Link = props => {\n    const title = props.node.properties.title\n    const data = props.data\n    const wikilink = props.wikilink ? 'true' : undefined\n    const icon = (data && data.isAbsolute) \n                 ? '↗'\n                 : (data && data.isFragment)\n                   ? '§'\n                   : null\n\n    console.log(\"<Link/>\", title, props.href)\n\n    const imgOnlyLink = props.node.children\n                        && props.node.children.length === 1\n                        && props.node.children[0].tagName === 'img'\n\n    return <a className={props.className}\n        href={props.href}\n        title={title}\n        wikilink={wikilink}>\n            {props.children}\n            {icon && !imgOnlyLink && <span className=\"linkIcon\">{icon}</span> }\n        </a>\n}\n\nexport default Link\n",
                            "position": {
                                "start": {
                                    "line": 73,
                                    "column": 1,
                                    "offset": 630
                                },
                                "end": {
                                    "line": 75,
                                    "column": 4,
                                    "offset": 667
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "base/Link.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt base/Link.jsx"
                                    },
                                    "raw": "jsx !collapse < base/Link.jsx",
                                    "fromSource": "base/Link.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "base/Link.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt base/Link.jsx"
                                        },
                                        "raw": "jsx !collapse < base/Link.jsx",
                                        "fromSource": "base/Link.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 71,
                    "column": 1,
                    "offset": 621
                },
                "end": {
                    "line": 75,
                    "column": 4,
                    "offset": 667
                }
            }
        },
        {
            "type": "section",
            "data": {
                "name": "backlinks",
                "hName": "section",
                "hProperties": {
                    "depth": 2
                }
            },
            "depth": 2,
            "children": [
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 77,
                            "column": 1,
                            "offset": 669
                        },
                        "end": {
                            "line": 77,
                            "column": 13,
                            "offset": 681
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        },
                        "section": {
                            "position": {
                                "start": {
                                    "line": 77,
                                    "column": 1,
                                    "offset": 669
                                },
                                "end": {
                                    "line": 81,
                                    "column": 4,
                                    "offset": 720
                                }
                            }
                        }
                    },
                    "children": [
                        {
                            "type": "heading",
                            "depth": 2,
                            "children": [
                                {
                                    "type": "text",
                                    "value": "Backlinks",
                                    "position": {
                                        "start": {
                                            "line": 77,
                                            "column": 4,
                                            "offset": 672
                                        },
                                        "end": {
                                            "line": 77,
                                            "column": 13,
                                            "offset": 681
                                        }
                                    }
                                }
                            ],
                            "position": {
                                "start": {
                                    "line": 77,
                                    "column": 1,
                                    "offset": 669
                                },
                                "end": {
                                    "line": 77,
                                    "column": 13,
                                    "offset": 681
                                }
                            },
                            "data": {
                                "hProperties": {
                                    "id": "backlinks"
                                },
                                "id": "backlinks"
                            },
                            "processed": true
                        }
                    ]
                },
                {
                    "type": "cell",
                    "position": {
                        "start": {
                            "line": 79,
                            "column": 1,
                            "offset": 683
                        },
                        "end": {
                            "line": 81,
                            "column": 4,
                            "offset": 720
                        }
                    },
                    "data": {
                        "hName": "cell",
                        "hProperties": {
                            "class": "cell"
                        }
                    },
                    "children": [
                        {
                            "type": "code",
                            "lang": "jsx",
                            "meta": "!collapse < Backlinks.jsx",
                            "value": "import React from 'react'\nimport path from 'path'\n\nexport default class Backlinks extends React.Component {\n    render() {\n        return <>\n            <h4>{`Backlinks (${this.props.links.length})`}</h4>\n            <ol>\n                {this.props.links.map( (link) => {\n                    return  <li key={link.url}><a title={link.title} href={path.join(this.props.root, link.url)}>{link.title}</a></li>\n                })}\n            </ol>\n        </>\n    }\n}\n",
                            "position": {
                                "start": {
                                    "line": 79,
                                    "column": 1,
                                    "offset": 683
                                },
                                "end": {
                                    "line": 81,
                                    "column": 4,
                                    "offset": 720
                                }
                            },
                            "data": {
                                "meta": {
                                    "attrs": {},
                                    "lang": "jsx",
                                    "directives": [
                                        "collapse"
                                    ],
                                    "isOutput": false,
                                    "hasOutput": false,
                                    "hasSource": true,
                                    "source": {
                                        "attrs": {},
                                        "lang": "txt",
                                        "filename": "Backlinks.jsx",
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": false,
                                        "raw": "txt Backlinks.jsx"
                                    },
                                    "raw": "jsx !collapse < Backlinks.jsx",
                                    "fromSource": "Backlinks.jsx"
                                },
                                "hProperties": {
                                    "className": "",
                                    "meta": {
                                        "attrs": {},
                                        "lang": "jsx",
                                        "directives": [
                                            "collapse"
                                        ],
                                        "isOutput": false,
                                        "hasOutput": false,
                                        "hasSource": true,
                                        "source": {
                                            "attrs": {},
                                            "lang": "txt",
                                            "filename": "Backlinks.jsx",
                                            "isOutput": false,
                                            "hasOutput": false,
                                            "hasSource": false,
                                            "raw": "txt Backlinks.jsx"
                                        },
                                        "raw": "jsx !collapse < Backlinks.jsx",
                                        "fromSource": "Backlinks.jsx"
                                    },
                                    "data": {
                                        "originalSource": ""
                                    }
                                },
                                "originalSource": ""
                            }
                        }
                    ]
                }
            ],
            "position": {
                "start": {
                    "line": 77,
                    "column": 1,
                    "offset": 669
                },
                "end": {
                    "line": 81,
                    "column": 4,
                    "offset": 720
                }
            }
        }
    ],
    "position": {
        "start": {
            "line": 1,
            "column": 1,
            "offset": 0
        },
        "end": {
            "line": 92,
            "column": 1,
            "offset": 731
        }
    }
}