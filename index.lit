<!-- data
title: .lit 
-->

# `.lit`

[![Open Source](https://img.shields.io/badge/üå±-Open%20Source-green)](https://github.com/dotlitdev/dotlit)
[![npm (scoped)](https://img.shields.io/npm/v/@dotlit/dotlit)](https://npmjs.org/@dotlit/dotlit)
[![Deploy](https://github.com/dotlitdev/dotlit/actions/workflows/generate.yaml/badge.svg)](https://github.com/dotlitdev/dotlit/actions/workflows/generate.yaml)

`.lit` is a plain text document format, really it's just **Markdown**. But with *Sections*, *Cells*, <kbd>interactive</kbd> & *executable* `code` blocks and _meta_ programming over its own <abbr>AST</abbr>.

## Table of Contents

## About

```>md !warn
‚ö†Ô∏è **`.lit`** is still a *Work in progress*.

This iteration is a from-scratch rewrite of an [initial prototype], with many features yet to be re-implemented.
```

**üß™ [[Scratch ‚ö†Ô∏è Pad üî¨]]**

```graph !inline < manifest.json
```

**‚òëÔ∏è To Do** or *in progress*

- [ ] Fragments in [[wiki-links]] [[testing/Links]]
- [ ] Remove global fetch hack for nodejs and bundle properly with webpack
- [ ] Experiments and [[testing/index|Investigations]]
- [[articles/ideas for]]

**üêú Bugs**
- [ ] Next/sibling sections are getting nested
- [ ] Empty document fails to render 
- [ ] Document with No sections fails
- [ ] Inline <abbr>html</abbr> in Markdown source not surviving to final rendered output.

## Getting Started


### Starter template repo

While `.lit` is still under active development and not quite ready for prime time, you can fork this [GitHub template repository](https://github.com/dotlitdev/dotlit-starter) to deploy your own "instance" hosted on GitHub Pages.

### From the command line

To use `.lit` from the command line, see usage and documentation [here](cli/cli.lit).

## Documentation 

Currently my [[Scratch ‚ö†Ô∏è Pad üî¨]] is the closest thing to documentation, start there for now.

1. A gentle introduction to Markdown
2. Sections & Cells
3. Code Cells
3. [[Divergence from Markdown]]
4. [[Execute Code Cells]]



## Implementation

### Parser

Built atop the unified ecosystem, specifically remark, which takes `.lit` Markdown source and outputs `.lit` AST (Abstract Syntax Tree). [Read More](parser/parser.lit)

### Renderer

The default render output is `html` which includes client-side `javascript` which hydrates a React application. [Read More](renderer/renderer.lit)

### Client

The static html generated by `.lit` does not *require* JavaScript to function for the reader. But by default includes a client bundle which re-hydrates the page to become fully interactive, enabling editing of the original document in place. [Read more](client/client.lit)

### Plugins

`.lit` has a flexible [[Plugin system]], primarily to allow the author to create custom Viewers and REPLs but also includes other types.



### Filesystem

Implemented on top of LightningFS on the client side with pass through reads and writes to a remote backend -- currently GitHub API. [Read more](filesystem/index.lit)

### Utils

Collection of utilities used throughout `.lit` which should probably be extracted and published as individual packages. [Read more](utils/index.lit)



## [[Meta]]



```css !below viewer=style #styling #tweaks
#lit-header {
  box-shadow: 0 2px 0 0 rgba(0,0,0,.01);
}
```

This documents <abbr>AST</abbr>, returned as an Output of an executable `code` cell, with a custom viewer.

```js > json testing/index.json viewer=json2
return JSON.stringify(lit.file.data.ast)
```


<!-- This is a trailing html comment -->
