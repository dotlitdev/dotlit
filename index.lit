<!-- data
title: .lit 
-->

# `.lit`

[![Open Source](https://img.shields.io/badge/🌱-Open%20Source-green)](https://github.com/dotlitdev/dotlit)
[![npm (scoped)](https://img.shields.io/npm/v/@dotlit/dotlit)](https://npmjs.org/@dotlit/dotlit)
[![Deploy](https://github.com/dotlitdev/dotlit/actions/workflows/generate.yaml/badge.svg)](https://github.com/dotlitdev/dotlit/actions/workflows/generate.yaml)

`.lit` is a plain text document format, really it's just **Markdown**. But with *Sections*, *Cells*, <kbd>interactive</kbd> `code` blocks and _meta_ programming over its own *`AST`*

## Table of Contents

## Work in progress

```>md !warn
⚠️ `.lit` is still a *Work in progress*.

This iteration is a from-scratch rewrite of the initial prototype, with many features yet to be reimplemented.
```

**🧪 [[Scratch ⚠️ Pad 🔬]]**

```graph !inline < manifest.json
```

**☑️ To Do**

- [ ] fragments in [[wiki-links]]
- [ ] remove global fetch hack for nodejs and bundle properly with webpack
- [ ] [[testing/Local & Remote files]]

**🐜 Bugs**
- [ ] Next sections are getting nested

**✅ Done**
- [x] [[Execute `code` cells]]
- [x] Check lists ([[gfm]] Github Flavoured Markdown)
- [x] [[Persist to GitHub]]

## Getting Started


### Starter template repo

While `.lit` is still under active development and not quite ready for prime time, you can fork this [GitHub template repository](https://github.com/dotlitdev/dotlit-starter) to deploy your own "instance" hosted on GitHub Pages.

### From the command line

To use `.lit` from the command line, see usage and documentation [here](/cli/cli.lit).

## Documentation 

Currently my [Scratch ⚠️ Pad 🔬] is the closest thing to documentation, start there for now.

## Implementation

### Parser

Built atop the unified ecosystem, specifically remark, which takes `.lit` Markdown source and outputs `.lit` AST (Abstract Syntax Tree). [Read More](parser/parser.lit)

### Renderer

The default render output is `html` which includes client-side `javascript` which hydrates a React application. [Read More](renderer/renderer.lit)

### Client

The static html generated by `.lit` does not *require* JavaScript to function for the reader. But by default includes a [[client/client]] which re-hydrates the page to become fully interactive, enabling editing of the original document in place. See [[components/components]] for implementation details.

### REPL

Still to be re-implemented based on learnings from the prototype. [Read More](repl/index.lit)

### Utils

Collection of utilities used throughout `.lit` which should probably be extracted and published as individual packages. [Read more](utils/index)



## Meta

- [[404]]
- [[meta/GitHub Workflows]]
- [[meta/Styling and Themes]]
- [[meta/Files and Links]]

<!-- This is a trailing html comment -->
